
ps.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  00003826  000038ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000160  0080023a  0080023a  000039f4  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000828  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013cae  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d5a  00000000  00000000  00017f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000049a0  00000000  00000000  0001acc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b9c  00000000  00000000  0001f664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000364f  00000000  00000000  00021200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a346  00000000  00000000  0002484f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002eb95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__dtors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 25 13 	jmp	0x264a	; 0x264a <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__vector_18>
      4c:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	78 07       	cpc	r23, r24
      6a:	7b 07       	cpc	r23, r27
      6c:	7e 07       	cpc	r23, r30
      6e:	81 07       	cpc	r24, r17
      70:	84 07       	cpc	r24, r20
      72:	87 07       	cpc	r24, r23
      74:	8a 07       	cpc	r24, r26
      76:	8d 07       	cpc	r24, r29

00000078 <__trampolines_end>:
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	00 02       	muls	r16, r16
      7e:	01 00       	.word	0x0001	; ????
      80:	00 03       	mulsu	r16, r16
      82:	04 07       	cpc	r16, r20
	...

0000008c <digital_pin_to_bit_mask_PGM>:
      8c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      9c:	04 08 10 20                                         ... 

000000a0 <digital_pin_to_port_PGM>:
      a0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b0:	03 03 03 03                                         ....

000000b4 <port_to_output_PGM>:
      b4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000be <port_to_mode_PGM>:
      be:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c8 <__ctors_start>:
      c8:	0f 09       	sbc	r16, r15
      ca:	a2 0b       	sbc	r26, r18
      cc:	9a 0f       	add	r25, r26

000000ce <__ctors_end>:
      ce:	51 09       	sbc	r21, r1

000000d0 <__dtors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	12 e0       	ldi	r17, 0x02	; 2
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	e6 e2       	ldi	r30, 0x26	; 38
      e4:	f8 e3       	ldi	r31, 0x38	; 56
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	aa 33       	cpi	r26, 0x3A	; 58
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	23 e0       	ldi	r18, 0x03	; 3
      f4:	aa e3       	ldi	r26, 0x3A	; 58
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	aa 39       	cpi	r26, 0x9A	; 154
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	c7 e6       	ldi	r28, 0x67	; 103
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
     10a:	21 97       	sbiw	r28, 0x01	; 1
     10c:	fe 01       	movw	r30, r28
     10e:	0e 94 bc 19 	call	0x3378	; 0x3378 <__tablejump2__>
     112:	c4 36       	cpi	r28, 0x64	; 100
     114:	d1 07       	cpc	r29, r17
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 80 11 	call	0x2300	; 0x2300 <main>
     11c:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__do_global_dtors>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <_Z10eepromReadtP11TempControlt>:
#include <Arduino.h>  // for type definitions
#include "EEPROMsave_Structure.h"


_EXT void eepromRead(T_UWORD addr, TempControl *output, T_UWORD length)
{
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	8b 01       	movw	r16, r22
     132:	04 0f       	add	r16, r20
     134:	15 1f       	adc	r17, r21
     136:	eb 01       	movw	r28, r22
     138:	7c 01       	movw	r14, r24
     13a:	e6 1a       	sub	r14, r22
     13c:	f7 0a       	sbc	r15, r23
     13e:	c7 01       	movw	r24, r14
     140:	8c 0f       	add	r24, r28
     142:	9d 1f       	adc	r25, r29
	T_UBYTE* src;
	T_UBYTE* dst;
	src = (T_UBYTE*)addr;
	dst = (T_UBYTE*)output;
	for (T_UWORD i = 0; i < length; i++) {
     144:	c0 17       	cp	r28, r16
     146:	d1 07       	cpc	r29, r17
     148:	21 f0       	breq	.+8      	; 0x152 <_Z10eepromReadtP11TempControlt+0x2e>
		*dst++ = eeprom_read_byte(src++);
     14a:	0e 94 b9 1b 	call	0x3772	; 0x3772 <eeprom_read_byte>
     14e:	89 93       	st	Y+, r24
{
	T_UBYTE* src;
	T_UBYTE* dst;
	src = (T_UBYTE*)addr;
	dst = (T_UBYTE*)output;
	for (T_UWORD i = 0; i < length; i++) {
     150:	f6 cf       	rjmp	.-20     	; 0x13e <_Z10eepromReadtP11TempControlt+0x1a>
		*dst++ = eeprom_read_byte(src++);
	}
}
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	ff 90       	pop	r15
     15c:	ef 90       	pop	r14
     15e:	08 95       	ret

00000160 <_Z11eepromWritetP11TempControlt>:

_EXT void eepromWrite(T_UWORD addr, TempControl *input, T_UWORD length)
{
     160:	ef 92       	push	r14
     162:	ff 92       	push	r15
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	8b 01       	movw	r16, r22
     16e:	04 0f       	add	r16, r20
     170:	15 1f       	adc	r17, r21
     172:	eb 01       	movw	r28, r22
     174:	7c 01       	movw	r14, r24
     176:	e6 1a       	sub	r14, r22
     178:	f7 0a       	sbc	r15, r23
     17a:	c7 01       	movw	r24, r14
     17c:	8c 0f       	add	r24, r28
     17e:	9d 1f       	adc	r25, r29
	T_UBYTE* src;
	T_UBYTE* dst;
	src = (T_UBYTE*)input;
	dst = (T_UBYTE*)addr;
	for (T_UWORD i = 0; i < length; i++) {
     180:	c0 17       	cp	r28, r16
     182:	d1 07       	cpc	r29, r17
     184:	21 f0       	breq	.+8      	; 0x18e <_Z11eepromWritetP11TempControlt+0x2e>
		eeprom_write_byte(dst++, *src++);
     186:	69 91       	ld	r22, Y+
     188:	0e 94 c1 1b 	call	0x3782	; 0x3782 <eeprom_write_byte>
{
	T_UBYTE* src;
	T_UBYTE* dst;
	src = (T_UBYTE*)input;
	dst = (T_UBYTE*)addr;
	for (T_UWORD i = 0; i < length; i++) {
     18c:	f6 cf       	rjmp	.-20     	; 0x17a <_Z11eepromWritetP11TempControlt+0x1a>
		eeprom_write_byte(dst++, *src++);
	}
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret

0000019c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>:
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     19c:	68 2f       	mov	r22, r24
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <eeprom_write_byte>

000001a6 <_Z12init_displayv>:
TempControl PID_tempControl;

_EXT void init_display()
{
	// Initializes and clears the LCD screen
	lcd.begin(16, 2);
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	42 e0       	ldi	r20, 0x02	; 2
     1aa:	60 e1       	ldi	r22, 0x10	; 16
     1ac:	87 e8       	ldi	r24, 0x87	; 135
     1ae:	92 e0       	ldi	r25, 0x02	; 2
     1b0:	0e 94 8c 10 	call	0x2118	; 0x2118 <_ZN13LiquidCrystal5beginEhhh>
	lcd.clear();
     1b4:	87 e8       	ldi	r24, 0x87	; 135
     1b6:	92 e0       	ldi	r25, 0x02	; 2
     1b8:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>

000001bc <_Z13LCD_creteCharv>:
}

_EXT void LCD_creteChar()
{
	// Creates the byte for the 3 custom characters
	lcd.createChar(0, menuCursor);
     1bc:	48 e0       	ldi	r20, 0x08	; 8
     1be:	51 e0       	ldi	r21, 0x01	; 1
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	87 e8       	ldi	r24, 0x87	; 135
     1c4:	92 e0       	ldi	r25, 0x02	; 2
     1c6:	0e 94 51 11 	call	0x22a2	; 0x22a2 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(1, upArrow);
     1ca:	40 e1       	ldi	r20, 0x10	; 16
     1cc:	51 e0       	ldi	r21, 0x01	; 1
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	87 e8       	ldi	r24, 0x87	; 135
     1d2:	92 e0       	ldi	r25, 0x02	; 2
     1d4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(2, downArrow);
     1d8:	48 e1       	ldi	r20, 0x18	; 24
     1da:	51 e0       	ldi	r21, 0x01	; 1
     1dc:	62 e0       	ldi	r22, 0x02	; 2
     1de:	87 e8       	ldi	r24, 0x87	; 135
     1e0:	92 e0       	ldi	r25, 0x02	; 2
     1e2:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <_ZN13LiquidCrystal10createCharEhPh>

000001e6 <_Z12mainMenuDrawv>:
}

// This function will generate the 2 menu items that can fit on the screen. They will change as you scroll through your menu. Up and down arrows will indicate your current menu position.
_EXT void mainMenuDraw(){
     1e6:	cf 93       	push	r28
	
	lcd.clear();
     1e8:	87 e8       	ldi	r24, 0x87	; 135
     1ea:	92 e0       	ldi	r25, 0x02	; 2
     1ec:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(1, 0);
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	87 e8       	ldi	r24, 0x87	; 135
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(menuItems[menuPage]);
     1fc:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <menuPage>
     200:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <menuPage+0x1>
     204:	c6 e0       	ldi	r28, 0x06	; 6
     206:	c8 9f       	mul	r28, r24
     208:	b0 01       	movw	r22, r0
     20a:	c9 9f       	mul	r28, r25
     20c:	70 0d       	add	r23, r0
     20e:	11 24       	eor	r1, r1
     210:	69 5a       	subi	r22, 0xA9	; 169
     212:	7d 4f       	sbci	r23, 0xFD	; 253
     214:	87 e8       	ldi	r24, 0x87	; 135
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	0e 94 ce 11 	call	0x239c	; 0x239c <_ZN5Print5printERK6String>
	lcd.setCursor(1, 1);
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	87 e8       	ldi	r24, 0x87	; 135
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(menuItems[menuPage + 1]);
     228:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <menuPage>
     22c:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <menuPage+0x1>
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	c8 9f       	mul	r28, r24
     234:	b0 01       	movw	r22, r0
     236:	c9 9f       	mul	r28, r25
     238:	70 0d       	add	r23, r0
     23a:	11 24       	eor	r1, r1
     23c:	69 5a       	subi	r22, 0xA9	; 169
     23e:	7d 4f       	sbci	r23, 0xFD	; 253
     240:	87 e8       	ldi	r24, 0x87	; 135
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	0e 94 ce 11 	call	0x239c	; 0x239c <_ZN5Print5printERK6String>
	
	if (menuPage == 0)
     248:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <menuPage>
     24c:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <menuPage+0x1>
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	a9 f0       	breq	.+42     	; 0x27e <_Z12mainMenuDrawv+0x98>
     254:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <maxMenuPages>
     258:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <maxMenuPages+0x1>
	{
		lcd.setCursor(15, 1);
		lcd.write(byte(2));	 //write \/
	}
	else if ((menuPage > 0) && (menuPage < maxMenuPages))
     25c:	18 16       	cp	r1, r24
     25e:	19 06       	cpc	r1, r25
     260:	b4 f4       	brge	.+44     	; 0x28e <_Z12mainMenuDrawv+0xa8>
     262:	82 17       	cp	r24, r18
     264:	93 07       	cpc	r25, r19
     266:	9c f4       	brge	.+38     	; 0x28e <_Z12mainMenuDrawv+0xa8>
	{
		lcd.setCursor(15, 0);
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	6f e0       	ldi	r22, 0x0F	; 15
     26c:	87 e8       	ldi	r24, 0x87	; 135
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write(byte(1));   //write /\
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	87 e8       	ldi	r24, 0x87	; 135
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN13LiquidCrystal5writeEh>
		
		lcd.setCursor(15, 1);
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	6f e0       	ldi	r22, 0x0F	; 15
     282:	87 e8       	ldi	r24, 0x87	; 135
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write(byte(2));   //write \/
     28a:	62 e0       	ldi	r22, 0x02	; 2
     28c:	0a c0       	rjmp	.+20     	; 0x2a2 <_Z12mainMenuDrawv+0xbc>

	}
	else if (menuPage == maxMenuPages)
     28e:	82 17       	cp	r24, r18
     290:	93 07       	cpc	r25, r19
     292:	61 f4       	brne	.+24     	; 0x2ac <_Z12mainMenuDrawv+0xc6>
	{
		lcd.setCursor(15, 0);
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	6f e0       	ldi	r22, 0x0F	; 15
     298:	87 e8       	ldi	r24, 0x87	; 135
     29a:	92 e0       	ldi	r25, 0x02	; 2
     29c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.write(byte(1));   //end of menu => write /\
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	87 e8       	ldi	r24, 0x87	; 135
     2a4:	92 e0       	ldi	r25, 0x02	; 2
		
	}
}
     2a6:	cf 91       	pop	r28

	}
	else if (menuPage == maxMenuPages)
	{
		lcd.setCursor(15, 0);
		lcd.write(byte(1));   //end of menu => write /\
     2a8:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_ZN13LiquidCrystal5writeEh>
		
	}
}
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <_Z10drawCursorv>:

// When called, this function will erase the current cursor and redraw it based on the cursorPosition and menuPage variables.
_EXT void drawCursor() {
	for (int x = 0; x < 2; x++)
	{
		lcd.setCursor(0, x);
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	87 e8       	ldi	r24, 0x87	; 135
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(" ");     // Erases current cursor
     2bc:	61 e1       	ldi	r22, 0x11	; 17
     2be:	72 e0       	ldi	r23, 0x02	; 2
     2c0:	87 e8       	ldi	r24, 0x87	; 135
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

// When called, this function will erase the current cursor and redraw it based on the cursorPosition and menuPage variables.
_EXT void drawCursor() {
	for (int x = 0; x < 2; x++)
	{
		lcd.setCursor(0, x);
     2c8:	41 e0       	ldi	r20, 0x01	; 1
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	87 e8       	ldi	r24, 0x87	; 135
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(" ");     // Erases current cursor
     2d4:	61 e1       	ldi	r22, 0x11	; 17
     2d6:	72 e0       	ldi	r23, 0x02	; 2
     2d8:	87 e8       	ldi	r24, 0x87	; 135
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	}
	
	if (menuPage % 2 == 0) {
     2e0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <menuPage>
     2e4:	80 fd       	sbrc	r24, 0
     2e6:	22 c0       	rjmp	.+68     	; 0x32c <_Z10drawCursorv+0x7c>
		if (cursorPosition % 2 == 0) {  // If the menu page is even and the cursor position is even that means the cursor should be on line 1
     2e8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     2ec:	80 fd       	sbrc	r24, 0
     2ee:	0b c0       	rjmp	.+22     	; 0x306 <_Z10drawCursorv+0x56>
			lcd.setCursor(0, 0);
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	87 e8       	ldi	r24, 0x87	; 135
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write(byte(0));
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 e8       	ldi	r24, 0x87	; 135
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN13LiquidCrystal5writeEh>
		}
		if (cursorPosition % 2 != 0) {  // If the menu page is even and the cursor position is odd that means the cursor should be on line 2
     306:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     30a:	80 ff       	sbrs	r24, 0
     30c:	0b c0       	rjmp	.+22     	; 0x324 <_Z10drawCursorv+0x74>
			lcd.setCursor(0, 1);
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	87 e8       	ldi	r24, 0x87	; 135
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write(byte(0));
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	87 e8       	ldi	r24, 0x87	; 135
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN13LiquidCrystal5writeEh>
		}
	}
	if (menuPage % 2 != 0) {
     324:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <menuPage>
     328:	80 ff       	sbrs	r24, 0
     32a:	1e c0       	rjmp	.+60     	; 0x368 <_Z10drawCursorv+0xb8>
		if (cursorPosition % 2 == 0) {  // If the menu page is odd and the cursor position is even that means the cursor should be on line 2
     32c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     330:	80 fd       	sbrc	r24, 0
     332:	0b c0       	rjmp	.+22     	; 0x34a <_Z10drawCursorv+0x9a>
			lcd.setCursor(0, 1);
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	87 e8       	ldi	r24, 0x87	; 135
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write(byte(0));
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	87 e8       	ldi	r24, 0x87	; 135
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN13LiquidCrystal5writeEh>
		}
		if (cursorPosition % 2 != 0) {  // If the menu page is odd and the cursor position is odd that means the cursor should be on line 1
     34a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     34e:	80 ff       	sbrs	r24, 0
     350:	0b c0       	rjmp	.+22     	; 0x368 <_Z10drawCursorv+0xb8>
			lcd.setCursor(0, 0);
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	87 e8       	ldi	r24, 0x87	; 135
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			lcd.write(byte(0));
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	87 e8       	ldi	r24, 0x87	; 135
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_ZN13LiquidCrystal5writeEh>
     368:	08 95       	ret

0000036a <_Z9getButtoni>:

// This function is called whenever a button press is evaluated. The LCD shield works by observing a voltage drop across the buttons all hooked up to A0.
_LOC T_E_BUTTON getButton(int analogValue) {
	T_E_BUTTON button = E_BUTTON_NONE;
	
	if ((analogValue < 850) && (analogValue > 700))
     36a:	9c 01       	movw	r18, r24
     36c:	2d 5b       	subi	r18, 0xBD	; 189
     36e:	32 40       	sbci	r19, 0x02	; 2
     370:	25 39       	cpi	r18, 0x95	; 149
     372:	31 05       	cpc	r19, r1
     374:	88 f0       	brcs	.+34     	; 0x398 <_Z9getButtoni+0x2e>
	{
		button = E_BUTTON_1; // OK
	}
	else if ((analogValue < 650) && (analogValue > 500))
     376:	28 53       	subi	r18, 0x38	; 56
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	25 39       	cpi	r18, 0x95	; 149
     37c:	31 05       	cpc	r19, r1
     37e:	70 f0       	brcs	.+28     	; 0x39c <_Z9getButtoni+0x32>
	{
		button = E_BUTTON_2; // UP
	}
	else if ((analogValue < 450) && (analogValue > 350))
     380:	2a 56       	subi	r18, 0x6A	; 106
     382:	3f 4f       	sbci	r19, 0xFF	; 255
     384:	23 36       	cpi	r18, 0x63	; 99
     386:	31 05       	cpc	r19, r1
     388:	58 f0       	brcs	.+22     	; 0x3a0 <_Z9getButtoni+0x36>
	{
		button = E_BUTTON_3; // DOWN
	}
	else if ((analogValue > 150) && (analogValue < 250)) {
     38a:	87 59       	subi	r24, 0x97	; 151
     38c:	91 09       	sbc	r25, r1
     38e:	83 36       	cpi	r24, 0x63	; 99
     390:	91 05       	cpc	r25, r1
     392:	40 f4       	brcc	.+16     	; 0x3a4 <_Z9getButtoni+0x3a>
		
		button = E_BUTTON_4; // BACK
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	08 95       	ret
_LOC T_E_BUTTON getButton(int analogValue) {
	T_E_BUTTON button = E_BUTTON_NONE;
	
	if ((analogValue < 850) && (analogValue > 700))
	{
		button = E_BUTTON_1; // OK
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	08 95       	ret
	}
	else if ((analogValue < 650) && (analogValue > 500))
	{
		button = E_BUTTON_2; // UP
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	08 95       	ret
	}
	else if ((analogValue < 450) && (analogValue > 350))
	{
		button = E_BUTTON_3; // DOWN
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	08 95       	ret
	}
}

// This function is called whenever a button press is evaluated. The LCD shield works by observing a voltage drop across the buttons all hooked up to A0.
_LOC T_E_BUTTON getButton(int analogValue) {
	T_E_BUTTON button = E_BUTTON_NONE;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
	else if ((analogValue > 150) && (analogValue < 250)) {
		
		button = E_BUTTON_4; // BACK
	}
	return button;
}
     3a6:	08 95       	ret

000003a8 <_Z6menuKpv>:

_LOC void menuKp() { // Function executes when you select the 2nd item from main menu
	int activeButton = 0;
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     3a8:	47 e1       	ldi	r20, 0x17	; 23
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	6a e3       	ldi	r22, 0x3A	; 58
     3ae:	72 e0       	ldi	r23, 0x02	; 2
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     3be:	87 e8       	ldi	r24, 0x87	; 135
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	87 e8       	ldi	r24, 0x87	; 135
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Kp = ");
     3d2:	62 e2       	ldi	r22, 0x22	; 34
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	87 e8       	ldi	r24, 0x87	; 135
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(5, 0);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	65 e0       	ldi	r22, 0x05	; 5
     3e2:	87 e8       	ldi	r24, 0x87	; 135
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Kp);
     3ea:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <__data_end>
     3ee:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <__data_end+0x1>
     3f2:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <__data_end+0x2>
     3f6:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <__data_end+0x3>
     3fa:	22 e0       	ldi	r18, 0x02	; 2
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	87 e8       	ldi	r24, 0x87	; 135
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN5Print5printEdi>
	lcd.setCursor(0, 1);
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	87 e8       	ldi	r24, 0x87	; 135
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     412:	68 e2       	ldi	r22, 0x28	; 40
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	87 e8       	ldi	r24, 0x87	; 135
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     424:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     428:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     42c:	82 35       	cpi	r24, 0x52	; 82
     42e:	93 40       	sbci	r25, 0x03	; 3
     430:	6c f4       	brge	.+26     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			delay(BT_PRESSED_DELAY);
     432:	6c e2       	ldi	r22, 0x2C	; 44
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     444:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     448:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     44c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     450:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     454:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	71 f1       	breq	.+92     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     45c:	28 f5       	brcc	.+74     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	f1 f6       	brne	.-68     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			case E_BUTTON_1://Save Kp in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     462:	47 e1       	ldi	r20, 0x17	; 23
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	6a e3       	ldi	r22, 0x3A	; 58
     468:	72 e0       	ldi	r23, 0x02	; 2
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     472:	87 e8       	ldi	r24, 0x87	; 135
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	65 e0       	ldi	r22, 0x05	; 5
     47e:	87 e8       	ldi	r24, 0x87	; 135
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("SALVAT!");
     486:	69 e3       	ldi	r22, 0x39	; 57
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	87 e8       	ldi	r24, 0x87	; 135
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				
				EEPROM.write(255, 1);		//No error
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
				TempControllerUpdate();
     498:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z20TempControllerUpdatev>
				delay(1500);
     49c:	6c ed       	ldi	r22, 0xDC	; 220
     49e:	75 e0       	ldi	r23, 0x05	; 5
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     4a8:	83 30       	cpi	r24, 0x03	; 3
     4aa:	a9 f0       	breq	.+42     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4ac:	84 30       	cpi	r24, 0x04	; 4
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	b6 cf       	rjmp	.-148    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				lcd.print(PID_tempControl.Kp);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Kp += 1;
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e8       	ldi	r20, 0x80	; 128
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <__data_end>
     4c4:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <__data_end+0x1>
     4c8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end+0x2>
     4cc:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__data_end+0x3>
     4d0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
				lcd.print(PID_tempControl.Kp);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Kp -= 1;
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e8       	ldi	r20, 0x80	; 128
     4dc:	5f e3       	ldi	r21, 0x3F	; 63
     4de:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <__data_end>
     4e2:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <__data_end+0x1>
     4e6:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end+0x2>
     4ea:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__data_end+0x3>
     4ee:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
     4f2:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <__data_end>
     4f6:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <__data_end+0x1>
     4fa:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end+0x2>
     4fe:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__data_end+0x3>
				lcd.setCursor(5,0);
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	65 e0       	ldi	r22, 0x05	; 5
     506:	87 e8       	ldi	r24, 0x87	; 135
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Kp);
     50e:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <__data_end>
     512:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <__data_end+0x1>
     516:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <__data_end+0x2>
     51a:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <__data_end+0x3>
     51e:	22 e0       	ldi	r18, 0x02	; 2
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	87 e8       	ldi	r24, 0x87	; 135
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN5Print5printEdi>
			}break;
     52a:	79 cf       	rjmp	.-270    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

0000052c <_Z6menuKiv>:
}

_LOC void menuKi() { // Function executes when you select the 2nd item from main menu
	int activeButton = 0;
	
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     52c:	47 e1       	ldi	r20, 0x17	; 23
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	6a e3       	ldi	r22, 0x3A	; 58
     532:	72 e0       	ldi	r23, 0x02	; 2
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     542:	87 e8       	ldi	r24, 0x87	; 135
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	87 e8       	ldi	r24, 0x87	; 135
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Ki = ");
     556:	61 e4       	ldi	r22, 0x41	; 65
     558:	71 e0       	ldi	r23, 0x01	; 1
     55a:	87 e8       	ldi	r24, 0x87	; 135
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(5,0);
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	65 e0       	ldi	r22, 0x05	; 5
     566:	87 e8       	ldi	r24, 0x87	; 135
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Ki);
     56e:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <__data_end+0x4>
     572:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <__data_end+0x5>
     576:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <__data_end+0x6>
     57a:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <__data_end+0x7>
     57e:	22 e0       	ldi	r18, 0x02	; 2
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	87 e8       	ldi	r24, 0x87	; 135
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN5Print5printEdi>
	lcd.setCursor(0,1);
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	87 e8       	ldi	r24, 0x87	; 135
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     596:	68 e2       	ldi	r22, 0x28	; 40
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	87 e8       	ldi	r24, 0x87	; 135
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     5a8:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     5ac:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     5b0:	82 35       	cpi	r24, 0x52	; 82
     5b2:	93 40       	sbci	r25, 0x03	; 3
     5b4:	6c f4       	brge	.+26     	; 0x5d0 <_Z6menuKiv+0xa4>
			delay(BT_PRESSED_DELAY);
     5b6:	6c e2       	ldi	r22, 0x2C	; 44
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     5c8:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     5cc:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     5d0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     5d4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     5d8:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	71 f1       	breq	.+92     	; 0x63c <_Z6menuKiv+0x110>
     5e0:	28 f5       	brcc	.+74     	; 0x62c <_Z6menuKiv+0x100>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	f1 f6       	brne	.-68     	; 0x5a2 <_Z6menuKiv+0x76>
			case E_BUTTON_1://Save Ki in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     5e6:	47 e1       	ldi	r20, 0x17	; 23
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	6a e3       	ldi	r22, 0x3A	; 58
     5ec:	72 e0       	ldi	r23, 0x02	; 2
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     5f6:	87 e8       	ldi	r24, 0x87	; 135
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	65 e0       	ldi	r22, 0x05	; 5
     602:	87 e8       	ldi	r24, 0x87	; 135
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("SALVAT!");
     60a:	69 e3       	ldi	r22, 0x39	; 57
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	87 e8       	ldi	r24, 0x87	; 135
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
				TempControllerUpdate();
     61c:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z20TempControllerUpdatev>
				delay(1500);
     620:	6c ed       	ldi	r22, 0xDC	; 220
     622:	75 e0       	ldi	r23, 0x05	; 5
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     62c:	83 30       	cpi	r24, 0x03	; 3
     62e:	a9 f0       	breq	.+42     	; 0x65a <_Z6menuKiv+0x12e>
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	09 f0       	breq	.+2      	; 0x636 <_Z6menuKiv+0x10a>
     634:	b6 cf       	rjmp	.-148    	; 0x5a2 <_Z6menuKiv+0x76>
				lcd.print(PID_tempControl.Ki);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				activeButton = 1;
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Ki += 1;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e8       	ldi	r20, 0x80	; 128
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <__data_end+0x4>
     648:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <__data_end+0x5>
     64c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end+0x6>
     650:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x7>
     654:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
     658:	0e c0       	rjmp	.+28     	; 0x676 <_Z6menuKiv+0x14a>
				lcd.print(PID_tempControl.Ki);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Ki -= 1;
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e8       	ldi	r20, 0x80	; 128
     660:	5f e3       	ldi	r21, 0x3F	; 63
     662:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <__data_end+0x4>
     666:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <__data_end+0x5>
     66a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end+0x6>
     66e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__data_end+0x7>
     672:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
     676:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <__data_end+0x4>
     67a:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <__data_end+0x5>
     67e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end+0x6>
     682:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__data_end+0x7>
				lcd.setCursor(5,0);
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	65 e0       	ldi	r22, 0x05	; 5
     68a:	87 e8       	ldi	r24, 0x87	; 135
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Ki);
     692:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <__data_end+0x4>
     696:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <__data_end+0x5>
     69a:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <__data_end+0x6>
     69e:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <__data_end+0x7>
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	87 e8       	ldi	r24, 0x87	; 135
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN5Print5printEdi>
			}break;
     6ae:	79 cf       	rjmp	.-270    	; 0x5a2 <_Z6menuKiv+0x76>

000006b0 <_Z6menuKdv>:
	}
}

_LOC void menuKd() { // Function executes when you select the 3rd item from main menu
	int activeButton = 0;
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     6b0:	47 e1       	ldi	r20, 0x17	; 23
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	6a e3       	ldi	r22, 0x3A	; 58
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     6c6:	87 e8       	ldi	r24, 0x87	; 135
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	87 e8       	ldi	r24, 0x87	; 135
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Kd = ");
     6da:	67 e4       	ldi	r22, 0x47	; 71
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	87 e8       	ldi	r24, 0x87	; 135
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(5,0);
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	65 e0       	ldi	r22, 0x05	; 5
     6ea:	87 e8       	ldi	r24, 0x87	; 135
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Kd);
     6f2:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <__data_end+0x8>
     6f6:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <__data_end+0x9>
     6fa:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <__data_end+0xa>
     6fe:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <__data_end+0xb>
     702:	22 e0       	ldi	r18, 0x02	; 2
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	87 e8       	ldi	r24, 0x87	; 135
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN5Print5printEdi>
	lcd.setCursor(0,1);
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	87 e8       	ldi	r24, 0x87	; 135
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     71a:	68 e2       	ldi	r22, 0x28	; 40
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	87 e8       	ldi	r24, 0x87	; 135
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     72c:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     730:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     734:	82 35       	cpi	r24, 0x52	; 82
     736:	93 40       	sbci	r25, 0x03	; 3
     738:	6c f4       	brge	.+26     	; 0x754 <_Z6menuKdv+0xa4>
			delay(BT_PRESSED_DELAY);
     73a:	6c e2       	ldi	r22, 0x2C	; 44
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     74c:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     750:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     754:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     758:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     75c:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	71 f1       	breq	.+92     	; 0x7c0 <_Z6menuKdv+0x110>
     764:	28 f5       	brcc	.+74     	; 0x7b0 <_Z6menuKdv+0x100>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	f1 f6       	brne	.-68     	; 0x726 <_Z6menuKdv+0x76>
			case E_BUTTON_1://Save Kd in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     76a:	47 e1       	ldi	r20, 0x17	; 23
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	6a e3       	ldi	r22, 0x3A	; 58
     770:	72 e0       	ldi	r23, 0x02	; 2
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     77a:	87 e8       	ldi	r24, 0x87	; 135
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	65 e0       	ldi	r22, 0x05	; 5
     786:	87 e8       	ldi	r24, 0x87	; 135
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
				TempControllerUpdate();
     794:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z20TempControllerUpdatev>
				lcd.print("SALVAT!");
     798:	69 e3       	ldi	r22, 0x39	; 57
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	87 e8       	ldi	r24, 0x87	; 135
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				delay(1500);
     7a4:	6c ed       	ldi	r22, 0xDC	; 220
     7a6:	75 e0       	ldi	r23, 0x05	; 5
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	a9 f0       	breq	.+42     	; 0x7de <_Z6menuKdv+0x12e>
     7b4:	84 30       	cpi	r24, 0x04	; 4
     7b6:	09 f0       	breq	.+2      	; 0x7ba <_Z6menuKdv+0x10a>
     7b8:	b6 cf       	rjmp	.-148    	; 0x726 <_Z6menuKdv+0x76>
				lcd.print(PID_tempControl.Kd);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Kd += 1;
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e8       	ldi	r20, 0x80	; 128
     7c6:	5f e3       	ldi	r21, 0x3F	; 63
     7c8:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <__data_end+0x8>
     7cc:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <__data_end+0x9>
     7d0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end+0xa>
     7d4:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0xb>
     7d8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <_Z6menuKdv+0x14a>
				lcd.print(PID_tempControl.Kd);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Kd -= 1;
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e8       	ldi	r20, 0x80	; 128
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <__data_end+0x8>
     7ea:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <__data_end+0x9>
     7ee:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end+0xa>
     7f2:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0xb>
     7f6:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
     7fa:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <__data_end+0x8>
     7fe:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <__data_end+0x9>
     802:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end+0xa>
     806:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0xb>
				lcd.setCursor(5,0);
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	65 e0       	ldi	r22, 0x05	; 5
     80e:	87 e8       	ldi	r24, 0x87	; 135
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Kd);
     816:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <__data_end+0x8>
     81a:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <__data_end+0x9>
     81e:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <__data_end+0xa>
     822:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <__data_end+0xb>
     826:	22 e0       	ldi	r18, 0x02	; 2
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	87 e8       	ldi	r24, 0x87	; 135
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN5Print5printEdi>
			}break;
     832:	79 cf       	rjmp	.-270    	; 0x726 <_Z6menuKdv+0x76>

00000834 <_Z11menuTempSetv>:
	}
}

_LOC void menuTempSet() { // Function executes when you select the 4th item from main menu
	int activeButton = 0;
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     834:	47 e1       	ldi	r20, 0x17	; 23
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	6a e3       	ldi	r22, 0x3A	; 58
     83a:	72 e0       	ldi	r23, 0x02	; 2
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     84a:	87 e8       	ldi	r24, 0x87	; 135
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	87 e8       	ldi	r24, 0x87	; 135
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Tset = ");
     85e:	6d e4       	ldi	r22, 0x4D	; 77
     860:	71 e0       	ldi	r23, 0x01	; 1
     862:	87 e8       	ldi	r24, 0x87	; 135
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(7,0);
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	67 e0       	ldi	r22, 0x07	; 7
     86e:	87 e8       	ldi	r24, 0x87	; 135
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Tset);
     876:	4a e0       	ldi	r20, 0x0A	; 10
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <__data_end+0xc>
     87e:	87 e8       	ldi	r24, 0x87	; 135
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print5printEhi>
	lcd.setCursor(0,1);
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	87 e8       	ldi	r24, 0x87	; 135
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     892:	68 e2       	ldi	r22, 0x28	; 40
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	87 e8       	ldi	r24, 0x87	; 135
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     8a4:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     8a8:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     8ac:	82 35       	cpi	r24, 0x52	; 82
     8ae:	93 40       	sbci	r25, 0x03	; 3
     8b0:	6c f4       	brge	.+26     	; 0x8cc <_Z11menuTempSetv+0x98>
			delay(BT_PRESSED_DELAY);
     8b2:	6c e2       	ldi	r22, 0x2C	; 44
     8b4:	71 e0       	ldi	r23, 0x01	; 1
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     8c4:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     8c8:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     8cc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     8d0:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     8d4:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	71 f1       	breq	.+92     	; 0x938 <__stack+0x39>
     8dc:	28 f5       	brcc	.+74     	; 0x928 <__stack+0x29>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	f1 f6       	brne	.-68     	; 0x89e <_Z11menuTempSetv+0x6a>
			case E_BUTTON_1://Save Tset in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     8e2:	47 e1       	ldi	r20, 0x17	; 23
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	6a e3       	ldi	r22, 0x3A	; 58
     8e8:	72 e0       	ldi	r23, 0x02	; 2
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     8f2:	87 e8       	ldi	r24, 0x87	; 135
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	65 e0       	ldi	r22, 0x05	; 5
     8fe:	87 e8       	ldi	r24, 0x87	; 135
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
				TempControllerUpdate();
     90c:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z20TempControllerUpdatev>
				lcd.print("SALVAT!");
     910:	69 e3       	ldi	r22, 0x39	; 57
     912:	71 e0       	ldi	r23, 0x01	; 1
     914:	87 e8       	ldi	r24, 0x87	; 135
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				delay(1500);
     91c:	6c ed       	ldi	r22, 0xDC	; 220
     91e:	75 e0       	ldi	r23, 0x05	; 5
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	51 f0       	breq	.+20     	; 0x940 <__stack+0x41>
     92c:	84 30       	cpi	r24, 0x04	; 4
     92e:	09 f0       	breq	.+2      	; 0x932 <__stack+0x33>
     930:	b6 cf       	rjmp	.-148    	; 0x89e <_Z11menuTempSetv+0x6a>
				lcd.print(PID_tempControl.Tset);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				activeButton = 1;
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Tset += 1;
     938:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end+0xc>
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	03 c0       	rjmp	.+6      	; 0x946 <__stack+0x47>
				lcd.print(PID_tempControl.Tset);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Tset -= 1;
     940:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end+0xc>
     944:	81 50       	subi	r24, 0x01	; 1
     946:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end+0xc>
				lcd.setCursor(7,0);
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	67 e0       	ldi	r22, 0x07	; 7
     94e:	87 e8       	ldi	r24, 0x87	; 135
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Tset);
     956:	4a e0       	ldi	r20, 0x0A	; 10
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <__data_end+0xc>
     95e:	87 e8       	ldi	r24, 0x87	; 135
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print5printEhi>
			}break;
     966:	9b cf       	rjmp	.-202    	; 0x89e <_Z11menuTempSetv+0x6a>

00000968 <_Z8menuTincv>:
	}
}

_LOC void menuTinc() {
	int activeButton = 0;
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     968:	47 e1       	ldi	r20, 0x17	; 23
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	6a e3       	ldi	r22, 0x3A	; 58
     96e:	72 e0       	ldi	r23, 0x02	; 2
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     97e:	87 e8       	ldi	r24, 0x87	; 135
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	87 e8       	ldi	r24, 0x87	; 135
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Tinc = ");
     992:	65 e5       	ldi	r22, 0x55	; 85
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	87 e8       	ldi	r24, 0x87	; 135
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(7,0);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	67 e0       	ldi	r22, 0x07	; 7
     9a2:	87 e8       	ldi	r24, 0x87	; 135
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Tinc);
     9aa:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <__data_end+0x11>
     9ae:	70 91 4c 02 	lds	r23, 0x024C	; 0x80024c <__data_end+0x12>
     9b2:	4a e0       	ldi	r20, 0x0A	; 10
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	87 e8       	ldi	r24, 0x87	; 135
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
	lcd.setCursor(0,1);
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	87 e8       	ldi	r24, 0x87	; 135
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     9ca:	68 e2       	ldi	r22, 0x28	; 40
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	87 e8       	ldi	r24, 0x87	; 135
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     9dc:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     9e0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     9e4:	82 35       	cpi	r24, 0x52	; 82
     9e6:	93 40       	sbci	r25, 0x03	; 3
     9e8:	6c f4       	brge	.+26     	; 0xa04 <_Z8menuTincv+0x9c>
			delay(BT_PRESSED_DELAY);
     9ea:	6c e2       	ldi	r22, 0x2C	; 44
     9ec:	71 e0       	ldi	r23, 0x01	; 1
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     9fc:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     a00:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     a04:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     a08:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     a0c:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	61 f1       	breq	.+88     	; 0xa6c <_Z8menuTincv+0x104>
     a14:	18 f5       	brcc	.+70     	; 0xa5c <_Z8menuTincv+0xf4>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	f1 f6       	brne	.-68     	; 0x9d6 <_Z8menuTincv+0x6e>
			case E_BUTTON_1://Save Tinc in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     a1a:	47 e1       	ldi	r20, 0x17	; 23
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	6a e3       	ldi	r22, 0x3A	; 58
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				
				lcd.clear();
     a2a:	87 e8       	ldi	r24, 0x87	; 135
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	65 e0       	ldi	r22, 0x05	; 5
     a36:	87 e8       	ldi	r24, 0x87	; 135
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("SALVAT!");
     a3e:	69 e3       	ldi	r22, 0x39	; 57
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	87 e8       	ldi	r24, 0x87	; 135
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				
			
				delay(1500);
     a50:	6c ed       	ldi	r22, 0xDC	; 220
     a52:	75 e0       	ldi	r23, 0x05	; 5
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     a5c:	83 30       	cpi	r24, 0x03	; 3
     a5e:	61 f0       	breq	.+24     	; 0xa78 <_Z8menuTincv+0x110>
     a60:	84 30       	cpi	r24, 0x04	; 4
     a62:	09 f0       	breq	.+2      	; 0xa66 <_Z8menuTincv+0xfe>
     a64:	b8 cf       	rjmp	.-144    	; 0x9d6 <_Z8menuTincv+0x6e>
				lcd.print(PID_tempControl.Tinc);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				activeButton = 1;
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Tinc += 1;
     a6c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <__data_end+0x11>
     a70:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <__data_end+0x12>
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <_Z8menuTincv+0x11a>
				lcd.print(PID_tempControl.Tinc);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Tinc -= 1;
     a78:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <__data_end+0x11>
     a7c:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <__data_end+0x12>
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <__data_end+0x12>
     a86:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <__data_end+0x11>
				lcd.setCursor(7,0);
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	67 e0       	ldi	r22, 0x07	; 7
     a8e:	87 e8       	ldi	r24, 0x87	; 135
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Tinc);
     a96:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <__data_end+0x11>
     a9a:	70 91 4c 02 	lds	r23, 0x024C	; 0x80024c <__data_end+0x12>
     a9e:	4a e0       	ldi	r20, 0x0A	; 10
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	87 e8       	ldi	r24, 0x87	; 135
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
			}break;
     aaa:	95 cf       	rjmp	.-214    	; 0x9d6 <_Z8menuTincv+0x6e>

00000aac <_Z8menuTmemv>:
	}
}

_LOC void menuTmem() {
	int activeButton = 0;
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     aac:	47 e1       	ldi	r20, 0x17	; 23
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	6a e3       	ldi	r22, 0x3A	; 58
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     ac2:	87 e8       	ldi	r24, 0x87	; 135
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	87 e8       	ldi	r24, 0x87	; 135
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Tmem = ");
     ad6:	6d e5       	ldi	r22, 0x5D	; 93
     ad8:	71 e0       	ldi	r23, 0x01	; 1
     ada:	87 e8       	ldi	r24, 0x87	; 135
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(7,0);
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	67 e0       	ldi	r22, 0x07	; 7
     ae6:	87 e8       	ldi	r24, 0x87	; 135
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Tmem);
     aee:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <__data_end+0x13>
     af2:	70 91 4e 02 	lds	r23, 0x024E	; 0x80024e <__data_end+0x14>
     af6:	4a e0       	ldi	r20, 0x0A	; 10
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	87 e8       	ldi	r24, 0x87	; 135
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
	lcd.setCursor(0,1);
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	87 e8       	ldi	r24, 0x87	; 135
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     b0e:	68 e2       	ldi	r22, 0x28	; 40
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	87 e8       	ldi	r24, 0x87	; 135
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     b20:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     b24:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     b28:	82 35       	cpi	r24, 0x52	; 82
     b2a:	93 40       	sbci	r25, 0x03	; 3
     b2c:	6c f4       	brge	.+26     	; 0xb48 <_Z8menuTmemv+0x9c>
			delay(BT_PRESSED_DELAY);
     b2e:	6c e2       	ldi	r22, 0x2C	; 44
     b30:	71 e0       	ldi	r23, 0x01	; 1
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     b40:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     b44:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     b48:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     b4c:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     b50:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	61 f1       	breq	.+88     	; 0xbb0 <_Z8menuTmemv+0x104>
     b58:	18 f5       	brcc	.+70     	; 0xba0 <_Z8menuTmemv+0xf4>
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	f1 f6       	brne	.-68     	; 0xb1a <_Z8menuTmemv+0x6e>
			case E_BUTTON_1://Save Tmem in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     b5e:	47 e1       	ldi	r20, 0x17	; 23
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	6a e3       	ldi	r22, 0x3A	; 58
     b64:	72 e0       	ldi	r23, 0x02	; 2
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     b6e:	87 e8       	ldi	r24, 0x87	; 135
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	65 e0       	ldi	r22, 0x05	; 5
     b7a:	87 e8       	ldi	r24, 0x87	; 135
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				lcd.print("SALVAT!");
     b88:	69 e3       	ldi	r22, 0x39	; 57
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	87 e8       	ldi	r24, 0x87	; 135
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				delay(1500);
     b94:	6c ed       	ldi	r22, 0xDC	; 220
     b96:	75 e0       	ldi	r23, 0x05	; 5
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	61 f0       	breq	.+24     	; 0xbbc <_Z8menuTmemv+0x110>
     ba4:	84 30       	cpi	r24, 0x04	; 4
     ba6:	09 f0       	breq	.+2      	; 0xbaa <_Z8menuTmemv+0xfe>
     ba8:	b8 cf       	rjmp	.-144    	; 0xb1a <_Z8menuTmemv+0x6e>
				lcd.print(PID_tempControl.Tmem);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				activeButton = 1;
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Tmem += 1;
     bb0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <__data_end+0x13>
     bb4:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <__data_end+0x14>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <_Z8menuTmemv+0x11a>
				lcd.print(PID_tempControl.Tmem);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Tmem -= 1;
     bbc:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <__data_end+0x13>
     bc0:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <__data_end+0x14>
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <__data_end+0x14>
     bca:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <__data_end+0x13>
				lcd.setCursor(7,0);
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	67 e0       	ldi	r22, 0x07	; 7
     bd2:	87 e8       	ldi	r24, 0x87	; 135
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Tmem);
     bda:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <__data_end+0x13>
     bde:	70 91 4e 02 	lds	r23, 0x024E	; 0x80024e <__data_end+0x14>
     be2:	4a e0       	ldi	r20, 0x0A	; 10
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	87 e8       	ldi	r24, 0x87	; 135
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
			}break;
     bee:	95 cf       	rjmp	.-214    	; 0xb1a <_Z8menuTmemv+0x6e>

00000bf0 <_Z8menuTracv>:
	}
}

_LOC void menuTrac() {
	int activeButton = 0;
	eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
     bf0:	47 e1       	ldi	r20, 0x17	; 23
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	6a e3       	ldi	r22, 0x3A	; 58
     bf6:	72 e0       	ldi	r23, 0x02	; 2
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
	EEPROM.write(EEPROM_ERROR_FLAG, 0);		//Write error to EEPROM_ERROR_FLAG address in EEPROM
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>

	lcd.clear();
     c06:	87 e8       	ldi	r24, 0x87	; 135
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	87 e8       	ldi	r24, 0x87	; 135
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Trac = ");
     c1a:	65 e6       	ldi	r22, 0x65	; 101
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	87 e8       	ldi	r24, 0x87	; 135
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(7,0);
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	67 e0       	ldi	r22, 0x07	; 7
     c2a:	87 e8       	ldi	r24, 0x87	; 135
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Trac);
     c32:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <__data_end+0x15>
     c36:	70 91 50 02 	lds	r23, 0x0250	; 0x800250 <__data_end+0x16>
     c3a:	4a e0       	ldi	r20, 0x0A	; 10
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	87 e8       	ldi	r24, 0x87	; 135
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
	lcd.setCursor(0,1);
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	87 e8       	ldi	r24, 0x87	; 135
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("BACK  -  +  SAVE");
     c52:	68 e2       	ldi	r22, 0x28	; 40
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	87 e8       	ldi	r24, 0x87	; 135
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     c64:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     c68:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     c6c:	82 35       	cpi	r24, 0x52	; 82
     c6e:	93 40       	sbci	r25, 0x03	; 3
     c70:	6c f4       	brge	.+26     	; 0xc8c <_Z8menuTracv+0x9c>
			delay(BT_PRESSED_DELAY);
     c72:	6c e2       	ldi	r22, 0x2C	; 44
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     c84:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     c88:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     c8c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     c90:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     c94:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	61 f1       	breq	.+88     	; 0xcf4 <_Z8menuTracv+0x104>
     c9c:	18 f5       	brcc	.+70     	; 0xce4 <_Z8menuTracv+0xf4>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	f1 f6       	brne	.-68     	; 0xc5e <_Z8menuTracv+0x6e>
			case E_BUTTON_1://Save Trac in EEPROM
			{
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     ca2:	47 e1       	ldi	r20, 0x17	; 23
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	6a e3       	ldi	r22, 0x3A	; 58
     ca8:	72 e0       	ldi	r23, 0x02	; 2
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     cb2:	87 e8       	ldi	r24, 0x87	; 135
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	65 e0       	ldi	r22, 0x05	; 5
     cbe:	87 e8       	ldi	r24, 0x87	; 135
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				lcd.print("SALVAT!");
     ccc:	69 e3       	ldi	r22, 0x39	; 57
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	87 e8       	ldi	r24, 0x87	; 135
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				delay(1500);
     cd8:	6c ed       	ldi	r22, 0xDC	; 220
     cda:	75 e0       	ldi	r23, 0x05	; 5
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>
		if (readKey < D_MAX_BUTTON_VALUE) {
			delay(BT_PRESSED_DELAY);
			readKey = analogRead(0);
		}
		button = getButton(readKey);
		switch (button) {
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	61 f0       	breq	.+24     	; 0xd00 <_Z8menuTracv+0x110>
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	09 f0       	breq	.+2      	; 0xcee <_Z8menuTracv+0xfe>
     cec:	b8 cf       	rjmp	.-144    	; 0xc5e <_Z8menuTracv+0x6e>
				lcd.print(PID_tempControl.Trac);
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "back" button is pressed
			{
				EEPROM.write(EEPROM_ERROR_FLAG, 1);		//No error
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
				activeButton = 1;
			}break;
			
			case E_BUTTON_2:
			{
				PID_tempControl.Trac += 1;
     cf4:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <__data_end+0x15>
     cf8:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <__data_end+0x16>
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <_Z8menuTracv+0x11a>
				lcd.print(PID_tempControl.Trac);
			}break;
			
			case E_BUTTON_3:
			{
				PID_tempControl.Trac -= 1;
     d00:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <__data_end+0x15>
     d04:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <__data_end+0x16>
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <__data_end+0x16>
     d0e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <__data_end+0x15>
				lcd.setCursor(7,0);
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	67 e0       	ldi	r22, 0x07	; 7
     d16:	87 e8       	ldi	r24, 0x87	; 135
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(PID_tempControl.Trac);
     d1e:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <__data_end+0x15>
     d22:	70 91 50 02 	lds	r23, 0x0250	; 0x800250 <__data_end+0x16>
     d26:	4a e0       	ldi	r20, 0x0A	; 10
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	87 e8       	ldi	r24, 0x87	; 135
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
			}break;
     d32:	95 cf       	rjmp	.-214    	; 0xc5e <_Z8menuTracv+0x6e>

00000d34 <_Z12factoryResetv>:

_LOC void factoryReset()
{
	int activeButton = 0;

	lcd.clear();
     d34:	87 e8       	ldi	r24, 0x87	; 135
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0, 0);
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	87 e8       	ldi	r24, 0x87	; 135
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Resetati valori?");
     d48:	6d e6       	ldi	r22, 0x6D	; 109
     d4a:	71 e0       	ldi	r23, 0x01	; 1
     d4c:	87 e8       	ldi	r24, 0x87	; 135
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	87 e8       	ldi	r24, 0x87	; 135
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("NU            DA");
     d60:	6e e7       	ldi	r22, 0x7E	; 126
     d62:	71 e0       	ldi	r23, 0x01	; 1
     d64:	87 e8       	ldi	r24, 0x87	; 135
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>

	while (activeButton == 0) {
		T_E_BUTTON button;
		readKey = analogRead(0);
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     d72:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     d76:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     d7a:	82 35       	cpi	r24, 0x52	; 82
     d7c:	93 40       	sbci	r25, 0x03	; 3
     d7e:	6c f4       	brge	.+26     	; 0xd9a <_Z12factoryResetv+0x66>
			delay(BT_PRESSED_DELAY);
     d80:	6c e2       	ldi	r22, 0x2C	; 44
     d82:	71 e0       	ldi	r23, 0x01	; 1
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     d92:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     d96:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     d9a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     d9e:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     da2:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		switch (button) {
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	79 f0       	breq	.+30     	; 0xdc8 <_Z12factoryResetv+0x94>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	f9 f6       	brne	.-66     	; 0xd6c <_Z12factoryResetv+0x38>
				activeButton = 1;
			}break;
			
			case E_BUTTON_4:  // This case will execute if the "NU" button is pressed
			{
				lcd.clear();
     dae:	87 e8       	ldi	r24, 0x87	; 135
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	65 e0       	ldi	r22, 0x05	; 5
     dba:	87 e8       	ldi	r24, 0x87	; 135
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("ANULAT!");
     dc2:	68 e9       	ldi	r22, 0x98	; 152
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	48 c0       	rjmp	.+144    	; 0xe58 <_Z12factoryResetv+0x124>
		}
		button = getButton(readKey);
		switch (button) {
			case E_BUTTON_1://Save All parameters in EEPROM
			{
				PID_tempControl.Kd = 20;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 ea       	ldi	r26, 0xA0	; 160
     dce:	b1 e4       	ldi	r27, 0x41	; 65
     dd0:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end+0x8>
     dd4:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x9>
     dd8:	a0 93 44 02 	sts	0x0244, r26	; 0x800244 <__data_end+0xa>
     ddc:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <__data_end+0xb>
				PID_tempControl.Ki = 20;
     de0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end+0x4>
     de4:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x5>
     de8:	a0 93 40 02 	sts	0x0240, r26	; 0x800240 <__data_end+0x6>
     dec:	b0 93 41 02 	sts	0x0241, r27	; 0x800241 <__data_end+0x7>
				PID_tempControl.Kp = 20;
     df0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__data_end>
     df4:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <__data_end+0x1>
     df8:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <__data_end+0x2>
     dfc:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <__data_end+0x3>
				PID_tempControl.Tcurenta = 20;
     e00:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <__data_end+0xd>
     e04:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__data_end+0xe>
     e08:	a0 93 49 02 	sts	0x0249, r26	; 0x800249 <__data_end+0xf>
     e0c:	b0 93 4a 02 	sts	0x024A, r27	; 0x80024a <__data_end+0x10>
				PID_tempControl.Tinc = 20;
     e10:	84 e1       	ldi	r24, 0x14	; 20
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <__data_end+0x12>
     e18:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <__data_end+0x11>
				PID_tempControl.Tmem = 20;
     e1c:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <__data_end+0x14>
     e20:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <__data_end+0x13>
				PID_tempControl.Trac = 20;
     e24:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <__data_end+0x16>
     e28:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <__data_end+0x15>
				PID_tempControl.Tset = 20;
     e2c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end+0xc>
				
				eepromWrite(0,&PID_tempControl,sizeof(PID_tempControl));
     e30:	47 e1       	ldi	r20, 0x17	; 23
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	6a e3       	ldi	r22, 0x3A	; 58
     e36:	72 e0       	ldi	r23, 0x02	; 2
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11eepromWritetP11TempControlt>
				lcd.clear();
     e40:	87 e8       	ldi	r24, 0x87	; 135
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
				lcd.setCursor(5,0);
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	65 e0       	ldi	r22, 0x05	; 5
     e4c:	87 e8       	ldi	r24, 0x87	; 135
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("RESETAT!");
     e54:	6f e8       	ldi	r22, 0x8F	; 143
     e56:	71 e0       	ldi	r23, 0x01	; 1
			
			case E_BUTTON_4:  // This case will execute if the "NU" button is pressed
			{
				lcd.clear();
				lcd.setCursor(5,0);
				lcd.print("ANULAT!");
     e58:	87 e8       	ldi	r24, 0x87	; 135
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
				delay(1500);
     e60:	6c ed       	ldi	r22, 0xDC	; 220
     e62:	75 e0       	ldi	r23, 0x05	; 5
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <delay>

00000e6c <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON>:
			lcd.write(byte(0));
		}
	}
}

_EXT void operateMainMenu(T_E_SCREEN* screen, T_E_BUTTON* activeButton_menuStart) {
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	8c 01       	movw	r16, r24
     e76:	eb 01       	movw	r28, r22
	int activeButton = 0;
	while (activeButton == 0) {
		
	//	Serial.println("Loop_operateMainMenu");
		T_E_BUTTON button;
		readKey = analogRead(A0);
     e78:	8e e0       	ldi	r24, 0x0E	; 14
     e7a:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     e7e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     e82:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		if (readKey < D_MAX_BUTTON_VALUE) {
     e86:	82 35       	cpi	r24, 0x52	; 82
     e88:	93 40       	sbci	r25, 0x03	; 3
     e8a:	6c f4       	brge	.+26     	; 0xea6 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x3a>
			delay(BT_PRESSED_DELAY);
     e8c:	6c e2       	ldi	r22, 0x2C	; 44
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			readKey = analogRead(0);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
     e9e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
     ea2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
		}
		button = getButton(readKey);
     ea6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
     eaa:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
     eae:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z9getButtoni>
		
		switch (button)
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	a9 f1       	breq	.+106    	; 0xf20 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0xb4>
     eb6:	18 f4       	brcc	.+6      	; 0xebe <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x52>
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	71 f0       	breq	.+28     	; 0xed8 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x6c>
     ebc:	dd cf       	rjmp	.-70     	; 0xe78 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0xc>
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	09 f4       	brne	.+2      	; 0xec4 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x58>
     ec2:	7f c0       	rjmp	.+254    	; 0xfc2 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x156>
     ec4:	84 30       	cpi	r24, 0x04	; 4
     ec6:	c1 f6       	brne	.-80     	; 0xe78 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0xc>
				
			//	Serial.println("Down");
			}break;
			case 4:
			{
				*screen = E_SCREEN_PRINCIPAL;
     ec8:	f8 01       	movw	r30, r16
     eca:	10 82       	st	Z, r1
				*activeButton_menuStart = E_BUTTON_NONE;
     ecc:	18 82       	st	Y, r1
			//	Serial.println("PRINCIPAL SCREEN BUTTON_NONE");
				activeButton = 1;
			}break;
		}
	}
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret
			{
			//	Serial.println("OK");
				
				button = E_BUTTON_NONE;
				
				switch (cursorPosition) { // The case that is selected here is dependent on which menu page you are on and where the cursor is.
     ed8:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <cursorPosition>
     edc:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <cursorPosition+0x1>
     ee0:	e8 30       	cpi	r30, 0x08	; 8
     ee2:	f1 05       	cpc	r31, r1
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x7c>
     ee6:	b5 c0       	rjmp	.+362    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
     ee8:	ec 5c       	subi	r30, 0xCC	; 204
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__tablejump2__>
					
					case 0:
					{
						menuKp();
     ef0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z6menuKpv>
					}break;
     ef4:	ae c0       	rjmp	.+348    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 1:
					{
						menuKi();
     ef6:	0e 94 96 02 	call	0x52c	; 0x52c <_Z6menuKiv>
					}break;
     efa:	ab c0       	rjmp	.+342    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 2:
					{
						menuKd();
     efc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z6menuKdv>
					}break;
     f00:	a8 c0       	rjmp	.+336    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 3:
					{
						menuTempSet();
     f02:	0e 94 1a 04 	call	0x834	; 0x834 <_Z11menuTempSetv>
					}break;
     f06:	a5 c0       	rjmp	.+330    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 4:
					{
						menuTinc();
     f08:	0e 94 b4 04 	call	0x968	; 0x968 <_Z8menuTincv>
					}break;
     f0c:	a2 c0       	rjmp	.+324    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 5:
					{
						menuTmem();
     f0e:	0e 94 56 05 	call	0xaac	; 0xaac <_Z8menuTmemv>
					}break;
     f12:	9f c0       	rjmp	.+318    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 6:
					{
						menuTrac();
     f14:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_Z8menuTracv>
					}break;
     f18:	9c c0       	rjmp	.+312    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>
					
					case 7:
					{
						factoryReset();
     f1a:	0e 94 9a 06 	call	0xd34	; 0xd34 <_Z12factoryResetv>
     f1e:	99 c0       	rjmp	.+306    	; 0x1052 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1e6>

			}break;
			case E_BUTTON_2:
			{
				button = E_BUTTON_NONE;
				if (menuPage == 0) {
     f20:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <menuPage>
     f24:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <menuPage+0x1>
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	91 f4       	brne	.+36     	; 0xf52 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0xe6>
					cursorPosition = cursorPosition - 1;
					cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));
     f2e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     f32:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <cursorPosition+0x1>
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	88 30       	cpi	r24, 0x08	; 8
     f3a:	91 05       	cpc	r25, r1
     f3c:	14 f0       	brlt	.+4      	; 0xf42 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0xd6>
     f3e:	87 e0       	ldi	r24, 0x07	; 7
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	97 ff       	sbrs	r25, 7
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0xde>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <cursorPosition+0x1>
     f4e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <cursorPosition>
     f52:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     f56:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <cursorPosition+0x1>
				}
				if (menuPage % 2 == 0 && cursorPosition % 2 == 0) {
     f5a:	20 fd       	sbrc	r18, 0
     f5c:	15 c0       	rjmp	.+42     	; 0xf88 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x11c>
     f5e:	80 fd       	sbrc	r24, 0
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x11c>
					menuPage = menuPage - 1;
     f62:	21 50       	subi	r18, 0x01	; 1
     f64:	31 09       	sbc	r19, r1
					menuPage = constrain(menuPage, 0, maxMenuPages);
     f66:	37 fd       	sbrc	r19, 7
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x110>
     f6a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <maxMenuPages>
     f6e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <maxMenuPages+0x1>
     f72:	24 17       	cp	r18, r20
     f74:	35 07       	cpc	r19, r21
     f76:	24 f4       	brge	.+8      	; 0xf80 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x114>
     f78:	a9 01       	movw	r20, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x114>
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	50 93 54 02 	sts	0x0254, r21	; 0x800254 <menuPage+0x1>
     f84:	40 93 53 02 	sts	0x0253, r20	; 0x800253 <menuPage>
				}

				if (menuPage % 2 != 0 && cursorPosition % 2 != 0) {
     f88:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <menuPage>
     f8c:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <menuPage+0x1>
     f90:	20 ff       	sbrs	r18, 0
     f92:	15 c0       	rjmp	.+42     	; 0xfbe <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x152>
     f94:	80 ff       	sbrs	r24, 0
     f96:	13 c0       	rjmp	.+38     	; 0xfbe <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x152>
					menuPage = menuPage - 1;
     f98:	21 50       	subi	r18, 0x01	; 1
     f9a:	31 09       	sbc	r19, r1
					menuPage = constrain(menuPage, 0, maxMenuPages);
     f9c:	37 fd       	sbrc	r19, 7
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x146>
     fa0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <maxMenuPages>
     fa4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <maxMenuPages+0x1>
     fa8:	24 17       	cp	r18, r20
     faa:	35 07       	cpc	r19, r21
     fac:	24 f4       	brge	.+8      	; 0xfb6 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x14a>
     fae:	a9 01       	movw	r20, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x14a>
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	50 93 54 02 	sts	0x0254, r21	; 0x800254 <menuPage+0x1>
     fba:	40 93 53 02 	sts	0x0253, r20	; 0x800253 <menuPage>
				}

				cursorPosition = cursorPosition - 1;
				cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	3b c0       	rjmp	.+118    	; 0x1038 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1cc>
			}break;
			
			case 3:
			{
				button = E_BUTTON_NONE;
				if (menuPage % 2 == 0 && cursorPosition % 2 != 0) {
     fc2:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <menuPage>
     fc6:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <menuPage+0x1>
     fca:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <cursorPosition>
     fce:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <cursorPosition+0x1>
     fd2:	20 fd       	sbrc	r18, 0
     fd4:	15 c0       	rjmp	.+42     	; 0x1000 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x194>
     fd6:	80 ff       	sbrs	r24, 0
     fd8:	13 c0       	rjmp	.+38     	; 0x1000 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x194>
					menuPage = menuPage + 1;
     fda:	2f 5f       	subi	r18, 0xFF	; 255
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
					menuPage = constrain(menuPage, 0, maxMenuPages);
     fde:	37 fd       	sbrc	r19, 7
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x188>
     fe2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <maxMenuPages>
     fe6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <maxMenuPages+0x1>
     fea:	24 17       	cp	r18, r20
     fec:	35 07       	cpc	r19, r21
     fee:	24 f4       	brge	.+8      	; 0xff8 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x18c>
     ff0:	a9 01       	movw	r20, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x18c>
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	50 93 54 02 	sts	0x0254, r21	; 0x800254 <menuPage+0x1>
     ffc:	40 93 53 02 	sts	0x0253, r20	; 0x800253 <menuPage>
				}

				if (menuPage % 2 != 0 && cursorPosition % 2 == 0) {
    1000:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <menuPage>
    1004:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <menuPage+0x1>
    1008:	20 ff       	sbrs	r18, 0
    100a:	15 c0       	rjmp	.+42     	; 0x1036 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1ca>
    100c:	80 fd       	sbrc	r24, 0
    100e:	13 c0       	rjmp	.+38     	; 0x1036 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1ca>
					menuPage = menuPage + 1;
    1010:	2f 5f       	subi	r18, 0xFF	; 255
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
					menuPage = constrain(menuPage, 0, maxMenuPages);
    1014:	37 fd       	sbrc	r19, 7
    1016:	09 c0       	rjmp	.+18     	; 0x102a <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1be>
    1018:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <maxMenuPages>
    101c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <maxMenuPages+0x1>
    1020:	24 17       	cp	r18, r20
    1022:	35 07       	cpc	r19, r21
    1024:	24 f4       	brge	.+8      	; 0x102e <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1c2>
    1026:	a9 01       	movw	r20, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1c2>
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	50 93 54 02 	sts	0x0254, r21	; 0x800254 <menuPage+0x1>
    1032:	40 93 53 02 	sts	0x0253, r20	; 0x800253 <menuPage>
				}

				cursorPosition = cursorPosition + 1;
				cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	88 30       	cpi	r24, 0x08	; 8
    103a:	91 05       	cpc	r25, r1
    103c:	14 f0       	brlt	.+4      	; 0x1042 <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1d6>
    103e:	87 e0       	ldi	r24, 0x07	; 7
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	97 ff       	sbrs	r25, 7
    1044:	02 c0       	rjmp	.+4      	; 0x104a <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON+0x1de>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <cursorPosition+0x1>
    104e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <cursorPosition>
				mainMenuDraw();
    1052:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z12mainMenuDrawv>
			//	Serial.println("PRINCIPAL SCREEN BUTTON_NONE");
				activeButton = 1;
			}break;
		}
	}
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
				}

				cursorPosition = cursorPosition + 1;
				cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));
				mainMenuDraw();
				drawCursor();
    105e:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_Z10drawCursorv>

00001062 <_Z14readMenuButtonv>:


_EXT T_E_BUTTON readMenuButton()
{
	T_E_BUTTON button;
	readKey = analogRead(A0);
    1062:	8e e0       	ldi	r24, 0x0E	; 14
    1064:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
    1068:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
    106c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
	if (readKey < D_MAX_BUTTON_VALUE) {
    1070:	82 35       	cpi	r24, 0x52	; 82
    1072:	93 40       	sbci	r25, 0x03	; 3
    1074:	6c f4       	brge	.+26     	; 0x1090 <_Z14readMenuButtonv+0x2e>
		delay(BT_PRESSED_DELAY);
    1076:	6c e2       	ldi	r22, 0x2C	; 44
    1078:	71 e0       	ldi	r23, 0x01	; 1
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
		readKey = analogRead(0);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
    1088:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <readKey+0x1>
    108c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <readKey>
	}
	button = getButton(readKey);
    1090:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readKey>
    1094:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <readKey+0x1>
    1098:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_Z9getButtoni>

0000109c <_Z20draw_principalScreenP10T_E_BUTTONPh>:
	return button;
}


_EXT void draw_principalScreen(T_E_BUTTON *activeButton_menuStart, T_UBYTE *startFlag)
{
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	8c 01       	movw	r16, r24
    10a6:	eb 01       	movw	r28, r22

	//read EEPROM first time(one time, for principal screen)
	if (*startFlag == 1)
    10a8:	88 81       	ld	r24, Y
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	59 f4       	brne	.+22     	; 0x10c4 <_Z20draw_principalScreenP10T_E_BUTTONPh+0x28>
	{
		eepromRead(0,&PID_tempControl,sizeof(PID_tempControl));
    10ae:	47 e1       	ldi	r20, 0x17	; 23
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	6a e3       	ldi	r22, 0x3A	; 58
    10b4:	72 e0       	ldi	r23, 0x02	; 2
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 92 00 	call	0x124	; 0x124 <_Z10eepromReadtP11TempControlt>
		PID_Start();
    10be:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z9PID_Startv>
		*startFlag = 0;
    10c2:	18 82       	st	Y, r1
		//Serial.println("START PROGRAM; READ EEPROM 1 TIME");
	}

	*activeButton_menuStart = readMenuButton();
    10c4:	0e 94 31 08 	call	0x1062	; 0x1062 <_Z14readMenuButtonv>
    10c8:	f8 01       	movw	r30, r16
    10ca:	80 83       	st	Z, r24
	lcd.clear();
    10cc:	87 e8       	ldi	r24, 0x87	; 135
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(0,0);
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	87 e8       	ldi	r24, 0x87	; 135
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Ts:");
    10e0:	60 ea       	ldi	r22, 0xA0	; 160
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	87 e8       	ldi	r24, 0x87	; 135
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.setCursor(3,0);
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	63 e0       	ldi	r22, 0x03	; 3
    10f0:	87 e8       	ldi	r24, 0x87	; 135
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(PID_tempControl.Tset);
    10f8:	4a e0       	ldi	r20, 0x0A	; 10
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <__data_end+0xc>
    1100:	87 e8       	ldi	r24, 0x87	; 135
    1102:	92 e0       	ldi	r25, 0x02	; 2
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
	*activeButton_menuStart = readMenuButton();
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print("Ts:");
	lcd.setCursor(3,0);
	lcd.print(PID_tempControl.Tset);
    110c:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <_ZN5Print5printEhi>

00001110 <_Z24printCourrentTemperaturef>:
}

_EXT void printCourrentTemperature(float courentTemp)
{
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	6b 01       	movw	r12, r22
    111a:	7c 01       	movw	r14, r24
	lcd.setCursor(7,0); 
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	67 e0       	ldi	r22, 0x07	; 7
    1120:	87 e8       	ldi	r24, 0x87	; 135
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Tc:");
    1128:	64 ea       	ldi	r22, 0xA4	; 164
    112a:	71 e0       	ldi	r23, 0x01	; 1
    112c:	87 e8       	ldi	r24, 0x87	; 135
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
	lcd.print(courentTemp);	
    1134:	22 e0       	ldi	r18, 0x02	; 2
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	b7 01       	movw	r22, r14
    113a:	a6 01       	movw	r20, r12
    113c:	87 e8       	ldi	r24, 0x87	; 135
    113e:	92 e0       	ldi	r25, 0x02	; 2
}
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12

_EXT void printCourrentTemperature(float courentTemp)
{
	lcd.setCursor(7,0); 
	lcd.print("Tc:");
	lcd.print(courentTemp);	
    1148:	0c 94 23 13 	jmp	0x2646	; 0x2646 <_ZN5Print5printEdi>

0000114c <_Z11error_printv>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 b9 1b 	call	0x3772	; 0x3772 <eeprom_read_byte>
}

_EXT void error_print()
{
	if ((T_E_PS_ERROR)EEPROM.read(EEPROM_ERROR_FLAG) == E_PS_ERROR)
    1154:	81 11       	cpse	r24, r1
    1156:	25 c0       	rjmp	.+74     	; 0x11a2 <_Z11error_printv+0x56>
	{
		lcd.clear();
    1158:	87 e8       	ldi	r24, 0x87	; 135
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(0,0);
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	87 e8       	ldi	r24, 0x87	; 135
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("Salvare anter.");
    116c:	68 ea       	ldi	r22, 0xA8	; 168
    116e:	71 e0       	ldi	r23, 0x01	; 1
    1170:	87 e8       	ldi	r24, 0x87	; 135
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
		lcd.setCursor(0,1);
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	87 e8       	ldi	r24, 0x87	; 135
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("esuata!");
    1184:	67 eb       	ldi	r22, 0xB7	; 183
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	87 e8       	ldi	r24, 0x87	; 135
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
		delay(1000);
    1190:	68 ee       	ldi	r22, 0xE8	; 232
    1192:	73 e0       	ldi	r23, 0x03	; 3
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
		EEPROM.write(EEPROM_ERROR_FLAG, 1);		//delete error flag (set to Success)
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_ZN11EEPROMClass5writeEih.isra.1.constprop.3>
    11a2:	08 95       	ret

000011a4 <_Z19get_PID_tempControlv>:
}


_EXT TempControl get_PID_tempControl()
{
	return PID_tempControl;
    11a4:	27 e1       	ldi	r18, 0x17	; 23
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	dc 01       	movw	r26, r24
    11ac:	01 90       	ld	r0, Z+
    11ae:	0d 92       	st	X+, r0
    11b0:	2a 95       	dec	r18
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <_Z19get_PID_tempControlv+0x8>
}
    11b4:	08 95       	ret

000011b6 <_Z7get_lcdv>:


_EXT LiquidCrystal get_lcd()
{
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    11bc:	87 e8       	ldi	r24, 0x87	; 135
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	fc 01       	movw	r30, r24
    11c2:	22 81       	ldd	r18, Z+2	; 0x02
    11c4:	33 81       	ldd	r19, Z+3	; 0x03
    11c6:	3b 83       	std	Y+3, r19	; 0x03
    11c8:	2a 83       	std	Y+2, r18	; 0x02
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class LiquidCrystal : public Print {
    11ca:	27 e2       	ldi	r18, 0x27	; 39
    11cc:	32 e0       	ldi	r19, 0x02	; 2
    11ce:	39 83       	std	Y+1, r19	; 0x01
    11d0:	28 83       	st	Y, r18
    11d2:	24 81       	ldd	r18, Z+4	; 0x04
    11d4:	2c 83       	std	Y+4, r18	; 0x04
    11d6:	25 81       	ldd	r18, Z+5	; 0x05
    11d8:	2d 83       	std	Y+5, r18	; 0x05
    11da:	26 81       	ldd	r18, Z+6	; 0x06
    11dc:	2e 83       	std	Y+6, r18	; 0x06
    11de:	28 e0       	ldi	r18, 0x08	; 8
    11e0:	ee e8       	ldi	r30, 0x8E	; 142
    11e2:	f2 e0       	ldi	r31, 0x02	; 2
    11e4:	de 01       	movw	r26, r28
    11e6:	17 96       	adiw	r26, 0x07	; 7
    11e8:	01 90       	ld	r0, Z+
    11ea:	0d 92       	st	X+, r0
    11ec:	2a 95       	dec	r18
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <_Z7get_lcdv+0x32>
    11f0:	fc 01       	movw	r30, r24
    11f2:	27 85       	ldd	r18, Z+15	; 0x0f
    11f4:	2f 87       	std	Y+15, r18	; 0x0f
    11f6:	20 89       	ldd	r18, Z+16	; 0x10
    11f8:	28 8b       	std	Y+16, r18	; 0x10
    11fa:	21 89       	ldd	r18, Z+17	; 0x11
    11fc:	29 8b       	std	Y+17, r18	; 0x11
    11fe:	22 89       	ldd	r18, Z+18	; 0x12
    1200:	2a 8b       	std	Y+18, r18	; 0x12
    1202:	23 89       	ldd	r18, Z+19	; 0x13
    1204:	2b 8b       	std	Y+19, r18	; 0x13
    1206:	84 89       	ldd	r24, Z+20	; 0x14
    1208:	95 89       	ldd	r25, Z+21	; 0x15
    120a:	a6 89       	ldd	r26, Z+22	; 0x16
    120c:	b7 89       	ldd	r27, Z+23	; 0x17
    120e:	8c 8b       	std	Y+20, r24	; 0x14
    1210:	9d 8b       	std	Y+21, r25	; 0x15
    1212:	ae 8b       	std	Y+22, r26	; 0x16
    1214:	bf 8b       	std	Y+23, r27	; 0x17
	return lcd;
    1216:	ce 01       	movw	r24, r28
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <_GLOBAL__sub_I_lcd>:
    121e:	cf 92       	push	r12
    1220:	ef 92       	push	r14
    1222:	0f 93       	push	r16
#include "menu.h"
#include "../Sketch.h"


//set the LCD pins
extern LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	c8 2e       	mov	r12, r24
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	e9 2e       	mov	r14, r25
    122c:	04 e0       	ldi	r16, 0x04	; 4
    122e:	25 e0       	ldi	r18, 0x05	; 5
    1230:	4b e0       	ldi	r20, 0x0B	; 11
    1232:	6c e0       	ldi	r22, 0x0C	; 12
    1234:	87 e8       	ldi	r24, 0x87	; 135
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN13LiquidCrystalC1Ehhhhhh>

//Menu items - in a string vector
String menuItems[] = {"Kp", "Ki", "Kd", "Temp Setata", "T inc", "T Mem", "T Rac","Factory Reset"};
    123c:	6f eb       	ldi	r22, 0xBF	; 191
    123e:	71 e0       	ldi	r23, 0x01	; 1
    1240:	87 e5       	ldi	r24, 0x57	; 87
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    1248:	62 ec       	ldi	r22, 0xC2	; 194
    124a:	71 e0       	ldi	r23, 0x01	; 1
    124c:	8d e5       	ldi	r24, 0x5D	; 93
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    1254:	65 ec       	ldi	r22, 0xC5	; 197
    1256:	71 e0       	ldi	r23, 0x01	; 1
    1258:	83 e6       	ldi	r24, 0x63	; 99
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    1260:	68 ec       	ldi	r22, 0xC8	; 200
    1262:	71 e0       	ldi	r23, 0x01	; 1
    1264:	89 e6       	ldi	r24, 0x69	; 105
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    126c:	64 ed       	ldi	r22, 0xD4	; 212
    126e:	71 e0       	ldi	r23, 0x01	; 1
    1270:	8f e6       	ldi	r24, 0x6F	; 111
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    1278:	6a ed       	ldi	r22, 0xDA	; 218
    127a:	71 e0       	ldi	r23, 0x01	; 1
    127c:	85 e7       	ldi	r24, 0x75	; 117
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    1284:	60 ee       	ldi	r22, 0xE0	; 224
    1286:	71 e0       	ldi	r23, 0x01	; 1
    1288:	8b e7       	ldi	r24, 0x7B	; 123
    128a:	92 e0       	ldi	r25, 0x02	; 2
    128c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>
    1290:	66 ee       	ldi	r22, 0xE6	; 230
    1292:	71 e0       	ldi	r23, 0x01	; 1
    1294:	81 e8       	ldi	r24, 0x81	; 129
    1296:	92 e0       	ldi	r25, 0x02	; 2


_EXT LiquidCrystal get_lcd()
{
	return lcd;
    1298:	0f 91       	pop	r16
    129a:	ef 90       	pop	r14
    129c:	cf 90       	pop	r12

//set the LCD pins
extern LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

//Menu items - in a string vector
String menuItems[] = {"Kp", "Ki", "Kd", "Temp Setata", "T inc", "T Mem", "T Rac","Factory Reset"};
    129e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <_ZN6StringC1EPKc>

000012a2 <_GLOBAL__sub_D_lcd>:


_EXT LiquidCrystal get_lcd()
{
	return lcd;
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	c7 e8       	ldi	r28, 0x87	; 135
    12a8:	d2 e0       	ldi	r29, 0x02	; 2

//set the LCD pins
extern LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

//Menu items - in a string vector
String menuItems[] = {"Kp", "Ki", "Kd", "Temp Setata", "T inc", "T Mem", "T Rac","Factory Reset"};
    12aa:	26 97       	sbiw	r28, 0x06	; 6
    12ac:	ce 01       	movw	r24, r28
    12ae:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN6StringD1Ev>
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	c7 35       	cpi	r28, 0x57	; 87
    12b6:	d8 07       	cpc	r29, r24
    12b8:	c1 f7       	brne	.-16     	; 0x12aa <_GLOBAL__sub_D_lcd+0x8>


_EXT LiquidCrystal get_lcd()
{
	return lcd;
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <_Z17read_temp_celsiusv>:
#include <Arduino.h>

//float static temperaturaC2 = 0;

_EXT float read_temp_celsius()
{
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	c4 ef       	ldi	r28, 0xF4	; 244
    12ce:	d1 e0       	ldi	r29, 0x01	; 1
	int val;
	float suma=0;
    12d0:	c1 2c       	mov	r12, r1
    12d2:	d1 2c       	mov	r13, r1
    12d4:	76 01       	movw	r14, r12
	int i;
	
	for ( i = 1 ; i <= 500; i++)
	{
		
	val = analogRead(LM35_PIN);
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 22 14 	call	0x2844	; 0x2844 <analogRead>
	float mv = ( val/1024.0)*5000;
	float temperatureC = mv/10;
	suma = suma + temperatureC;
    12dc:	bc 01       	movw	r22, r24
    12de:	99 0f       	add	r25, r25
    12e0:	88 0b       	sbc	r24, r24
    12e2:	99 0b       	sbc	r25, r25
    12e4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatsisf>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e8       	ldi	r20, 0x80	; 128
    12ee:	5a e3       	ldi	r21, 0x3A	; 58
    12f0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e4       	ldi	r19, 0x40	; 64
    12f8:	4c e9       	ldi	r20, 0x9C	; 156
    12fa:	55 e4       	ldi	r21, 0x45	; 69
    12fc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e2       	ldi	r20, 0x20	; 32
    1306:	51 e4       	ldi	r21, 0x41	; 65
    1308:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	c7 01       	movw	r24, r14
    1312:	b6 01       	movw	r22, r12
    1314:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
    131c:	21 97       	sbiw	r28, 0x01	; 1
	float static temperaturaC2 = 0;
	float vectortemperatura[510];
	
	int i;
	
	for ( i = 1 ; i <= 500; i++)
    131e:	d9 f6       	brne	.-74     	; 0x12d6 <_Z17read_temp_celsiusv+0x16>
	
	
	//Serial.print("TEMPRATURE = ");
	//Serial.print(temperaturaC2);
	
	return temperaturaC2;
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a ef       	ldi	r20, 0xFA	; 250
    1326:	53 e4       	ldi	r21, 0x43	; 67
    1328:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	08 95       	ret

0000133a <_Z9PID_Startv>:
	StartFlag = 1;
	
}

void PID_Start(void)
{
    133a:	8f 92       	push	r8
    133c:	9f 92       	push	r9
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	c5 54       	subi	r28, 0x45	; 69
    1358:	d1 09       	sbc	r29, r1
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
	// Ramp up to minimum temperature
	setpoint = read_temp_celsius();
    1364:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z17read_temp_celsiusv>
    1368:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <setpoint>
    136c:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <setpoint+0x1>
    1370:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <setpoint+0x2>
    1374:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <setpoint+0x3>
	initial_Temperature_Celsius =  read_temp_celsius();
    1378:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z17read_temp_celsiusv>
    137c:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <initial_Temperature_Celsius>
    1380:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <initial_Temperature_Celsius+0x1>
    1384:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <initial_Temperature_Celsius+0x2>
    1388:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <initial_Temperature_Celsius+0x3>
	ovenPID.SetOutputLimits(0, 255);
    138c:	00 e0       	ldi	r16, 0x00	; 0
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	2f e7       	ldi	r18, 0x7F	; 127
    1392:	33 e4       	ldi	r19, 0x43	; 67
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	ba 01       	movw	r22, r20
    139a:	8f e9       	ldi	r24, 0x9F	; 159
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_ZN3PID15SetOutputLimitsEdd>
	ovenPID.SetSampleTime(100);
    13a2:	64 e6       	ldi	r22, 0x64	; 100
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	8f e9       	ldi	r24, 0x9F	; 159
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_ZN3PID13SetSampleTimeEi>
	
	// Turn the PID on
	ovenPID.SetMode(AUTOMATIC);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	8f e9       	ldi	r24, 0x9F	; 159
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN3PID7SetModeEi>
	ovenPID.SetTunings(get_PID_tempControl().Kp, get_PID_tempControl().Ki, get_PID_tempControl().Kd);
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    13c2:	c9 84       	ldd	r12, Y+9	; 0x09
    13c4:	da 84       	ldd	r13, Y+10	; 0x0a
    13c6:	eb 84       	ldd	r14, Y+11	; 0x0b
    13c8:	fc 84       	ldd	r15, Y+12	; 0x0c
    13ca:	ce 01       	movw	r24, r28
    13cc:	48 96       	adiw	r24, 0x18	; 24
    13ce:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    13d2:	8c 8c       	ldd	r8, Y+28	; 0x1c
    13d4:	9d 8c       	ldd	r9, Y+29	; 0x1d
    13d6:	ae 8c       	ldd	r10, Y+30	; 0x1e
    13d8:	bf 8c       	ldd	r11, Y+31	; 0x1f
    13da:	ce 01       	movw	r24, r28
    13dc:	8f 96       	adiw	r24, 0x2f	; 47
    13de:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    13e2:	4f a5       	ldd	r20, Y+47	; 0x2f
    13e4:	58 a9       	ldd	r21, Y+48	; 0x30
    13e6:	69 a9       	ldd	r22, Y+49	; 0x31
    13e8:	7a a9       	ldd	r23, Y+50	; 0x32
    13ea:	95 01       	movw	r18, r10
    13ec:	84 01       	movw	r16, r8
    13ee:	8f e9       	ldi	r24, 0x9F	; 159
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_ZN3PID10SetTuningsEddd>

	// Proceed to preheat stage
}
    13f6:	cb 5b       	subi	r28, 0xBB	; 187
    13f8:	df 4f       	sbci	r29, 0xFF	; 255
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	df 90       	pop	r13
    1412:	cf 90       	pop	r12
    1414:	bf 90       	pop	r11
    1416:	af 90       	pop	r10
    1418:	9f 90       	pop	r9
    141a:	8f 90       	pop	r8
    141c:	08 95       	ret

0000141e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    141e:	26 e0       	ldi	r18, 0x06	; 6
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	55 e2       	ldi	r21, 0x25	; 37
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 ef       	ldi	r24, 0xF0	; 240
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN14HardwareSerial5beginEmh>

void setup() {
	// Initializes serial communication
	Serial.begin(9600);
	
	init_display();
    1430:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z12init_displayv>
	LCD_creteChar();
    1434:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z13LCD_creteCharv>
	screen = E_SCREEN_PRINCIPAL;
    1438:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <screen>
	//analogReference(INTERNAL);

	error_print();
    143c:	0e 94 a6 08 	call	0x114c	; 0x114c <_Z11error_printv>
	
	PID_Start();
    1440:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z9PID_Startv>

	
	//Set Start flag for first EEPROM read
	StartFlag = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <StartFlag>
    144a:	08 95       	ret

0000144c <_Z20TempControllerUpdatev>:
	// Proceed to preheat stage
}

void TempControllerUpdate()
{
	input = Temperature_Celsius;
    144c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <Temperature_Celsius>
    1450:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <Temperature_Celsius+0x1>
    1454:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <Temperature_Celsius+0x2>
    1458:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <Temperature_Celsius+0x3>
    145c:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <input>
    1460:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <input+0x1>
    1464:	a0 93 df 02 	sts	0x02DF, r26	; 0x8002df <input+0x2>
    1468:	b0 93 e0 02 	sts	0x02E0, r27	; 0x8002e0 <input+0x3>
	ovenPID.Compute();
    146c:	8f e9       	ldi	r24, 0x9F	; 159
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <_ZN3PID7ComputeEv>
	analogWrite(PWM_PIN,output);
    1474:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <output>
    1478:	70 91 da 02 	lds	r23, 0x02DA	; 0x8002da <output+0x1>
    147c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <output+0x2>
    1480:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <output+0x3>
    1484:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__fixsfsi>
    1488:	89 e0       	ldi	r24, 0x09	; 9
    148a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <analogWrite>

0000148e <_Z19Stage_State_Machinev>:
}


void Stage_State_Machine()
{
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	68 97       	sbiw	r28, 0x18	; 24
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	switch (e_sm_State)
    14a4:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <e_sm_State>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <_Z19Stage_State_Machinev+0x20>
    14ac:	64 c0       	rjmp	.+200    	; 0x1576 <_Z19Stage_State_Machinev+0xe8>
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <_Z19Stage_State_Machinev+0x2a>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <_Z19Stage_State_Machinev+0x28>
    14b4:	a5 c0       	rjmp	.+330    	; 0x1600 <_Z19Stage_State_Machinev+0x172>
    14b6:	11 c1       	rjmp	.+546    	; 0x16da <_Z19Stage_State_Machinev+0x24c>
	{
		case E_STAGE_HEATING:
		{
			setpoint += (get_PID_tempControl().Tset - initial_Temperature_Celsius)/60.0;
    14b8:	ce 01       	movw	r24, r28
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    14c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatsisf>
    14cc:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <initial_Temperature_Celsius>
    14d0:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <initial_Temperature_Celsius+0x1>
    14d4:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <initial_Temperature_Celsius+0x2>
    14d8:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <initial_Temperature_Celsius+0x3>
    14dc:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e7       	ldi	r20, 0x70	; 112
    14e6:	52 e4       	ldi	r21, 0x42	; 66
    14e8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    14ec:	9b 01       	movw	r18, r22
    14ee:	ac 01       	movw	r20, r24
    14f0:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <setpoint>
    14f4:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <setpoint+0x1>
    14f8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <setpoint+0x2>
    14fc:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <setpoint+0x3>
    1500:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
    1504:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <setpoint>
    1508:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <setpoint+0x1>
    150c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <setpoint+0x2>
    1510:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <setpoint+0x3>
			get_lcd().setCursor(0,1);
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			get_lcd().print("Incalzire ");
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    1530:	64 ef       	ldi	r22, 0xF4	; 244
    1532:	71 e0       	ldi	r23, 0x01	; 1
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
			get_lcd().setCursor(11,1);
    153c:	ce 01       	movw	r24, r28
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	6b e0       	ldi	r22, 0x0B	; 11
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			get_lcd().print(stage_time);
    1550:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <stage_time>
    1554:	ce 01       	movw	r24, r28
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    155c:	4a e0       	ldi	r20, 0x0A	; 10
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	61 2f       	mov	r22, r17
    1562:	ce 01       	movw	r24, r28
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print5printEhi>
			
			
			//change state after 1 minute
			if(stage_time == 0)
    156a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <stage_time>
    156e:	81 11       	cpse	r24, r1
    1570:	a9 c0       	rjmp	.+338    	; 0x16c4 <_Z19Stage_State_Machinev+0x236>
			{
				e_sm_State = E_STAGE_MANTAIN;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	42 c0       	rjmp	.+132    	; 0x15fa <_Z19Stage_State_Machinev+0x16c>
			stage_time--;			//increment the time
		}break;
		
		case E_STAGE_MANTAIN:
		{
			setpoint = get_PID_tempControl().Tset;
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    157e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatunsisf>
    158a:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <setpoint>
    158e:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <setpoint+0x1>
    1592:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <setpoint+0x2>
    1596:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <setpoint+0x3>
			get_lcd().setCursor(0,1);
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			get_lcd().print("Mentinere");
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    15b6:	6f ef       	ldi	r22, 0xFF	; 255
    15b8:	71 e0       	ldi	r23, 0x01	; 1
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
			get_lcd().setCursor(11,1);
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	6b e0       	ldi	r22, 0x0B	; 11
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			get_lcd().print(stage_time);
    15d6:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <stage_time>
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    15e2:	4a e0       	ldi	r20, 0x0A	; 10
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	61 2f       	mov	r22, r17
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print5printEhi>
			
			//change state after 1 minute
			if(stage_time == 0)
    15f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <stage_time>
    15f4:	81 11       	cpse	r24, r1
    15f6:	66 c0       	rjmp	.+204    	; 0x16c4 <_Z19Stage_State_Machinev+0x236>
			{
				e_sm_State = E_STAGE_COOLING;
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <e_sm_State>
    15fe:	5f c0       	rjmp	.+190    	; 0x16be <_Z19Stage_State_Machinev+0x230>
			stage_time--;			//increment the time
		}break;
		
		case E_STAGE_COOLING:
		{
			setpoint -= (get_PID_tempControl().Tset - initial_Temperature_Celsius)/60.0;
    1600:	ce 01       	movw	r24, r28
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    1608:	6d 85       	ldd	r22, Y+13	; 0x0d
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatsisf>
    1614:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <initial_Temperature_Celsius>
    1618:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <initial_Temperature_Celsius+0x1>
    161c:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <initial_Temperature_Celsius+0x2>
    1620:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <initial_Temperature_Celsius+0x3>
    1624:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e7       	ldi	r20, 0x70	; 112
    162e:	52 e4       	ldi	r21, 0x42	; 66
    1630:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    1634:	9b 01       	movw	r18, r22
    1636:	ac 01       	movw	r20, r24
    1638:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <setpoint>
    163c:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <setpoint+0x1>
    1640:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <setpoint+0x2>
    1644:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <setpoint+0x3>
    1648:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    164c:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <setpoint>
    1650:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <setpoint+0x1>
    1654:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <setpoint+0x2>
    1658:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <setpoint+0x3>

			get_lcd().setCursor(0,1);
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			get_lcd().print("Racire   ");
    1670:	ce 01       	movw	r24, r28
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    1678:	69 e0       	ldi	r22, 0x09	; 9
    167a:	72 e0       	ldi	r23, 0x02	; 2
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN5Print5printEPKc>
			get_lcd().setCursor(11,1);
    1684:	ce 01       	movw	r24, r28
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	6b e0       	ldi	r22, 0x0B	; 11
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 71 10 	call	0x20e2	; 0x20e2 <_ZN13LiquidCrystal9setCursorEhh>
			get_lcd().print(stage_time);
    1698:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <stage_time>
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_Z7get_lcdv>
    16a4:	4a e0       	ldi	r20, 0x0A	; 10
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	61 2f       	mov	r22, r17
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN5Print5printEhi>

			
			
			if(stage_time == 0)
    16b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <stage_time>
    16b6:	81 11       	cpse	r24, r1
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <_Z19Stage_State_Machinev+0x236>
			{
				e_sm_State = E_STAGE_HEATING;
    16ba:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <e_sm_State>
				stage_time = 60;
    16be:	8c e3       	ldi	r24, 0x3C	; 60
    16c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <stage_time>
			}
			
			delay(700);
    16c4:	6c eb       	ldi	r22, 0xBC	; 188
    16c6:	72 e0       	ldi	r23, 0x02	; 2
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 a0 13 	call	0x2740	; 0x2740 <delay>
			stage_time--;			//increment the time
    16d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <stage_time>
    16d4:	81 50       	subi	r24, 0x01	; 1
    16d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <stage_time>
		{
			//do nothing
		}
	}
	
}
    16da:	68 96       	adiw	r28, 0x18	; 24
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	08 95       	ret

000016ee <loop>:
//|4|   |3|   |2|   |1|
//			        MENU

void loop() {

	Temperature_Celsius = read_temp_celsius();
    16ee:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z17read_temp_celsiusv>
    16f2:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <Temperature_Celsius>
    16f6:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <Temperature_Celsius+0x1>
    16fa:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <Temperature_Celsius+0x2>
    16fe:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <Temperature_Celsius+0x3>
	
	printCourrentTemperature(Temperature_Celsius);
    1702:	0e 94 88 08 	call	0x1110	; 0x1110 <_Z24printCourrentTemperaturef>
	

	if(screen == E_SCREEN_PRINCIPAL)
    1706:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <screen>
    170a:	81 11       	cpse	r24, r1
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <loop+0x34>
	{
		Stage_State_Machine();		//call SM function
    170e:	0e 94 47 0a 	call	0x148e	; 0x148e <_Z19Stage_State_Machinev>
		
		TempControllerUpdate();	//Update PID Temperature Control
    1712:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z20TempControllerUpdatev>

		draw_principalScreen(&activeButton_menuStart, &StartFlag);
    1716:	65 ee       	ldi	r22, 0xE5	; 229
    1718:	72 e0       	ldi	r23, 0x02	; 2
    171a:	8e ee       	ldi	r24, 0xEE	; 238
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	0e 94 4e 08 	call	0x109c	; 0x109c <_Z20draw_principalScreenP10T_E_BUTTONPh>
	}
	
	switch (activeButton_menuStart)
    1722:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <activeButton_menuStart>
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	61 f4       	brne	.+24     	; 0x1742 <loop+0x54>
		case E_BUTTON_NONE:
		break;
		
		case E_BUTTON_1:
		{
			screen = E_SCREEN_MENU;
    172a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <screen>
			mainMenuDraw();
    172e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z12mainMenuDrawv>
			drawCursor();
    1732:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z10drawCursorv>
			operateMainMenu(&screen, &activeButton_menuStart);
    1736:	6e ee       	ldi	r22, 0xEE	; 238
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	8f ee       	ldi	r24, 0xEF	; 239
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <_Z15operateMainMenuP10T_E_SCREENP10T_E_BUTTON>
    1742:	08 95       	ret

00001744 <_GLOBAL__sub_I_screen>:
		{
			//do nothing
		}
		break;
	}
}
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	c5 54       	subi	r28, 0x45	; 69
    1766:	d1 09       	sbc	r29, r1
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
//variable for state machine
T_E_STATE_MACHINE_STAGE e_sm_State = E_STAGE_HEATING;	//E_STAGE_HEATING - initial value


//PID object
PID ovenPID(&input, &output, &setpoint, get_PID_tempControl().Kp, get_PID_tempControl().Ki, get_PID_tempControl().Kd, DIRECT);
    1772:	ce 01       	movw	r24, r28
    1774:	8f 96       	adiw	r24, 0x2f	; 47
    1776:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    177a:	9f a8       	ldd	r9, Y+55	; 0x37
    177c:	88 ac       	ldd	r8, Y+56	; 0x38
    177e:	79 ac       	ldd	r7, Y+57	; 0x39
    1780:	6a ac       	ldd	r6, Y+58	; 0x3a
    1782:	ce 01       	movw	r24, r28
    1784:	48 96       	adiw	r24, 0x18	; 24
    1786:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    178a:	ac 8c       	ldd	r10, Y+28	; 0x1c
    178c:	bd 8c       	ldd	r11, Y+29	; 0x1d
    178e:	ce 8c       	ldd	r12, Y+30	; 0x1e
    1790:	df 8c       	ldd	r13, Y+31	; 0x1f
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z19get_PID_tempControlv>
    179a:	e9 80       	ldd	r14, Y+1	; 0x01
    179c:	fa 80       	ldd	r15, Y+2	; 0x02
    179e:	0b 81       	ldd	r16, Y+3	; 0x03
    17a0:	1c 81       	ldd	r17, Y+4	; 0x04
    17a2:	1f 92       	push	r1
    17a4:	1f 92       	push	r1
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	21 ee       	ldi	r18, 0xE1	; 225
    17b0:	32 e0       	ldi	r19, 0x02	; 2
    17b2:	49 ed       	ldi	r20, 0xD9	; 217
    17b4:	52 e0       	ldi	r21, 0x02	; 2
    17b6:	6d ed       	ldi	r22, 0xDD	; 221
    17b8:	72 e0       	ldi	r23, 0x02	; 2
    17ba:	8f e9       	ldi	r24, 0x9F	; 159
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN3PIDC1EPdS0_S0_dddi>
		{
			//do nothing
		}
		break;
	}
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cb 5b       	subi	r28, 0xBB	; 187
    17d0:	df 4f       	sbci	r29, 0xFF	; 255
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	08 95       	ret

000017fa <__subsf3>:
    17fa:	50 58       	subi	r21, 0x80	; 128

000017fc <__addsf3>:
    17fc:	bb 27       	eor	r27, r27
    17fe:	aa 27       	eor	r26, r26
    1800:	0e 94 15 0c 	call	0x182a	; 0x182a <__addsf3x>
    1804:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__fp_round>
    1808:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_pscA>
    180c:	38 f0       	brcs	.+14     	; 0x181c <__addsf3+0x20>
    180e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fp_pscB>
    1812:	20 f0       	brcs	.+8      	; 0x181c <__addsf3+0x20>
    1814:	39 f4       	brne	.+14     	; 0x1824 <__addsf3+0x28>
    1816:	9f 3f       	cpi	r25, 0xFF	; 255
    1818:	19 f4       	brne	.+6      	; 0x1820 <__addsf3+0x24>
    181a:	26 f4       	brtc	.+8      	; 0x1824 <__addsf3+0x28>
    181c:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_nan>
    1820:	0e f4       	brtc	.+2      	; 0x1824 <__addsf3+0x28>
    1822:	e0 95       	com	r30
    1824:	e7 fb       	bst	r30, 7
    1826:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__fp_inf>

0000182a <__addsf3x>:
    182a:	e9 2f       	mov	r30, r25
    182c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_split3>
    1830:	58 f3       	brcs	.-42     	; 0x1808 <__addsf3+0xc>
    1832:	ba 17       	cp	r27, r26
    1834:	62 07       	cpc	r22, r18
    1836:	73 07       	cpc	r23, r19
    1838:	84 07       	cpc	r24, r20
    183a:	95 07       	cpc	r25, r21
    183c:	20 f0       	brcs	.+8      	; 0x1846 <__addsf3x+0x1c>
    183e:	79 f4       	brne	.+30     	; 0x185e <__addsf3x+0x34>
    1840:	a6 f5       	brtc	.+104    	; 0x18aa <__addsf3x+0x80>
    1842:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__fp_zero>
    1846:	0e f4       	brtc	.+2      	; 0x184a <__addsf3x+0x20>
    1848:	e0 95       	com	r30
    184a:	0b 2e       	mov	r0, r27
    184c:	ba 2f       	mov	r27, r26
    184e:	a0 2d       	mov	r26, r0
    1850:	0b 01       	movw	r0, r22
    1852:	b9 01       	movw	r22, r18
    1854:	90 01       	movw	r18, r0
    1856:	0c 01       	movw	r0, r24
    1858:	ca 01       	movw	r24, r20
    185a:	a0 01       	movw	r20, r0
    185c:	11 24       	eor	r1, r1
    185e:	ff 27       	eor	r31, r31
    1860:	59 1b       	sub	r21, r25
    1862:	99 f0       	breq	.+38     	; 0x188a <__addsf3x+0x60>
    1864:	59 3f       	cpi	r21, 0xF9	; 249
    1866:	50 f4       	brcc	.+20     	; 0x187c <__addsf3x+0x52>
    1868:	50 3e       	cpi	r21, 0xE0	; 224
    186a:	68 f1       	brcs	.+90     	; 0x18c6 <__addsf3x+0x9c>
    186c:	1a 16       	cp	r1, r26
    186e:	f0 40       	sbci	r31, 0x00	; 0
    1870:	a2 2f       	mov	r26, r18
    1872:	23 2f       	mov	r18, r19
    1874:	34 2f       	mov	r19, r20
    1876:	44 27       	eor	r20, r20
    1878:	58 5f       	subi	r21, 0xF8	; 248
    187a:	f3 cf       	rjmp	.-26     	; 0x1862 <__addsf3x+0x38>
    187c:	46 95       	lsr	r20
    187e:	37 95       	ror	r19
    1880:	27 95       	ror	r18
    1882:	a7 95       	ror	r26
    1884:	f0 40       	sbci	r31, 0x00	; 0
    1886:	53 95       	inc	r21
    1888:	c9 f7       	brne	.-14     	; 0x187c <__addsf3x+0x52>
    188a:	7e f4       	brtc	.+30     	; 0x18aa <__addsf3x+0x80>
    188c:	1f 16       	cp	r1, r31
    188e:	ba 0b       	sbc	r27, r26
    1890:	62 0b       	sbc	r22, r18
    1892:	73 0b       	sbc	r23, r19
    1894:	84 0b       	sbc	r24, r20
    1896:	ba f0       	brmi	.+46     	; 0x18c6 <__addsf3x+0x9c>
    1898:	91 50       	subi	r25, 0x01	; 1
    189a:	a1 f0       	breq	.+40     	; 0x18c4 <__addsf3x+0x9a>
    189c:	ff 0f       	add	r31, r31
    189e:	bb 1f       	adc	r27, r27
    18a0:	66 1f       	adc	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	c2 f7       	brpl	.-16     	; 0x1898 <__addsf3x+0x6e>
    18a8:	0e c0       	rjmp	.+28     	; 0x18c6 <__addsf3x+0x9c>
    18aa:	ba 0f       	add	r27, r26
    18ac:	62 1f       	adc	r22, r18
    18ae:	73 1f       	adc	r23, r19
    18b0:	84 1f       	adc	r24, r20
    18b2:	48 f4       	brcc	.+18     	; 0x18c6 <__addsf3x+0x9c>
    18b4:	87 95       	ror	r24
    18b6:	77 95       	ror	r23
    18b8:	67 95       	ror	r22
    18ba:	b7 95       	ror	r27
    18bc:	f7 95       	ror	r31
    18be:	9e 3f       	cpi	r25, 0xFE	; 254
    18c0:	08 f0       	brcs	.+2      	; 0x18c4 <__addsf3x+0x9a>
    18c2:	b0 cf       	rjmp	.-160    	; 0x1824 <__addsf3+0x28>
    18c4:	93 95       	inc	r25
    18c6:	88 0f       	add	r24, r24
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <__addsf3x+0xa2>
    18ca:	99 27       	eor	r25, r25
    18cc:	ee 0f       	add	r30, r30
    18ce:	97 95       	ror	r25
    18d0:	87 95       	ror	r24
    18d2:	08 95       	ret

000018d4 <__divsf3>:
    18d4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__divsf3x>
    18d8:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__fp_round>
    18dc:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fp_pscB>
    18e0:	58 f0       	brcs	.+22     	; 0x18f8 <__divsf3+0x24>
    18e2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_pscA>
    18e6:	40 f0       	brcs	.+16     	; 0x18f8 <__divsf3+0x24>
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <__divsf3+0x20>
    18ea:	5f 3f       	cpi	r21, 0xFF	; 255
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <__divsf3+0x24>
    18ee:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__fp_inf>
    18f2:	51 11       	cpse	r21, r1
    18f4:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__fp_szero>
    18f8:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_nan>

000018fc <__divsf3x>:
    18fc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_split3>
    1900:	68 f3       	brcs	.-38     	; 0x18dc <__divsf3+0x8>

00001902 <__divsf3_pse>:
    1902:	99 23       	and	r25, r25
    1904:	b1 f3       	breq	.-20     	; 0x18f2 <__divsf3+0x1e>
    1906:	55 23       	and	r21, r21
    1908:	91 f3       	breq	.-28     	; 0x18ee <__divsf3+0x1a>
    190a:	95 1b       	sub	r25, r21
    190c:	55 0b       	sbc	r21, r21
    190e:	bb 27       	eor	r27, r27
    1910:	aa 27       	eor	r26, r26
    1912:	62 17       	cp	r22, r18
    1914:	73 07       	cpc	r23, r19
    1916:	84 07       	cpc	r24, r20
    1918:	38 f0       	brcs	.+14     	; 0x1928 <__divsf3_pse+0x26>
    191a:	9f 5f       	subi	r25, 0xFF	; 255
    191c:	5f 4f       	sbci	r21, 0xFF	; 255
    191e:	22 0f       	add	r18, r18
    1920:	33 1f       	adc	r19, r19
    1922:	44 1f       	adc	r20, r20
    1924:	aa 1f       	adc	r26, r26
    1926:	a9 f3       	breq	.-22     	; 0x1912 <__divsf3_pse+0x10>
    1928:	35 d0       	rcall	.+106    	; 0x1994 <__divsf3_pse+0x92>
    192a:	0e 2e       	mov	r0, r30
    192c:	3a f0       	brmi	.+14     	; 0x193c <__divsf3_pse+0x3a>
    192e:	e0 e8       	ldi	r30, 0x80	; 128
    1930:	32 d0       	rcall	.+100    	; 0x1996 <__divsf3_pse+0x94>
    1932:	91 50       	subi	r25, 0x01	; 1
    1934:	50 40       	sbci	r21, 0x00	; 0
    1936:	e6 95       	lsr	r30
    1938:	00 1c       	adc	r0, r0
    193a:	ca f7       	brpl	.-14     	; 0x192e <__divsf3_pse+0x2c>
    193c:	2b d0       	rcall	.+86     	; 0x1994 <__divsf3_pse+0x92>
    193e:	fe 2f       	mov	r31, r30
    1940:	29 d0       	rcall	.+82     	; 0x1994 <__divsf3_pse+0x92>
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	bb 1f       	adc	r27, r27
    194a:	26 17       	cp	r18, r22
    194c:	37 07       	cpc	r19, r23
    194e:	48 07       	cpc	r20, r24
    1950:	ab 07       	cpc	r26, r27
    1952:	b0 e8       	ldi	r27, 0x80	; 128
    1954:	09 f0       	breq	.+2      	; 0x1958 <__divsf3_pse+0x56>
    1956:	bb 0b       	sbc	r27, r27
    1958:	80 2d       	mov	r24, r0
    195a:	bf 01       	movw	r22, r30
    195c:	ff 27       	eor	r31, r31
    195e:	93 58       	subi	r25, 0x83	; 131
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	3a f0       	brmi	.+14     	; 0x1972 <__divsf3_pse+0x70>
    1964:	9e 3f       	cpi	r25, 0xFE	; 254
    1966:	51 05       	cpc	r21, r1
    1968:	78 f0       	brcs	.+30     	; 0x1988 <__divsf3_pse+0x86>
    196a:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__fp_inf>
    196e:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__fp_szero>
    1972:	5f 3f       	cpi	r21, 0xFF	; 255
    1974:	e4 f3       	brlt	.-8      	; 0x196e <__divsf3_pse+0x6c>
    1976:	98 3e       	cpi	r25, 0xE8	; 232
    1978:	d4 f3       	brlt	.-12     	; 0x196e <__divsf3_pse+0x6c>
    197a:	86 95       	lsr	r24
    197c:	77 95       	ror	r23
    197e:	67 95       	ror	r22
    1980:	b7 95       	ror	r27
    1982:	f7 95       	ror	r31
    1984:	9f 5f       	subi	r25, 0xFF	; 255
    1986:	c9 f7       	brne	.-14     	; 0x197a <__divsf3_pse+0x78>
    1988:	88 0f       	add	r24, r24
    198a:	91 1d       	adc	r25, r1
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	97 f9       	bld	r25, 7
    1992:	08 95       	ret
    1994:	e1 e0       	ldi	r30, 0x01	; 1
    1996:	66 0f       	add	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	bb 1f       	adc	r27, r27
    199e:	62 17       	cp	r22, r18
    19a0:	73 07       	cpc	r23, r19
    19a2:	84 07       	cpc	r24, r20
    19a4:	ba 07       	cpc	r27, r26
    19a6:	20 f0       	brcs	.+8      	; 0x19b0 <__divsf3_pse+0xae>
    19a8:	62 1b       	sub	r22, r18
    19aa:	73 0b       	sbc	r23, r19
    19ac:	84 0b       	sbc	r24, r20
    19ae:	ba 0b       	sbc	r27, r26
    19b0:	ee 1f       	adc	r30, r30
    19b2:	88 f7       	brcc	.-30     	; 0x1996 <__divsf3_pse+0x94>
    19b4:	e0 95       	com	r30
    19b6:	08 95       	ret

000019b8 <__fixsfsi>:
    19b8:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fixunssfsi>
    19bc:	68 94       	set
    19be:	b1 11       	cpse	r27, r1
    19c0:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__fp_szero>
    19c4:	08 95       	ret

000019c6 <__fixunssfsi>:
    19c6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_splitA>
    19ca:	88 f0       	brcs	.+34     	; 0x19ee <__fixunssfsi+0x28>
    19cc:	9f 57       	subi	r25, 0x7F	; 127
    19ce:	98 f0       	brcs	.+38     	; 0x19f6 <__fixunssfsi+0x30>
    19d0:	b9 2f       	mov	r27, r25
    19d2:	99 27       	eor	r25, r25
    19d4:	b7 51       	subi	r27, 0x17	; 23
    19d6:	b0 f0       	brcs	.+44     	; 0x1a04 <__fixunssfsi+0x3e>
    19d8:	e1 f0       	breq	.+56     	; 0x1a12 <__fixunssfsi+0x4c>
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	1a f0       	brmi	.+6      	; 0x19ea <__fixunssfsi+0x24>
    19e4:	ba 95       	dec	r27
    19e6:	c9 f7       	brne	.-14     	; 0x19da <__fixunssfsi+0x14>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <__fixunssfsi+0x4c>
    19ea:	b1 30       	cpi	r27, 0x01	; 1
    19ec:	91 f0       	breq	.+36     	; 0x1a12 <__fixunssfsi+0x4c>
    19ee:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__fp_zero>
    19f2:	b1 e0       	ldi	r27, 0x01	; 1
    19f4:	08 95       	ret
    19f6:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__fp_zero>
    19fa:	67 2f       	mov	r22, r23
    19fc:	78 2f       	mov	r23, r24
    19fe:	88 27       	eor	r24, r24
    1a00:	b8 5f       	subi	r27, 0xF8	; 248
    1a02:	39 f0       	breq	.+14     	; 0x1a12 <__fixunssfsi+0x4c>
    1a04:	b9 3f       	cpi	r27, 0xF9	; 249
    1a06:	cc f3       	brlt	.-14     	; 0x19fa <__fixunssfsi+0x34>
    1a08:	86 95       	lsr	r24
    1a0a:	77 95       	ror	r23
    1a0c:	67 95       	ror	r22
    1a0e:	b3 95       	inc	r27
    1a10:	d9 f7       	brne	.-10     	; 0x1a08 <__fixunssfsi+0x42>
    1a12:	3e f4       	brtc	.+14     	; 0x1a22 <__fixunssfsi+0x5c>
    1a14:	90 95       	com	r25
    1a16:	80 95       	com	r24
    1a18:	70 95       	com	r23
    1a1a:	61 95       	neg	r22
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	08 95       	ret

00001a24 <__floatunsisf>:
    1a24:	e8 94       	clt
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <__floatsisf+0x12>

00001a28 <__floatsisf>:
    1a28:	97 fb       	bst	r25, 7
    1a2a:	3e f4       	brtc	.+14     	; 0x1a3a <__floatsisf+0x12>
    1a2c:	90 95       	com	r25
    1a2e:	80 95       	com	r24
    1a30:	70 95       	com	r23
    1a32:	61 95       	neg	r22
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	8f 4f       	sbci	r24, 0xFF	; 255
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	99 23       	and	r25, r25
    1a3c:	a9 f0       	breq	.+42     	; 0x1a68 <__floatsisf+0x40>
    1a3e:	f9 2f       	mov	r31, r25
    1a40:	96 e9       	ldi	r25, 0x96	; 150
    1a42:	bb 27       	eor	r27, r27
    1a44:	93 95       	inc	r25
    1a46:	f6 95       	lsr	r31
    1a48:	87 95       	ror	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	b7 95       	ror	r27
    1a50:	f1 11       	cpse	r31, r1
    1a52:	f8 cf       	rjmp	.-16     	; 0x1a44 <__floatsisf+0x1c>
    1a54:	fa f4       	brpl	.+62     	; 0x1a94 <__floatsisf+0x6c>
    1a56:	bb 0f       	add	r27, r27
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <__floatsisf+0x36>
    1a5a:	60 ff       	sbrs	r22, 0
    1a5c:	1b c0       	rjmp	.+54     	; 0x1a94 <__floatsisf+0x6c>
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	8f 4f       	sbci	r24, 0xFF	; 255
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	16 c0       	rjmp	.+44     	; 0x1a94 <__floatsisf+0x6c>
    1a68:	88 23       	and	r24, r24
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <__floatsisf+0x48>
    1a6c:	96 e9       	ldi	r25, 0x96	; 150
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <__floatsisf+0x6a>
    1a70:	77 23       	and	r23, r23
    1a72:	21 f0       	breq	.+8      	; 0x1a7c <__floatsisf+0x54>
    1a74:	9e e8       	ldi	r25, 0x8E	; 142
    1a76:	87 2f       	mov	r24, r23
    1a78:	76 2f       	mov	r23, r22
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <__floatsisf+0x5e>
    1a7c:	66 23       	and	r22, r22
    1a7e:	71 f0       	breq	.+28     	; 0x1a9c <__floatsisf+0x74>
    1a80:	96 e8       	ldi	r25, 0x86	; 134
    1a82:	86 2f       	mov	r24, r22
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	2a f0       	brmi	.+10     	; 0x1a94 <__floatsisf+0x6c>
    1a8a:	9a 95       	dec	r25
    1a8c:	66 0f       	add	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	da f7       	brpl	.-10     	; 0x1a8a <__floatsisf+0x62>
    1a94:	88 0f       	add	r24, r24
    1a96:	96 95       	lsr	r25
    1a98:	87 95       	ror	r24
    1a9a:	97 f9       	bld	r25, 7
    1a9c:	08 95       	ret

00001a9e <__fp_inf>:
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	9f 67       	ori	r25, 0x7F	; 127
    1aa2:	80 e8       	ldi	r24, 0x80	; 128
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	08 95       	ret

00001aaa <__fp_nan>:
    1aaa:	9f ef       	ldi	r25, 0xFF	; 255
    1aac:	80 ec       	ldi	r24, 0xC0	; 192
    1aae:	08 95       	ret

00001ab0 <__fp_pscA>:
    1ab0:	00 24       	eor	r0, r0
    1ab2:	0a 94       	dec	r0
    1ab4:	16 16       	cp	r1, r22
    1ab6:	17 06       	cpc	r1, r23
    1ab8:	18 06       	cpc	r1, r24
    1aba:	09 06       	cpc	r0, r25
    1abc:	08 95       	ret

00001abe <__fp_pscB>:
    1abe:	00 24       	eor	r0, r0
    1ac0:	0a 94       	dec	r0
    1ac2:	12 16       	cp	r1, r18
    1ac4:	13 06       	cpc	r1, r19
    1ac6:	14 06       	cpc	r1, r20
    1ac8:	05 06       	cpc	r0, r21
    1aca:	08 95       	ret

00001acc <__fp_round>:
    1acc:	09 2e       	mov	r0, r25
    1ace:	03 94       	inc	r0
    1ad0:	00 0c       	add	r0, r0
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <__fp_round+0xc>
    1ad4:	88 23       	and	r24, r24
    1ad6:	52 f0       	brmi	.+20     	; 0x1aec <__fp_round+0x20>
    1ad8:	bb 0f       	add	r27, r27
    1ada:	40 f4       	brcc	.+16     	; 0x1aec <__fp_round+0x20>
    1adc:	bf 2b       	or	r27, r31
    1ade:	11 f4       	brne	.+4      	; 0x1ae4 <__fp_round+0x18>
    1ae0:	60 ff       	sbrs	r22, 0
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <__fp_round+0x20>
    1ae4:	6f 5f       	subi	r22, 0xFF	; 255
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	08 95       	ret

00001aee <__fp_split3>:
    1aee:	57 fd       	sbrc	r21, 7
    1af0:	90 58       	subi	r25, 0x80	; 128
    1af2:	44 0f       	add	r20, r20
    1af4:	55 1f       	adc	r21, r21
    1af6:	59 f0       	breq	.+22     	; 0x1b0e <__fp_splitA+0x10>
    1af8:	5f 3f       	cpi	r21, 0xFF	; 255
    1afa:	71 f0       	breq	.+28     	; 0x1b18 <__fp_splitA+0x1a>
    1afc:	47 95       	ror	r20

00001afe <__fp_splitA>:
    1afe:	88 0f       	add	r24, r24
    1b00:	97 fb       	bst	r25, 7
    1b02:	99 1f       	adc	r25, r25
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <__fp_splitA+0x20>
    1b06:	9f 3f       	cpi	r25, 0xFF	; 255
    1b08:	79 f0       	breq	.+30     	; 0x1b28 <__fp_splitA+0x2a>
    1b0a:	87 95       	ror	r24
    1b0c:	08 95       	ret
    1b0e:	12 16       	cp	r1, r18
    1b10:	13 06       	cpc	r1, r19
    1b12:	14 06       	cpc	r1, r20
    1b14:	55 1f       	adc	r21, r21
    1b16:	f2 cf       	rjmp	.-28     	; 0x1afc <__fp_split3+0xe>
    1b18:	46 95       	lsr	r20
    1b1a:	f1 df       	rcall	.-30     	; 0x1afe <__fp_splitA>
    1b1c:	08 c0       	rjmp	.+16     	; 0x1b2e <__fp_splitA+0x30>
    1b1e:	16 16       	cp	r1, r22
    1b20:	17 06       	cpc	r1, r23
    1b22:	18 06       	cpc	r1, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	f1 cf       	rjmp	.-30     	; 0x1b0a <__fp_splitA+0xc>
    1b28:	86 95       	lsr	r24
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	61 05       	cpc	r22, r1
    1b2e:	08 94       	sec
    1b30:	08 95       	ret

00001b32 <__fp_zero>:
    1b32:	e8 94       	clt

00001b34 <__fp_szero>:
    1b34:	bb 27       	eor	r27, r27
    1b36:	66 27       	eor	r22, r22
    1b38:	77 27       	eor	r23, r23
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	97 f9       	bld	r25, 7
    1b3e:	08 95       	ret

00001b40 <__mulsf3>:
    1b40:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3x>
    1b44:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__fp_round>
    1b48:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_pscA>
    1b4c:	38 f0       	brcs	.+14     	; 0x1b5c <__mulsf3+0x1c>
    1b4e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fp_pscB>
    1b52:	20 f0       	brcs	.+8      	; 0x1b5c <__mulsf3+0x1c>
    1b54:	95 23       	and	r25, r21
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <__mulsf3+0x1c>
    1b58:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__fp_inf>
    1b5c:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__fp_nan>
    1b60:	11 24       	eor	r1, r1
    1b62:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__fp_szero>

00001b66 <__mulsf3x>:
    1b66:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_split3>
    1b6a:	70 f3       	brcs	.-36     	; 0x1b48 <__mulsf3+0x8>

00001b6c <__mulsf3_pse>:
    1b6c:	95 9f       	mul	r25, r21
    1b6e:	c1 f3       	breq	.-16     	; 0x1b60 <__mulsf3+0x20>
    1b70:	95 0f       	add	r25, r21
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	55 1f       	adc	r21, r21
    1b76:	62 9f       	mul	r22, r18
    1b78:	f0 01       	movw	r30, r0
    1b7a:	72 9f       	mul	r23, r18
    1b7c:	bb 27       	eor	r27, r27
    1b7e:	f0 0d       	add	r31, r0
    1b80:	b1 1d       	adc	r27, r1
    1b82:	63 9f       	mul	r22, r19
    1b84:	aa 27       	eor	r26, r26
    1b86:	f0 0d       	add	r31, r0
    1b88:	b1 1d       	adc	r27, r1
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	64 9f       	mul	r22, r20
    1b8e:	66 27       	eor	r22, r22
    1b90:	b0 0d       	add	r27, r0
    1b92:	a1 1d       	adc	r26, r1
    1b94:	66 1f       	adc	r22, r22
    1b96:	82 9f       	mul	r24, r18
    1b98:	22 27       	eor	r18, r18
    1b9a:	b0 0d       	add	r27, r0
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	62 1f       	adc	r22, r18
    1ba0:	73 9f       	mul	r23, r19
    1ba2:	b0 0d       	add	r27, r0
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	62 1f       	adc	r22, r18
    1ba8:	83 9f       	mul	r24, r19
    1baa:	a0 0d       	add	r26, r0
    1bac:	61 1d       	adc	r22, r1
    1bae:	22 1f       	adc	r18, r18
    1bb0:	74 9f       	mul	r23, r20
    1bb2:	33 27       	eor	r19, r19
    1bb4:	a0 0d       	add	r26, r0
    1bb6:	61 1d       	adc	r22, r1
    1bb8:	23 1f       	adc	r18, r19
    1bba:	84 9f       	mul	r24, r20
    1bbc:	60 0d       	add	r22, r0
    1bbe:	21 1d       	adc	r18, r1
    1bc0:	82 2f       	mov	r24, r18
    1bc2:	76 2f       	mov	r23, r22
    1bc4:	6a 2f       	mov	r22, r26
    1bc6:	11 24       	eor	r1, r1
    1bc8:	9f 57       	subi	r25, 0x7F	; 127
    1bca:	50 40       	sbci	r21, 0x00	; 0
    1bcc:	9a f0       	brmi	.+38     	; 0x1bf4 <__mulsf3_pse+0x88>
    1bce:	f1 f0       	breq	.+60     	; 0x1c0c <__mulsf3_pse+0xa0>
    1bd0:	88 23       	and	r24, r24
    1bd2:	4a f0       	brmi	.+18     	; 0x1be6 <__mulsf3_pse+0x7a>
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	66 1f       	adc	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	91 50       	subi	r25, 0x01	; 1
    1be2:	50 40       	sbci	r21, 0x00	; 0
    1be4:	a9 f7       	brne	.-22     	; 0x1bd0 <__mulsf3_pse+0x64>
    1be6:	9e 3f       	cpi	r25, 0xFE	; 254
    1be8:	51 05       	cpc	r21, r1
    1bea:	80 f0       	brcs	.+32     	; 0x1c0c <__mulsf3_pse+0xa0>
    1bec:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__fp_inf>
    1bf0:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__fp_szero>
    1bf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf6:	e4 f3       	brlt	.-8      	; 0x1bf0 <__mulsf3_pse+0x84>
    1bf8:	98 3e       	cpi	r25, 0xE8	; 232
    1bfa:	d4 f3       	brlt	.-12     	; 0x1bf0 <__mulsf3_pse+0x84>
    1bfc:	86 95       	lsr	r24
    1bfe:	77 95       	ror	r23
    1c00:	67 95       	ror	r22
    1c02:	b7 95       	ror	r27
    1c04:	f7 95       	ror	r31
    1c06:	e7 95       	ror	r30
    1c08:	9f 5f       	subi	r25, 0xFF	; 255
    1c0a:	c1 f7       	brne	.-16     	; 0x1bfc <__mulsf3_pse+0x90>
    1c0c:	fe 2b       	or	r31, r30
    1c0e:	88 0f       	add	r24, r24
    1c10:	91 1d       	adc	r25, r1
    1c12:	96 95       	lsr	r25
    1c14:	87 95       	ror	r24
    1c16:	97 f9       	bld	r25, 7
    1c18:	08 95       	ret

00001c1a <_ZN14HardwareSerial9availableEv>:
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	91 8d       	ldd	r25, Z+25	; 0x19
    1c1e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c20:	89 2f       	mov	r24, r25
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	80 5c       	subi	r24, 0xC0	; 192
    1c26:	9f 4f       	sbci	r25, 0xFF	; 255
    1c28:	82 1b       	sub	r24, r18
    1c2a:	91 09       	sbc	r25, r1
    1c2c:	8f 73       	andi	r24, 0x3F	; 63
    1c2e:	99 27       	eor	r25, r25
    1c30:	08 95       	ret

00001c32 <_ZN14HardwareSerial4peekEv>:
    1c32:	fc 01       	movw	r30, r24
    1c34:	91 8d       	ldd	r25, Z+25	; 0x19
    1c36:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c38:	98 17       	cp	r25, r24
    1c3a:	31 f0       	breq	.+12     	; 0x1c48 <_ZN14HardwareSerial4peekEv+0x16>
    1c3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c3e:	e8 0f       	add	r30, r24
    1c40:	f1 1d       	adc	r31, r1
    1c42:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	08 95       	ret
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	08 95       	ret

00001c4e <_ZN14HardwareSerial4readEv>:
    1c4e:	fc 01       	movw	r30, r24
    1c50:	91 8d       	ldd	r25, Z+25	; 0x19
    1c52:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c54:	98 17       	cp	r25, r24
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <_ZN14HardwareSerial4readEv+0x22>
    1c58:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c5a:	df 01       	movw	r26, r30
    1c5c:	a8 0f       	add	r26, r24
    1c5e:	b1 1d       	adc	r27, r1
    1c60:	5d 96       	adiw	r26, 0x1d	; 29
    1c62:	8c 91       	ld	r24, X
    1c64:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c66:	9f 5f       	subi	r25, 0xFF	; 255
    1c68:	9f 73       	andi	r25, 0x3F	; 63
    1c6a:	92 8f       	std	Z+26, r25	; 0x1a
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	08 95       	ret
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	9f ef       	ldi	r25, 0xFF	; 255
    1c74:	08 95       	ret

00001c76 <_Z14serialEventRunv>:
    1c76:	80 e9       	ldi	r24, 0x90	; 144
    1c78:	9f e0       	ldi	r25, 0x0F	; 15
    1c7a:	89 2b       	or	r24, r25
    1c7c:	49 f0       	breq	.+18     	; 0x1c90 <_Z14serialEventRunv+0x1a>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	89 2b       	or	r24, r25
    1c84:	29 f0       	breq	.+10     	; 0x1c90 <_Z14serialEventRunv+0x1a>
    1c86:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <_Z17Serial0_availablev>
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1c90:	08 95       	ret

00001c92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    1c92:	fc 01       	movw	r30, r24
    1c94:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c96:	df 01       	movw	r26, r30
    1c98:	a8 0f       	add	r26, r24
    1c9a:	b1 1d       	adc	r27, r1
    1c9c:	a3 5a       	subi	r26, 0xA3	; 163
    1c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca0:	2c 91       	ld	r18, X
    1ca2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	8f 73       	andi	r24, 0x3F	; 63
    1caa:	99 27       	eor	r25, r25
    1cac:	84 8f       	std	Z+28, r24	; 0x1c
    1cae:	a6 89       	ldd	r26, Z+22	; 0x16
    1cb0:	b7 89       	ldd	r27, Z+23	; 0x17
    1cb2:	2c 93       	st	X, r18
    1cb4:	a0 89       	ldd	r26, Z+16	; 0x10
    1cb6:	b1 89       	ldd	r27, Z+17	; 0x11
    1cb8:	8c 91       	ld	r24, X
    1cba:	80 64       	ori	r24, 0x40	; 64
    1cbc:	8c 93       	st	X, r24
    1cbe:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cc0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cc2:	98 13       	cpse	r25, r24
    1cc4:	06 c0       	rjmp	.+12     	; 0x1cd2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    1cc6:	02 88       	ldd	r0, Z+18	; 0x12
    1cc8:	f3 89       	ldd	r31, Z+19	; 0x13
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 7d       	andi	r24, 0xDF	; 223
    1cd0:	80 83       	st	Z, r24
    1cd2:	08 95       	ret

00001cd4 <_ZN14HardwareSerial5flushEv>:
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	ec 01       	movw	r28, r24
    1cda:	88 8d       	ldd	r24, Y+24	; 0x18
    1cdc:	88 23       	and	r24, r24
    1cde:	c9 f0       	breq	.+50     	; 0x1d12 <_ZN14HardwareSerial5flushEv+0x3e>
    1ce0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ce2:	fb 89       	ldd	r31, Y+19	; 0x13
    1ce4:	80 81       	ld	r24, Z
    1ce6:	85 fd       	sbrc	r24, 5
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <_ZN14HardwareSerial5flushEv+0x20>
    1cea:	a8 89       	ldd	r26, Y+16	; 0x10
    1cec:	b9 89       	ldd	r27, Y+17	; 0x11
    1cee:	8c 91       	ld	r24, X
    1cf0:	86 fd       	sbrc	r24, 6
    1cf2:	0f c0       	rjmp	.+30     	; 0x1d12 <_ZN14HardwareSerial5flushEv+0x3e>
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	07 fc       	sbrc	r0, 7
    1cf8:	f5 cf       	rjmp	.-22     	; 0x1ce4 <_ZN14HardwareSerial5flushEv+0x10>
    1cfa:	80 81       	ld	r24, Z
    1cfc:	85 ff       	sbrs	r24, 5
    1cfe:	f2 cf       	rjmp	.-28     	; 0x1ce4 <_ZN14HardwareSerial5flushEv+0x10>
    1d00:	a8 89       	ldd	r26, Y+16	; 0x10
    1d02:	b9 89       	ldd	r27, Y+17	; 0x11
    1d04:	8c 91       	ld	r24, X
    1d06:	85 ff       	sbrs	r24, 5
    1d08:	ed cf       	rjmp	.-38     	; 0x1ce4 <_ZN14HardwareSerial5flushEv+0x10>
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d10:	e7 cf       	rjmp	.-50     	; 0x1ce0 <_ZN14HardwareSerial5flushEv+0xc>
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <_ZN14HardwareSerial5writeEh>:
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	ec 01       	movw	r28, r24
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	88 8f       	std	Y+24, r24	; 0x18
    1d2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d2e:	98 13       	cpse	r25, r24
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <_ZN14HardwareSerial5writeEh+0x24>
    1d32:	e8 89       	ldd	r30, Y+16	; 0x10
    1d34:	f9 89       	ldd	r31, Y+17	; 0x11
    1d36:	80 81       	ld	r24, Z
    1d38:	85 fd       	sbrc	r24, 5
    1d3a:	24 c0       	rjmp	.+72     	; 0x1d84 <_ZN14HardwareSerial5writeEh+0x6c>
    1d3c:	f6 2e       	mov	r15, r22
    1d3e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	0f 5f       	subi	r16, 0xFF	; 255
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	0f 73       	andi	r16, 0x3F	; 63
    1d48:	11 27       	eor	r17, r17
    1d4a:	e0 2e       	mov	r14, r16
    1d4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d4e:	e8 12       	cpse	r14, r24
    1d50:	0c c0       	rjmp	.+24     	; 0x1d6a <_ZN14HardwareSerial5writeEh+0x52>
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	07 fc       	sbrc	r0, 7
    1d56:	fa cf       	rjmp	.-12     	; 0x1d4c <_ZN14HardwareSerial5writeEh+0x34>
    1d58:	e8 89       	ldd	r30, Y+16	; 0x10
    1d5a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d5c:	80 81       	ld	r24, Z
    1d5e:	85 ff       	sbrs	r24, 5
    1d60:	f5 cf       	rjmp	.-22     	; 0x1d4c <_ZN14HardwareSerial5writeEh+0x34>
    1d62:	ce 01       	movw	r24, r28
    1d64:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d68:	f1 cf       	rjmp	.-30     	; 0x1d4c <_ZN14HardwareSerial5writeEh+0x34>
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e8 0f       	add	r30, r24
    1d70:	f1 1d       	adc	r31, r1
    1d72:	e3 5a       	subi	r30, 0xA3	; 163
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	f0 82       	st	Z, r15
    1d78:	0b 8f       	std	Y+27, r16	; 0x1b
    1d7a:	ea 89       	ldd	r30, Y+18	; 0x12
    1d7c:	fb 89       	ldd	r31, Y+19	; 0x13
    1d7e:	80 81       	ld	r24, Z
    1d80:	80 62       	ori	r24, 0x20	; 32
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <_ZN14HardwareSerial5writeEh+0x7a>
    1d84:	ee 89       	ldd	r30, Y+22	; 0x16
    1d86:	ff 89       	ldd	r31, Y+23	; 0x17
    1d88:	60 83       	st	Z, r22
    1d8a:	e8 89       	ldd	r30, Y+16	; 0x10
    1d8c:	f9 89       	ldd	r31, Y+17	; 0x11
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 64       	ori	r24, 0x40	; 64
    1d92:	80 83       	st	Z, r24
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	08 95       	ret

00001da6 <_ZN14HardwareSerial5beginEmh>:
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ec 01       	movw	r28, r24
    1db6:	6a 01       	movw	r12, r20
    1db8:	7b 01       	movw	r14, r22
    1dba:	12 2f       	mov	r17, r18
    1dbc:	e8 89       	ldd	r30, Y+16	; 0x10
    1dbe:	f9 89       	ldd	r31, Y+17	; 0x11
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	80 83       	st	Z, r24
    1dc4:	41 15       	cp	r20, r1
    1dc6:	51 4e       	sbci	r21, 0xE1	; 225
    1dc8:	61 05       	cpc	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	b1 f0       	breq	.+44     	; 0x1dfa <_ZN14HardwareSerial5beginEmh+0x54>
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	79 e0       	ldi	r23, 0x09	; 9
    1dd2:	8d e3       	ldi	r24, 0x3D	; 61
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a7 01       	movw	r20, r14
    1dd8:	96 01       	movw	r18, r12
    1dda:	0e 94 9a 19 	call	0x3334	; 0x3334 <__udivmodsi4>
    1dde:	da 01       	movw	r26, r20
    1de0:	c9 01       	movw	r24, r18
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	a1 09       	sbc	r26, r1
    1de6:	b1 09       	sbc	r27, r1
    1de8:	b6 95       	lsr	r27
    1dea:	a7 95       	ror	r26
    1dec:	97 95       	ror	r25
    1dee:	87 95       	ror	r24
    1df0:	ac 01       	movw	r20, r24
    1df2:	41 15       	cp	r20, r1
    1df4:	80 e1       	ldi	r24, 0x10	; 16
    1df6:	58 07       	cpc	r21, r24
    1df8:	a8 f0       	brcs	.+42     	; 0x1e24 <_ZN14HardwareSerial5beginEmh+0x7e>
    1dfa:	e8 89       	ldd	r30, Y+16	; 0x10
    1dfc:	f9 89       	ldd	r31, Y+17	; 0x11
    1dfe:	10 82       	st	Z, r1
    1e00:	60 e8       	ldi	r22, 0x80	; 128
    1e02:	74 e8       	ldi	r23, 0x84	; 132
    1e04:	8e e1       	ldi	r24, 0x1E	; 30
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a7 01       	movw	r20, r14
    1e0a:	96 01       	movw	r18, r12
    1e0c:	0e 94 9a 19 	call	0x3334	; 0x3334 <__udivmodsi4>
    1e10:	ba 01       	movw	r22, r20
    1e12:	a9 01       	movw	r20, r18
    1e14:	41 50       	subi	r20, 0x01	; 1
    1e16:	51 09       	sbc	r21, r1
    1e18:	61 09       	sbc	r22, r1
    1e1a:	71 09       	sbc	r23, r1
    1e1c:	76 95       	lsr	r23
    1e1e:	67 95       	ror	r22
    1e20:	57 95       	ror	r21
    1e22:	47 95       	ror	r20
    1e24:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e26:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e28:	50 83       	st	Z, r21
    1e2a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e2c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e2e:	40 83       	st	Z, r20
    1e30:	18 8e       	std	Y+24, r1	; 0x18
    1e32:	ec 89       	ldd	r30, Y+20	; 0x14
    1e34:	fd 89       	ldd	r31, Y+21	; 0x15
    1e36:	10 83       	st	Z, r17
    1e38:	ea 89       	ldd	r30, Y+18	; 0x12
    1e3a:	fb 89       	ldd	r31, Y+19	; 0x13
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 61       	ori	r24, 0x10	; 16
    1e40:	80 83       	st	Z, r24
    1e42:	ea 89       	ldd	r30, Y+18	; 0x12
    1e44:	fb 89       	ldd	r31, Y+19	; 0x13
    1e46:	80 81       	ld	r24, Z
    1e48:	88 60       	ori	r24, 0x08	; 8
    1e4a:	80 83       	st	Z, r24
    1e4c:	ea 89       	ldd	r30, Y+18	; 0x12
    1e4e:	fb 89       	ldd	r31, Y+19	; 0x13
    1e50:	80 81       	ld	r24, Z
    1e52:	80 68       	ori	r24, 0x80	; 128
    1e54:	80 83       	st	Z, r24
    1e56:	ea 89       	ldd	r30, Y+18	; 0x12
    1e58:	fb 89       	ldd	r31, Y+19	; 0x13
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8f 7d       	andi	r24, 0xDF	; 223
    1e5e:	80 83       	st	Z, r24
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	08 95       	ret

00001e70 <__vector_18>:
    1e70:	1f 92       	push	r1
    1e72:	0f 92       	push	r0
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	0f 92       	push	r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	2f 93       	push	r18
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	ef 93       	push	r30
    1e82:	ff 93       	push	r31
    1e84:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <Serial+0x10>
    1e88:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <Serial+0x11>
    1e8c:	80 81       	ld	r24, Z
    1e8e:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <Serial+0x16>
    1e92:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <Serial+0x17>
    1e96:	82 fd       	sbrc	r24, 2
    1e98:	12 c0       	rjmp	.+36     	; 0x1ebe <__vector_18+0x4e>
    1e9a:	90 81       	ld	r25, Z
    1e9c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <Serial+0x19>
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	8f 73       	andi	r24, 0x3F	; 63
    1ea4:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <Serial+0x1a>
    1ea8:	82 17       	cp	r24, r18
    1eaa:	51 f0       	breq	.+20     	; 0x1ec0 <__vector_18+0x50>
    1eac:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Serial+0x19>
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	e0 51       	subi	r30, 0x10	; 16
    1eb4:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb6:	95 8f       	std	Z+29, r25	; 0x1d
    1eb8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <Serial+0x19>
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <__vector_18+0x50>
    1ebe:	80 81       	ld	r24, Z
    1ec0:	ff 91       	pop	r31
    1ec2:	ef 91       	pop	r30
    1ec4:	9f 91       	pop	r25
    1ec6:	8f 91       	pop	r24
    1ec8:	2f 91       	pop	r18
    1eca:	0f 90       	pop	r0
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	0f 90       	pop	r0
    1ed0:	1f 90       	pop	r1
    1ed2:	18 95       	reti

00001ed4 <__vector_19>:
    1ed4:	1f 92       	push	r1
    1ed6:	0f 92       	push	r0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	0f 92       	push	r0
    1edc:	11 24       	eor	r1, r1
    1ede:	2f 93       	push	r18
    1ee0:	3f 93       	push	r19
    1ee2:	4f 93       	push	r20
    1ee4:	5f 93       	push	r21
    1ee6:	6f 93       	push	r22
    1ee8:	7f 93       	push	r23
    1eea:	8f 93       	push	r24
    1eec:	9f 93       	push	r25
    1eee:	af 93       	push	r26
    1ef0:	bf 93       	push	r27
    1ef2:	ef 93       	push	r30
    1ef4:	ff 93       	push	r31
    1ef6:	80 ef       	ldi	r24, 0xF0	; 240
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0
    1f1c:	1f 90       	pop	r1
    1f1e:	18 95       	reti

00001f20 <_Z17Serial0_availablev>:
    1f20:	80 ef       	ldi	r24, 0xF0	; 240
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_ZN14HardwareSerial9availableEv>
    1f28:	21 e0       	ldi	r18, 0x01	; 1
    1f2a:	89 2b       	or	r24, r25
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <_Z17Serial0_availablev+0x10>
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	82 2f       	mov	r24, r18
    1f32:	08 95       	ret

00001f34 <_GLOBAL__sub_I___vector_18>:
    1f34:	e0 ef       	ldi	r30, 0xF0	; 240
    1f36:	f2 e0       	ldi	r31, 0x02	; 2
    1f38:	13 82       	std	Z+3, r1	; 0x03
    1f3a:	12 82       	std	Z+2, r1	; 0x02
    1f3c:	88 ee       	ldi	r24, 0xE8	; 232
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	84 83       	std	Z+4, r24	; 0x04
    1f46:	95 83       	std	Z+5, r25	; 0x05
    1f48:	a6 83       	std	Z+6, r26	; 0x06
    1f4a:	b7 83       	std	Z+7, r27	; 0x07
    1f4c:	87 e1       	ldi	r24, 0x17	; 23
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	85 ec       	ldi	r24, 0xC5	; 197
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	95 87       	std	Z+13, r25	; 0x0d
    1f5a:	84 87       	std	Z+12, r24	; 0x0c
    1f5c:	84 ec       	ldi	r24, 0xC4	; 196
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	97 87       	std	Z+15, r25	; 0x0f
    1f62:	86 87       	std	Z+14, r24	; 0x0e
    1f64:	80 ec       	ldi	r24, 0xC0	; 192
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	91 8b       	std	Z+17, r25	; 0x11
    1f6a:	80 8b       	std	Z+16, r24	; 0x10
    1f6c:	81 ec       	ldi	r24, 0xC1	; 193
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	93 8b       	std	Z+19, r25	; 0x13
    1f72:	82 8b       	std	Z+18, r24	; 0x12
    1f74:	82 ec       	ldi	r24, 0xC2	; 194
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	95 8b       	std	Z+21, r25	; 0x15
    1f7a:	84 8b       	std	Z+20, r24	; 0x14
    1f7c:	86 ec       	ldi	r24, 0xC6	; 198
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	97 8b       	std	Z+23, r25	; 0x17
    1f82:	86 8b       	std	Z+22, r24	; 0x16
    1f84:	11 8e       	std	Z+25, r1	; 0x19
    1f86:	12 8e       	std	Z+26, r1	; 0x1a
    1f88:	13 8e       	std	Z+27, r1	; 0x1b
    1f8a:	14 8e       	std	Z+28, r1	; 0x1c
    1f8c:	08 95       	ret

00001f8e <_ZN13LiquidCrystal11pulseEnableEv>:
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    1fbc:	84 e6       	ldi	r24, 0x64	; 100
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <delayMicroseconds>

00001fc8 <_ZN13LiquidCrystal10write4bitsEh>:
    1fc8:	cf 92       	push	r12
    1fca:	df 92       	push	r13
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	6c 01       	movw	r12, r24
    1fda:	7c 01       	movw	r14, r24
    1fdc:	87 e0       	ldi	r24, 0x07	; 7
    1fde:	e8 0e       	add	r14, r24
    1fe0:	f1 1c       	adc	r15, r1
    1fe2:	c0 e0       	ldi	r28, 0x00	; 0
    1fe4:	d0 e0       	ldi	r29, 0x00	; 0
    1fe6:	06 2f       	mov	r16, r22
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	b8 01       	movw	r22, r16
    1fec:	0c 2e       	mov	r0, r28
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    1ff0:	75 95       	asr	r23
    1ff2:	67 95       	ror	r22
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1ff8:	61 70       	andi	r22, 0x01	; 1
    1ffa:	f7 01       	movw	r30, r14
    1ffc:	81 91       	ld	r24, Z+
    1ffe:	7f 01       	movw	r14, r30
    2000:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    2004:	21 96       	adiw	r28, 0x01	; 1
    2006:	c4 30       	cpi	r28, 0x04	; 4
    2008:	d1 05       	cpc	r29, r1
    200a:	79 f7       	brne	.-34     	; 0x1fea <_ZN13LiquidCrystal10write4bitsEh+0x22>
    200c:	c6 01       	movw	r24, r12
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	cf 90       	pop	r12
    201e:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <_ZN13LiquidCrystal11pulseEnableEv>

00002022 <_ZN13LiquidCrystal10write8bitsEh>:
    2022:	cf 92       	push	r12
    2024:	df 92       	push	r13
    2026:	ef 92       	push	r14
    2028:	ff 92       	push	r15
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	6c 01       	movw	r12, r24
    2034:	7c 01       	movw	r14, r24
    2036:	87 e0       	ldi	r24, 0x07	; 7
    2038:	e8 0e       	add	r14, r24
    203a:	f1 1c       	adc	r15, r1
    203c:	c0 e0       	ldi	r28, 0x00	; 0
    203e:	d0 e0       	ldi	r29, 0x00	; 0
    2040:	06 2f       	mov	r16, r22
    2042:	10 e0       	ldi	r17, 0x00	; 0
    2044:	b8 01       	movw	r22, r16
    2046:	0c 2e       	mov	r0, r28
    2048:	02 c0       	rjmp	.+4      	; 0x204e <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    204a:	75 95       	asr	r23
    204c:	67 95       	ror	r22
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <_ZN13LiquidCrystal10write8bitsEh+0x28>
    2052:	61 70       	andi	r22, 0x01	; 1
    2054:	f7 01       	movw	r30, r14
    2056:	81 91       	ld	r24, Z+
    2058:	7f 01       	movw	r14, r30
    205a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    205e:	21 96       	adiw	r28, 0x01	; 1
    2060:	c8 30       	cpi	r28, 0x08	; 8
    2062:	d1 05       	cpc	r29, r1
    2064:	79 f7       	brne	.-34     	; 0x2044 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    2066:	c6 01       	movw	r24, r12
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <_ZN13LiquidCrystal11pulseEnableEv>

0000207c <_ZN13LiquidCrystal4sendEhh>:
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
    2084:	16 2f       	mov	r17, r22
    2086:	64 2f       	mov	r22, r20
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	8f 3f       	cpi	r24, 0xFF	; 255
    2092:	19 f0       	breq	.+6      	; 0x209a <_ZN13LiquidCrystal4sendEhh+0x1e>
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	61 2f       	mov	r22, r17
    209e:	84 ff       	sbrs	r24, 4
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <_ZN13LiquidCrystal4sendEhh+0x32>
    20a2:	ce 01       	movw	r24, r28
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0c 94 11 10 	jmp	0x2022	; 0x2022 <_ZN13LiquidCrystal10write8bitsEh>
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	84 e0       	ldi	r24, 0x04	; 4
    20b2:	75 95       	asr	r23
    20b4:	67 95       	ror	r22
    20b6:	8a 95       	dec	r24
    20b8:	e1 f7       	brne	.-8      	; 0x20b2 <_ZN13LiquidCrystal4sendEhh+0x36>
    20ba:	ce 01       	movw	r24, r28
    20bc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN13LiquidCrystal10write4bitsEh>
    20c0:	61 2f       	mov	r22, r17
    20c2:	ce 01       	movw	r24, r28
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <_ZN13LiquidCrystal10write4bitsEh>

000020ce <_ZN13LiquidCrystal7commandEh>:
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	0c 94 3e 10 	jmp	0x207c	; 0x207c <_ZN13LiquidCrystal4sendEhh>

000020d4 <_ZN13LiquidCrystal5clearEv>:
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>
    20da:	80 ed       	ldi	r24, 0xD0	; 208
    20dc:	97 e0       	ldi	r25, 0x07	; 7
    20de:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <delayMicroseconds>

000020e2 <_ZN13LiquidCrystal9setCursorEhh>:
    20e2:	fc 01       	movw	r30, r24
    20e4:	44 30       	cpi	r20, 0x04	; 4
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <_ZN13LiquidCrystal9setCursorEhh+0x8>
    20e8:	43 e0       	ldi	r20, 0x03	; 3
    20ea:	83 89       	ldd	r24, Z+19	; 0x13
    20ec:	48 17       	cp	r20, r24
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    20f0:	4f ef       	ldi	r20, 0xFF	; 255
    20f2:	48 0f       	add	r20, r24
    20f4:	df 01       	movw	r26, r30
    20f6:	a4 0f       	add	r26, r20
    20f8:	b1 1d       	adc	r27, r1
    20fa:	54 96       	adiw	r26, 0x14	; 20
    20fc:	9c 91       	ld	r25, X
    20fe:	69 0f       	add	r22, r25
    2100:	60 68       	ori	r22, 0x80	; 128
    2102:	cf 01       	movw	r24, r30
    2104:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>

00002108 <_ZN13LiquidCrystal7displayEv>:
    2108:	fc 01       	movw	r30, r24
    210a:	60 89       	ldd	r22, Z+16	; 0x10
    210c:	26 2f       	mov	r18, r22
    210e:	24 60       	ori	r18, 0x04	; 4
    2110:	20 8b       	std	Z+16, r18	; 0x10
    2112:	6c 60       	ori	r22, 0x0C	; 12
    2114:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>

00002118 <_ZN13LiquidCrystal5beginEhhh>:
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
    2126:	42 30       	cpi	r20, 0x02	; 2
    2128:	18 f0       	brcs	.+6      	; 0x2130 <_ZN13LiquidCrystal5beginEhhh+0x18>
    212a:	8f 85       	ldd	r24, Y+15	; 0x0f
    212c:	88 60       	ori	r24, 0x08	; 8
    212e:	8f 87       	std	Y+15, r24	; 0x0f
    2130:	4b 8b       	std	Y+19, r20	; 0x13
    2132:	1c 8a       	std	Y+20, r1	; 0x14
    2134:	80 e4       	ldi	r24, 0x40	; 64
    2136:	8d 8b       	std	Y+21, r24	; 0x15
    2138:	6e 8b       	std	Y+22, r22	; 0x16
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	60 5c       	subi	r22, 0xC0	; 192
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	6f 8b       	std	Y+23, r22	; 0x17
    2142:	22 23       	and	r18, r18
    2144:	29 f0       	breq	.+10     	; 0x2150 <_ZN13LiquidCrystal5beginEhhh+0x38>
    2146:	41 30       	cpi	r20, 0x01	; 1
    2148:	19 f4       	brne	.+6      	; 0x2150 <_ZN13LiquidCrystal5beginEhhh+0x38>
    214a:	8f 85       	ldd	r24, Y+15	; 0x0f
    214c:	84 60       	ori	r24, 0x04	; 4
    214e:	8f 87       	std	Y+15, r24	; 0x0f
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	8f 3f       	cpi	r24, 0xFF	; 255
    215c:	19 f0       	breq	.+6      	; 0x2164 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
    2168:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    216c:	7e 01       	movw	r14, r28
    216e:	87 e0       	ldi	r24, 0x07	; 7
    2170:	e8 0e       	add	r14, r24
    2172:	f1 1c       	adc	r15, r1
    2174:	00 e0       	ldi	r16, 0x00	; 0
    2176:	10 e0       	ldi	r17, 0x00	; 0
    2178:	8f 85       	ldd	r24, Y+15	; 0x0f
    217a:	84 fd       	sbrc	r24, 4
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    217e:	84 e0       	ldi	r24, 0x04	; 4
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <_ZN13LiquidCrystal5beginEhhh+0x70>
    2184:	88 e0       	ldi	r24, 0x08	; 8
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	08 17       	cp	r16, r24
    218a:	19 07       	cpc	r17, r25
    218c:	4c f4       	brge	.+18     	; 0x21a0 <_ZN13LiquidCrystal5beginEhhh+0x88>
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	f7 01       	movw	r30, r14
    2192:	81 91       	ld	r24, Z+
    2194:	7f 01       	movw	r14, r30
    2196:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    219a:	0f 5f       	subi	r16, 0xFF	; 255
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	ec cf       	rjmp	.-40     	; 0x2178 <_ZN13LiquidCrystal5beginEhhh+0x60>
    21a0:	80 e5       	ldi	r24, 0x50	; 80
    21a2:	93 ec       	ldi	r25, 0xC3	; 195
    21a4:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	8e 81       	ldd	r24, Y+6	; 0x06
    21b4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	8f 3f       	cpi	r24, 0xFF	; 255
    21bc:	19 f0       	breq	.+6      	; 0x21c4 <_ZN13LiquidCrystal5beginEhhh+0xac>
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	0e 94 03 15 	call	0x2a06	; 0x2a06 <digitalWrite>
    21c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    21c6:	64 fd       	sbrc	r22, 4
    21c8:	1d c0       	rjmp	.+58     	; 0x2204 <_ZN13LiquidCrystal5beginEhhh+0xec>
    21ca:	63 e0       	ldi	r22, 0x03	; 3
    21cc:	ce 01       	movw	r24, r28
    21ce:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN13LiquidCrystal10write4bitsEh>
    21d2:	84 e9       	ldi	r24, 0x94	; 148
    21d4:	91 e1       	ldi	r25, 0x11	; 17
    21d6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    21da:	63 e0       	ldi	r22, 0x03	; 3
    21dc:	ce 01       	movw	r24, r28
    21de:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN13LiquidCrystal10write4bitsEh>
    21e2:	84 e9       	ldi	r24, 0x94	; 148
    21e4:	91 e1       	ldi	r25, 0x11	; 17
    21e6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    21ea:	63 e0       	ldi	r22, 0x03	; 3
    21ec:	ce 01       	movw	r24, r28
    21ee:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN13LiquidCrystal10write4bitsEh>
    21f2:	86 e9       	ldi	r24, 0x96	; 150
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	ce 01       	movw	r24, r28
    21fe:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN13LiquidCrystal10write4bitsEh>
    2202:	16 c0       	rjmp	.+44     	; 0x2230 <_ZN13LiquidCrystal5beginEhhh+0x118>
    2204:	60 62       	ori	r22, 0x20	; 32
    2206:	ce 01       	movw	r24, r28
    2208:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>
    220c:	84 e9       	ldi	r24, 0x94	; 148
    220e:	91 e1       	ldi	r25, 0x11	; 17
    2210:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    2214:	6f 85       	ldd	r22, Y+15	; 0x0f
    2216:	60 62       	ori	r22, 0x20	; 32
    2218:	ce 01       	movw	r24, r28
    221a:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>
    221e:	86 e9       	ldi	r24, 0x96	; 150
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <delayMicroseconds>
    2226:	6f 85       	ldd	r22, Y+15	; 0x0f
    2228:	60 62       	ori	r22, 0x20	; 32
    222a:	ce 01       	movw	r24, r28
    222c:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>
    2230:	6f 85       	ldd	r22, Y+15	; 0x0f
    2232:	60 62       	ori	r22, 0x20	; 32
    2234:	ce 01       	movw	r24, r28
    2236:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>
    223a:	84 e0       	ldi	r24, 0x04	; 4
    223c:	88 8b       	std	Y+16, r24	; 0x10
    223e:	ce 01       	movw	r24, r28
    2240:	0e 94 84 10 	call	0x2108	; 0x2108 <_ZN13LiquidCrystal7displayEv>
    2244:	ce 01       	movw	r24, r28
    2246:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN13LiquidCrystal5clearEv>
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	89 8b       	std	Y+17, r24	; 0x11
    224e:	66 e0       	ldi	r22, 0x06	; 6
    2250:	ce 01       	movw	r24, r28
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>

00002262 <_ZN13LiquidCrystalC1Ehhhhhh>:
    2262:	cf 92       	push	r12
    2264:	ef 92       	push	r14
    2266:	0f 93       	push	r16
    2268:	fc 01       	movw	r30, r24
    226a:	13 82       	std	Z+3, r1	; 0x03
    226c:	12 82       	std	Z+2, r1	; 0x02
    226e:	87 e2       	ldi	r24, 0x27	; 39
    2270:	92 e0       	ldi	r25, 0x02	; 2
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	64 83       	std	Z+4, r22	; 0x04
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	85 83       	std	Z+5, r24	; 0x05
    227c:	46 83       	std	Z+6, r20	; 0x06
    227e:	27 83       	std	Z+7, r18	; 0x07
    2280:	00 87       	std	Z+8, r16	; 0x08
    2282:	e1 86       	std	Z+9, r14	; 0x09
    2284:	c2 86       	std	Z+10, r12	; 0x0a
    2286:	13 86       	std	Z+11, r1	; 0x0b
    2288:	14 86       	std	Z+12, r1	; 0x0c
    228a:	15 86       	std	Z+13, r1	; 0x0d
    228c:	16 86       	std	Z+14, r1	; 0x0e
    228e:	17 86       	std	Z+15, r1	; 0x0f
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	60 e1       	ldi	r22, 0x10	; 16
    2296:	cf 01       	movw	r24, r30
    2298:	0f 91       	pop	r16
    229a:	ef 90       	pop	r14
    229c:	cf 90       	pop	r12
    229e:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <_ZN13LiquidCrystal5beginEhhh>

000022a2 <_ZN13LiquidCrystal10createCharEhPh>:
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	8c 01       	movw	r16, r24
    22b0:	7a 01       	movw	r14, r20
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
    22b2:	67 70       	andi	r22, 0x07	; 7
    22b4:	88 e0       	ldi	r24, 0x08	; 8
    22b6:	68 9f       	mul	r22, r24
    22b8:	b0 01       	movw	r22, r0
    22ba:	11 24       	eor	r1, r1
    22bc:	60 64       	ori	r22, 0x40	; 64
    22be:	c8 01       	movw	r24, r16
    22c0:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN13LiquidCrystal7commandEh>
    22c4:	e7 01       	movw	r28, r14
    22c6:	a8 e0       	ldi	r26, 0x08	; 8
    22c8:	ea 0e       	add	r14, r26
    22ca:	f1 1c       	adc	r15, r1
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    22cc:	69 91       	ld	r22, Y+
    22ce:	d8 01       	movw	r26, r16
    22d0:	ed 91       	ld	r30, X+
    22d2:	fc 91       	ld	r31, X
    22d4:	01 90       	ld	r0, Z+
    22d6:	f0 81       	ld	r31, Z
    22d8:	e0 2d       	mov	r30, r0
    22da:	c8 01       	movw	r24, r16
    22dc:	09 95       	icall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    22de:	ce 15       	cp	r28, r14
    22e0:	df 05       	cpc	r29, r15
    22e2:	a1 f7       	brne	.-24     	; 0x22cc <_ZN13LiquidCrystal10createCharEhPh+0x2a>
    write(charmap[i]);
  }
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	08 95       	ret

000022f2 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	08 95       	ret

000022fe <initVariant>:
    22fe:	08 95       	ret

00002300 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2300:	0e 94 e7 13 	call	0x27ce	; 0x27ce <init>

	initVariant();
    2304:	0e 94 7f 11 	call	0x22fe	; 0x22fe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2308:	0e 94 0f 0a 	call	0x141e	; 0x141e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    230c:	cb e3       	ldi	r28, 0x3B	; 59
    230e:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    2310:	0e 94 77 0b 	call	0x16ee	; 0x16ee <loop>
		if (serialEventRun) serialEventRun();
    2314:	20 97       	sbiw	r28, 0x00	; 0
    2316:	e1 f3       	breq	.-8      	; 0x2310 <main+0x10>
    2318:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_Z14serialEventRunv>
    231c:	f9 cf       	rjmp	.-14     	; 0x2310 <main+0x10>

0000231e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	6c 01       	movw	r12, r24
    2330:	7a 01       	movw	r14, r20
    2332:	8b 01       	movw	r16, r22
    2334:	c0 e0       	ldi	r28, 0x00	; 0
    2336:	d0 e0       	ldi	r29, 0x00	; 0
    2338:	ce 15       	cp	r28, r14
    233a:	df 05       	cpc	r29, r15
    233c:	81 f0       	breq	.+32     	; 0x235e <_ZN5Print5writeEPKhj+0x40>
    233e:	d8 01       	movw	r26, r16
    2340:	6d 91       	ld	r22, X+
    2342:	8d 01       	movw	r16, r26
    2344:	d6 01       	movw	r26, r12
    2346:	ed 91       	ld	r30, X+
    2348:	fc 91       	ld	r31, X
    234a:	01 90       	ld	r0, Z+
    234c:	f0 81       	ld	r31, Z
    234e:	e0 2d       	mov	r30, r0
    2350:	c6 01       	movw	r24, r12
    2352:	09 95       	icall
    2354:	89 2b       	or	r24, r25
    2356:	11 f0       	breq	.+4      	; 0x235c <_ZN5Print5writeEPKhj+0x3e>
    2358:	21 96       	adiw	r28, 0x01	; 1
    235a:	ee cf       	rjmp	.-36     	; 0x2338 <_ZN5Print5writeEPKhj+0x1a>
    235c:	7e 01       	movw	r14, r28
    235e:	c7 01       	movw	r24, r14
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	ff 90       	pop	r15
    236a:	ef 90       	pop	r14
    236c:	df 90       	pop	r13
    236e:	cf 90       	pop	r12
    2370:	08 95       	ret

00002372 <_ZN5Print5writeEPKc>:
    2372:	61 15       	cp	r22, r1
    2374:	71 05       	cpc	r23, r1
    2376:	79 f0       	breq	.+30     	; 0x2396 <_ZN5Print5writeEPKc+0x24>
    2378:	fb 01       	movw	r30, r22
    237a:	01 90       	ld	r0, Z+
    237c:	00 20       	and	r0, r0
    237e:	e9 f7       	brne	.-6      	; 0x237a <_ZN5Print5writeEPKc+0x8>
    2380:	31 97       	sbiw	r30, 0x01	; 1
    2382:	af 01       	movw	r20, r30
    2384:	46 1b       	sub	r20, r22
    2386:	57 0b       	sbc	r21, r23
    2388:	dc 01       	movw	r26, r24
    238a:	ed 91       	ld	r30, X+
    238c:	fc 91       	ld	r31, X
    238e:	02 80       	ldd	r0, Z+2	; 0x02
    2390:	f3 81       	ldd	r31, Z+3	; 0x03
    2392:	e0 2d       	mov	r30, r0
    2394:	09 94       	ijmp
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	08 95       	ret

0000239c <_ZN5Print5printERK6String>:
    239c:	db 01       	movw	r26, r22
    239e:	14 96       	adiw	r26, 0x04	; 4
    23a0:	4d 91       	ld	r20, X+
    23a2:	5c 91       	ld	r21, X
    23a4:	15 97       	sbiw	r26, 0x05	; 5
    23a6:	6d 91       	ld	r22, X+
    23a8:	7c 91       	ld	r23, X
    23aa:	dc 01       	movw	r26, r24
    23ac:	ed 91       	ld	r30, X+
    23ae:	fc 91       	ld	r31, X
    23b0:	02 80       	ldd	r0, Z+2	; 0x02
    23b2:	f3 81       	ldd	r31, Z+3	; 0x03
    23b4:	e0 2d       	mov	r30, r0
    23b6:	09 94       	ijmp

000023b8 <_ZN5Print5printEPKc>:
    23b8:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <_ZN5Print5writeEPKc>

000023bc <_ZN5Print5printEc>:
    23bc:	dc 01       	movw	r26, r24
    23be:	ed 91       	ld	r30, X+
    23c0:	fc 91       	ld	r31, X
    23c2:	01 90       	ld	r0, Z+
    23c4:	f0 81       	ld	r31, Z
    23c6:	e0 2d       	mov	r30, r0
    23c8:	09 94       	ijmp

000023ca <_ZN5Print11printNumberEmh>:
    23ca:	8f 92       	push	r8
    23cc:	9f 92       	push	r9
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	a1 97       	sbiw	r28, 0x21	; 33
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	7c 01       	movw	r14, r24
    23f0:	fa 01       	movw	r30, r20
    23f2:	cb 01       	movw	r24, r22
    23f4:	19 a2       	std	Y+33, r1	; 0x21
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <_ZN5Print11printNumberEmh+0x32>
    23fa:	2a e0       	ldi	r18, 0x0A	; 10
    23fc:	8e 01       	movw	r16, r28
    23fe:	0f 5d       	subi	r16, 0xDF	; 223
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	82 2e       	mov	r8, r18
    2404:	91 2c       	mov	r9, r1
    2406:	a1 2c       	mov	r10, r1
    2408:	b1 2c       	mov	r11, r1
    240a:	bf 01       	movw	r22, r30
    240c:	a5 01       	movw	r20, r10
    240e:	94 01       	movw	r18, r8
    2410:	0e 94 9a 19 	call	0x3334	; 0x3334 <__udivmodsi4>
    2414:	f9 01       	movw	r30, r18
    2416:	ca 01       	movw	r24, r20
    2418:	01 50       	subi	r16, 0x01	; 1
    241a:	11 09       	sbc	r17, r1
    241c:	6a 30       	cpi	r22, 0x0A	; 10
    241e:	10 f4       	brcc	.+4      	; 0x2424 <_ZN5Print11printNumberEmh+0x5a>
    2420:	60 5d       	subi	r22, 0xD0	; 208
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <_ZN5Print11printNumberEmh+0x5c>
    2424:	69 5c       	subi	r22, 0xC9	; 201
    2426:	d8 01       	movw	r26, r16
    2428:	6c 93       	st	X, r22
    242a:	23 2b       	or	r18, r19
    242c:	24 2b       	or	r18, r20
    242e:	25 2b       	or	r18, r21
    2430:	61 f7       	brne	.-40     	; 0x240a <_ZN5Print11printNumberEmh+0x40>
    2432:	b8 01       	movw	r22, r16
    2434:	c7 01       	movw	r24, r14
    2436:	0e 94 b9 11 	call	0x2372	; 0x2372 <_ZN5Print5writeEPKc>
    243a:	a1 96       	adiw	r28, 0x21	; 33
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	bf 90       	pop	r11
    2454:	af 90       	pop	r10
    2456:	9f 90       	pop	r9
    2458:	8f 90       	pop	r8
    245a:	08 95       	ret

0000245c <_ZN5Print5printEmi>:
    245c:	21 15       	cp	r18, r1
    245e:	31 05       	cpc	r19, r1
    2460:	41 f4       	brne	.+16     	; 0x2472 <_ZN5Print5printEmi+0x16>
    2462:	dc 01       	movw	r26, r24
    2464:	ed 91       	ld	r30, X+
    2466:	fc 91       	ld	r31, X
    2468:	01 90       	ld	r0, Z+
    246a:	f0 81       	ld	r31, Z
    246c:	e0 2d       	mov	r30, r0
    246e:	64 2f       	mov	r22, r20
    2470:	09 94       	ijmp
    2472:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <_ZN5Print11printNumberEmh>

00002476 <_ZN5Print5printEhi>:
    2476:	9a 01       	movw	r18, r20
    2478:	46 2f       	mov	r20, r22
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	0c 94 2e 12 	jmp	0x245c	; 0x245c <_ZN5Print5printEmi>

00002484 <_ZN5Print5printEji>:
    2484:	9a 01       	movw	r18, r20
    2486:	ab 01       	movw	r20, r22
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	0c 94 2e 12 	jmp	0x245c	; 0x245c <_ZN5Print5printEmi>

00002490 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2490:	7f 92       	push	r7
    2492:	8f 92       	push	r8
    2494:	9f 92       	push	r9
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	8c 01       	movw	r16, r24
    24ac:	6a 01       	movw	r12, r20
    24ae:	7b 01       	movw	r14, r22
    24b0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    24b2:	9a 01       	movw	r18, r20
    24b4:	ab 01       	movw	r20, r22
    24b6:	c7 01       	movw	r24, r14
    24b8:	b6 01       	movw	r22, r12
    24ba:	0e 94 95 19 	call	0x332a	; 0x332a <__unordsf2>
    24be:	88 23       	and	r24, r24
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    24c2:	6e e2       	ldi	r22, 0x2E	; 46
    24c4:	72 e0       	ldi	r23, 0x02	; 2
    24c6:	27 c0       	rjmp	.+78     	; 0x2516 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    24c8:	46 01       	movw	r8, r12
    24ca:	57 01       	movw	r10, r14
    24cc:	e8 94       	clt
    24ce:	b7 f8       	bld	r11, 7
    24d0:	2f ef       	ldi	r18, 0xFF	; 255
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	5f e7       	ldi	r21, 0x7F	; 127
    24d8:	c5 01       	movw	r24, r10
    24da:	b4 01       	movw	r22, r8
    24dc:	0e 94 95 19 	call	0x332a	; 0x332a <__unordsf2>
    24e0:	81 11       	cpse	r24, r1
    24e2:	0d c0       	rjmp	.+26     	; 0x24fe <_ZN5Print10printFloatEdh+0x6e>
    24e4:	2f ef       	ldi	r18, 0xFF	; 255
    24e6:	3f ef       	ldi	r19, 0xFF	; 255
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	5f e7       	ldi	r21, 0x7F	; 127
    24ec:	c5 01       	movw	r24, r10
    24ee:	b4 01       	movw	r22, r8
    24f0:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	1c f4       	brge	.+6      	; 0x24fe <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    24f8:	62 e3       	ldi	r22, 0x32	; 50
    24fa:	72 e0       	ldi	r23, 0x02	; 2
    24fc:	0c c0       	rjmp	.+24     	; 0x2516 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    24fe:	2f ef       	ldi	r18, 0xFF	; 255
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	5f e4       	ldi	r21, 0x4F	; 79
    2506:	c7 01       	movw	r24, r14
    2508:	b6 01       	movw	r22, r12
    250a:	0e 94 90 19 	call	0x3320	; 0x3320 <__gesf2>
    250e:	18 16       	cp	r1, r24
    2510:	94 f4       	brge	.+36     	; 0x2536 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2512:	66 e3       	ldi	r22, 0x36	; 54
    2514:	72 e0       	ldi	r23, 0x02	; 2
    2516:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2532:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2536:	2f ef       	ldi	r18, 0xFF	; 255
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	5f ec       	ldi	r21, 0xCF	; 207
    253e:	c7 01       	movw	r24, r14
    2540:	b6 01       	movw	r22, r12
    2542:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2546:	87 fd       	sbrc	r24, 7
    2548:	e4 cf       	rjmp	.-56     	; 0x2512 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	a9 01       	movw	r20, r18
    2550:	c7 01       	movw	r24, r14
    2552:	b6 01       	movw	r22, r12
    2554:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2558:	87 ff       	sbrs	r24, 7
    255a:	0a c0       	rjmp	.+20     	; 0x2570 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    255c:	6d e2       	ldi	r22, 0x2D	; 45
    255e:	c8 01       	movw	r24, r16
    2560:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN5Print5printEc>
    2564:	ec 01       	movw	r28, r24
     number = -number;
    2566:	f7 fa       	bst	r15, 7
    2568:	f0 94       	com	r15
    256a:	f7 f8       	bld	r15, 7
    256c:	f0 94       	com	r15
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2570:	c0 e0       	ldi	r28, 0x00	; 0
    2572:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2574:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    257e:	7b 14       	cp	r7, r11
    2580:	41 f0       	breq	.+16     	; 0x2592 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    258e:	b3 94       	inc	r11
    2590:	f6 cf       	rjmp	.-20     	; 0x257e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2592:	a7 01       	movw	r20, r14
    2594:	96 01       	movw	r18, r12
    2596:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
    259a:	6b 01       	movw	r12, r22
    259c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    259e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fixunssfsi>
    25a2:	4b 01       	movw	r8, r22
    25a4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    25a6:	2a e0       	ldi	r18, 0x0A	; 10
    25a8:	ab 01       	movw	r20, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	c8 01       	movw	r24, r16
    25ae:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    25b2:	c8 0f       	add	r28, r24
    25b4:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    25b6:	77 20       	and	r7, r7
    25b8:	b9 f1       	breq	.+110    	; 0x2628 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    25ba:	c5 01       	movw	r24, r10
    25bc:	b4 01       	movw	r22, r8
    25be:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatunsisf>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	c7 01       	movw	r24, r14
    25c8:	b6 01       	movw	r22, r12
    25ca:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    25ce:	6b 01       	movw	r12, r22
    25d0:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    25d2:	6e e2       	ldi	r22, 0x2E	; 46
    25d4:	c8 01       	movw	r24, r16
    25d6:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN5Print5printEc>
    25da:	c8 0f       	add	r28, r24
    25dc:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	c7 01       	movw	r24, r14
    25e8:	b6 01       	movw	r22, r12
    25ea:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    25ee:	4b 01       	movw	r8, r22
    25f0:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    25f2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fixunssfsi>
    25f6:	6b 01       	movw	r12, r22
    25f8:	7c 01       	movw	r14, r24
    n += print(toPrint);
    25fa:	4a e0       	ldi	r20, 0x0A	; 10
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	c8 01       	movw	r24, r16
    2600:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN5Print5printEji>
    2604:	c8 0f       	add	r28, r24
    2606:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2608:	b6 01       	movw	r22, r12
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatunsisf>
    2612:	9b 01       	movw	r18, r22
    2614:	ac 01       	movw	r20, r24
    2616:	c5 01       	movw	r24, r10
    2618:	b4 01       	movw	r22, r8
    261a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    261e:	6b 01       	movw	r12, r22
    2620:	7c 01       	movw	r14, r24
    2622:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2624:	71 10       	cpse	r7, r1
    2626:	db cf       	rjmp	.-74     	; 0x25de <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2628:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	9f 90       	pop	r9
    2640:	8f 90       	pop	r8
    2642:	7f 90       	pop	r7
    2644:	08 95       	ret

00002646 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2646:	0c 94 48 12 	jmp	0x2490	; 0x2490 <_ZN5Print10printFloatEdh>

0000264a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    264a:	1f 92       	push	r1
    264c:	0f 92       	push	r0
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	0f 92       	push	r0
    2652:	11 24       	eor	r1, r1
    2654:	2f 93       	push	r18
    2656:	3f 93       	push	r19
    2658:	8f 93       	push	r24
    265a:	9f 93       	push	r25
    265c:	af 93       	push	r26
    265e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2660:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <timer0_millis>
    2664:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <timer0_millis+0x1>
    2668:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <timer0_millis+0x2>
    266c:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2670:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2674:	23 e0       	ldi	r18, 0x03	; 3
    2676:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2678:	2d 37       	cpi	r18, 0x7D	; 125
    267a:	20 f4       	brcc	.+8      	; 0x2684 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	a1 1d       	adc	r26, r1
    2680:	b1 1d       	adc	r27, r1
    2682:	05 c0       	rjmp	.+10     	; 0x268e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2684:	26 e8       	ldi	r18, 0x86	; 134
    2686:	23 0f       	add	r18, r19
		m += 1;
    2688:	02 96       	adiw	r24, 0x02	; 2
    268a:	a1 1d       	adc	r26, r1
    268c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    268e:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <timer0_fract>
	timer0_millis = m;
    2692:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <timer0_millis>
    2696:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <timer0_millis+0x1>
    269a:	a0 93 90 03 	sts	0x0390, r26	; 0x800390 <timer0_millis+0x2>
    269e:	b0 93 91 03 	sts	0x0391, r27	; 0x800391 <timer0_millis+0x3>
	timer0_overflow_count++;
    26a2:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <timer0_overflow_count>
    26a6:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <timer0_overflow_count+0x1>
    26aa:	a0 91 94 03 	lds	r26, 0x0394	; 0x800394 <timer0_overflow_count+0x2>
    26ae:	b0 91 95 03 	lds	r27, 0x0395	; 0x800395 <timer0_overflow_count+0x3>
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	a1 1d       	adc	r26, r1
    26b6:	b1 1d       	adc	r27, r1
    26b8:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <timer0_overflow_count>
    26bc:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <timer0_overflow_count+0x1>
    26c0:	a0 93 94 03 	sts	0x0394, r26	; 0x800394 <timer0_overflow_count+0x2>
    26c4:	b0 93 95 03 	sts	0x0395, r27	; 0x800395 <timer0_overflow_count+0x3>
}
    26c8:	bf 91       	pop	r27
    26ca:	af 91       	pop	r26
    26cc:	9f 91       	pop	r25
    26ce:	8f 91       	pop	r24
    26d0:	3f 91       	pop	r19
    26d2:	2f 91       	pop	r18
    26d4:	0f 90       	pop	r0
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	0f 90       	pop	r0
    26da:	1f 90       	pop	r1
    26dc:	18 95       	reti

000026de <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    26de:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    26e0:	f8 94       	cli
	m = timer0_millis;
    26e2:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <timer0_millis>
    26e6:	70 91 8f 03 	lds	r23, 0x038F	; 0x80038f <timer0_millis+0x1>
    26ea:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <timer0_millis+0x2>
    26ee:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <timer0_millis+0x3>
	SREG = oldSREG;
    26f2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    26f4:	08 95       	ret

000026f6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    26f6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    26f8:	f8 94       	cli
	m = timer0_overflow_count;
    26fa:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <timer0_overflow_count>
    26fe:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <timer0_overflow_count+0x1>
    2702:	a0 91 94 03 	lds	r26, 0x0394	; 0x800394 <timer0_overflow_count+0x2>
    2706:	b0 91 95 03 	lds	r27, 0x0395	; 0x800395 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    270a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    270c:	a8 9b       	sbis	0x15, 0	; 21
    270e:	05 c0       	rjmp	.+10     	; 0x271a <micros+0x24>
    2710:	2f 3f       	cpi	r18, 0xFF	; 255
    2712:	19 f0       	breq	.+6      	; 0x271a <micros+0x24>
		m++;
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	a1 1d       	adc	r26, r1
    2718:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    271a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    271c:	ba 2f       	mov	r27, r26
    271e:	a9 2f       	mov	r26, r25
    2720:	98 2f       	mov	r25, r24
    2722:	88 27       	eor	r24, r24
    2724:	82 0f       	add	r24, r18
    2726:	91 1d       	adc	r25, r1
    2728:	a1 1d       	adc	r26, r1
    272a:	b1 1d       	adc	r27, r1
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	42 e0       	ldi	r20, 0x02	; 2
    2732:	66 0f       	add	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	88 1f       	adc	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	4a 95       	dec	r20
    273c:	d1 f7       	brne	.-12     	; 0x2732 <micros+0x3c>
}
    273e:	08 95       	ret

00002740 <delay>:

void delay(unsigned long ms)
{
    2740:	8f 92       	push	r8
    2742:	9f 92       	push	r9
    2744:	af 92       	push	r10
    2746:	bf 92       	push	r11
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	6b 01       	movw	r12, r22
    2752:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2754:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <micros>
    2758:	4b 01       	movw	r8, r22
    275a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    275c:	c1 14       	cp	r12, r1
    275e:	d1 04       	cpc	r13, r1
    2760:	e1 04       	cpc	r14, r1
    2762:	f1 04       	cpc	r15, r1
    2764:	01 f1       	breq	.+64     	; 0x27a6 <delay+0x66>
		yield();
    2766:	0e 94 66 19 	call	0x32cc	; 0x32cc <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    276a:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <micros>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	88 19       	sub	r24, r8
    2774:	99 09       	sbc	r25, r9
    2776:	aa 09       	sbc	r26, r10
    2778:	bb 09       	sbc	r27, r11
    277a:	88 3e       	cpi	r24, 0xE8	; 232
    277c:	93 40       	sbci	r25, 0x03	; 3
    277e:	a1 05       	cpc	r26, r1
    2780:	b1 05       	cpc	r27, r1
    2782:	60 f3       	brcs	.-40     	; 0x275c <delay+0x1c>
			ms--;
    2784:	21 e0       	ldi	r18, 0x01	; 1
    2786:	c2 1a       	sub	r12, r18
    2788:	d1 08       	sbc	r13, r1
    278a:	e1 08       	sbc	r14, r1
    278c:	f1 08       	sbc	r15, r1
			start += 1000;
    278e:	88 ee       	ldi	r24, 0xE8	; 232
    2790:	88 0e       	add	r8, r24
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	98 1e       	adc	r9, r24
    2796:	a1 1c       	adc	r10, r1
    2798:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    279a:	c1 14       	cp	r12, r1
    279c:	d1 04       	cpc	r13, r1
    279e:	e1 04       	cpc	r14, r1
    27a0:	f1 04       	cpc	r15, r1
    27a2:	19 f7       	brne	.-58     	; 0x276a <delay+0x2a>
    27a4:	db cf       	rjmp	.-74     	; 0x275c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	bf 90       	pop	r11
    27b0:	af 90       	pop	r10
    27b2:	9f 90       	pop	r9
    27b4:	8f 90       	pop	r8
    27b6:	08 95       	ret

000027b8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    27b8:	82 30       	cpi	r24, 0x02	; 2
    27ba:	91 05       	cpc	r25, r1
    27bc:	38 f0       	brcs	.+14     	; 0x27cc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    27c6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <delayMicroseconds+0x10>
    27cc:	08 95       	ret

000027ce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    27ce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    27d0:	84 b5       	in	r24, 0x24	; 36
    27d2:	82 60       	ori	r24, 0x02	; 2
    27d4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    27d6:	84 b5       	in	r24, 0x24	; 36
    27d8:	81 60       	ori	r24, 0x01	; 1
    27da:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    27dc:	85 b5       	in	r24, 0x25	; 37
    27de:	82 60       	ori	r24, 0x02	; 2
    27e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    27e2:	85 b5       	in	r24, 0x25	; 37
    27e4:	81 60       	ori	r24, 0x01	; 1
    27e6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    27e8:	ee e6       	ldi	r30, 0x6E	; 110
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	81 60       	ori	r24, 0x01	; 1
    27f0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    27f2:	e1 e8       	ldi	r30, 0x81	; 129
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    27f8:	80 81       	ld	r24, Z
    27fa:	82 60       	ori	r24, 0x02	; 2
    27fc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    27fe:	80 81       	ld	r24, Z
    2800:	81 60       	ori	r24, 0x01	; 1
    2802:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2804:	e0 e8       	ldi	r30, 0x80	; 128
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	81 60       	ori	r24, 0x01	; 1
    280c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    280e:	e1 eb       	ldi	r30, 0xB1	; 177
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	84 60       	ori	r24, 0x04	; 4
    2816:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2818:	e0 eb       	ldi	r30, 0xB0	; 176
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	81 60       	ori	r24, 0x01	; 1
    2820:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2822:	ea e7       	ldi	r30, 0x7A	; 122
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	84 60       	ori	r24, 0x04	; 4
    282a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    282c:	80 81       	ld	r24, Z
    282e:	82 60       	ori	r24, 0x02	; 2
    2830:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2832:	80 81       	ld	r24, Z
    2834:	81 60       	ori	r24, 0x01	; 1
    2836:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2838:	80 81       	ld	r24, Z
    283a:	80 68       	ori	r24, 0x80	; 128
    283c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    283e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2842:	08 95       	ret

00002844 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2844:	8e 30       	cpi	r24, 0x0E	; 14
    2846:	08 f0       	brcs	.+2      	; 0x284a <analogRead+0x6>
    2848:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    284a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <analog_reference>
    284e:	90 e4       	ldi	r25, 0x40	; 64
    2850:	29 9f       	mul	r18, r25
    2852:	90 01       	movw	r18, r0
    2854:	11 24       	eor	r1, r1
    2856:	87 70       	andi	r24, 0x07	; 7
    2858:	82 2b       	or	r24, r18
    285a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    285e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2862:	80 64       	ori	r24, 0x40	; 64
    2864:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2868:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    286c:	86 fd       	sbrc	r24, 6
    286e:	fc cf       	rjmp	.-8      	; 0x2868 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2870:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    2874:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2878:	90 e0       	ldi	r25, 0x00	; 0
}
    287a:	92 2b       	or	r25, r18
    287c:	08 95       	ret

0000287e <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	18 2f       	mov	r17, r24
    2886:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
	if (val == 0)
    288e:	20 97       	sbiw	r28, 0x00	; 0
    2890:	11 f4       	brne	.+4      	; 0x2896 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	04 c0       	rjmp	.+8      	; 0x289e <analogWrite+0x20>
	}
	else if (val == 255)
    2896:	cf 3f       	cpi	r28, 0xFF	; 255
    2898:	d1 05       	cpc	r29, r1
    289a:	39 f4       	brne	.+14     	; 0x28aa <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    28a6:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    28aa:	e1 2f       	mov	r30, r17
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	e8 58       	subi	r30, 0x88	; 136
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	e4 91       	lpm	r30, Z
    28b4:	e3 30       	cpi	r30, 0x03	; 3
    28b6:	f9 f0       	breq	.+62     	; 0x28f6 <analogWrite+0x78>
    28b8:	48 f4       	brcc	.+18     	; 0x28cc <analogWrite+0x4e>
    28ba:	e1 30       	cpi	r30, 0x01	; 1
    28bc:	b9 f0       	breq	.+46     	; 0x28ec <analogWrite+0x6e>
    28be:	e2 30       	cpi	r30, 0x02	; 2
    28c0:	a1 f5       	brne	.+104    	; 0x292a <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    28c2:	84 b5       	in	r24, 0x24	; 36
    28c4:	80 62       	ori	r24, 0x20	; 32
    28c6:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    28c8:	c8 bd       	out	0x28, r28	; 40
				break;
    28ca:	34 c0       	rjmp	.+104    	; 0x2934 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    28cc:	e7 30       	cpi	r30, 0x07	; 7
    28ce:	e9 f0       	breq	.+58     	; 0x290a <analogWrite+0x8c>
    28d0:	e8 30       	cpi	r30, 0x08	; 8
    28d2:	19 f1       	breq	.+70     	; 0x291a <analogWrite+0x9c>
    28d4:	e4 30       	cpi	r30, 0x04	; 4
    28d6:	49 f5       	brne	.+82     	; 0x292a <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    28d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    28dc:	80 62       	ori	r24, 0x20	; 32
    28de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    28e2:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    28e6:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    28ea:	24 c0       	rjmp	.+72     	; 0x2934 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    28ec:	84 b5       	in	r24, 0x24	; 36
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    28f2:	c7 bd       	out	0x27, r28	; 39
				break;
    28f4:	1f c0       	rjmp	.+62     	; 0x2934 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    28f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    28fa:	80 68       	ori	r24, 0x80	; 128
    28fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    2900:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2904:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    2908:	15 c0       	rjmp	.+42     	; 0x2934 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    290a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    2914:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    2918:	0d c0       	rjmp	.+26     	; 0x2934 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    291a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    291e:	80 62       	ori	r24, 0x20	; 32
    2920:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    2924:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    2928:	05 c0       	rjmp	.+10     	; 0x2934 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    292a:	c0 38       	cpi	r28, 0x80	; 128
    292c:	d1 05       	cpc	r29, r1
    292e:	0c f0       	brlt	.+2      	; 0x2932 <analogWrite+0xb4>
    2930:	b5 cf       	rjmp	.-150    	; 0x289c <analogWrite+0x1e>
    2932:	af cf       	rjmp	.-162    	; 0x2892 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	08 95       	ret

0000293c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    293c:	83 30       	cpi	r24, 0x03	; 3
    293e:	81 f0       	breq	.+32     	; 0x2960 <turnOffPWM+0x24>
    2940:	28 f4       	brcc	.+10     	; 0x294c <turnOffPWM+0x10>
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	99 f0       	breq	.+38     	; 0x296c <turnOffPWM+0x30>
    2946:	82 30       	cpi	r24, 0x02	; 2
    2948:	a1 f0       	breq	.+40     	; 0x2972 <turnOffPWM+0x36>
    294a:	08 95       	ret
    294c:	87 30       	cpi	r24, 0x07	; 7
    294e:	a9 f0       	breq	.+42     	; 0x297a <turnOffPWM+0x3e>
    2950:	88 30       	cpi	r24, 0x08	; 8
    2952:	b9 f0       	breq	.+46     	; 0x2982 <turnOffPWM+0x46>
    2954:	84 30       	cpi	r24, 0x04	; 4
    2956:	d1 f4       	brne	.+52     	; 0x298c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2958:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    295c:	8f 7d       	andi	r24, 0xDF	; 223
    295e:	03 c0       	rjmp	.+6      	; 0x2966 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2960:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2964:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2966:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    296a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    296c:	84 b5       	in	r24, 0x24	; 36
    296e:	8f 77       	andi	r24, 0x7F	; 127
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2972:	84 b5       	in	r24, 0x24	; 36
    2974:	8f 7d       	andi	r24, 0xDF	; 223
    2976:	84 bd       	out	0x24, r24	; 36
    2978:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    297a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    297e:	8f 77       	andi	r24, 0x7F	; 127
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2982:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2986:	8f 7d       	andi	r24, 0xDF	; 223
    2988:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    298c:	08 95       	ret

0000298e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	fc 01       	movw	r30, r24
    2996:	e4 57       	subi	r30, 0x74	; 116
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    299c:	fc 01       	movw	r30, r24
    299e:	e0 56       	subi	r30, 0x60	; 96
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    29a4:	88 23       	and	r24, r24
    29a6:	61 f1       	breq	.+88     	; 0x2a00 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	fc 01       	movw	r30, r24
    29b0:	e2 54       	subi	r30, 0x42	; 66
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	c5 91       	lpm	r28, Z+
    29b6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    29b8:	fc 01       	movw	r30, r24
    29ba:	ec 54       	subi	r30, 0x4C	; 76
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	a5 91       	lpm	r26, Z+
    29c0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    29c2:	61 11       	cpse	r22, r1
    29c4:	09 c0       	rjmp	.+18     	; 0x29d8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    29c6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    29c8:	f8 94       	cli
		*reg &= ~bit;
    29ca:	88 81       	ld	r24, Y
    29cc:	20 95       	com	r18
    29ce:	82 23       	and	r24, r18
    29d0:	88 83       	st	Y, r24
		*out &= ~bit;
    29d2:	ec 91       	ld	r30, X
    29d4:	2e 23       	and	r18, r30
    29d6:	0b c0       	rjmp	.+22     	; 0x29ee <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    29d8:	62 30       	cpi	r22, 0x02	; 2
    29da:	61 f4       	brne	.+24     	; 0x29f4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    29dc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    29de:	f8 94       	cli
		*reg &= ~bit;
    29e0:	88 81       	ld	r24, Y
    29e2:	32 2f       	mov	r19, r18
    29e4:	30 95       	com	r19
    29e6:	83 23       	and	r24, r19
    29e8:	88 83       	st	Y, r24
		*out |= bit;
    29ea:	ec 91       	ld	r30, X
    29ec:	2e 2b       	or	r18, r30
    29ee:	2c 93       	st	X, r18
		SREG = oldSREG;
    29f0:	9f bf       	out	0x3f, r25	; 63
    29f2:	06 c0       	rjmp	.+12     	; 0x2a00 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    29f4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    29f6:	f8 94       	cli
		*reg |= bit;
    29f8:	e8 81       	ld	r30, Y
    29fa:	2e 2b       	or	r18, r30
    29fc:	28 83       	st	Y, r18
		SREG = oldSREG;
    29fe:	8f bf       	out	0x3f, r24	; 63
	}
}
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	08 95       	ret

00002a06 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	f9 01       	movw	r30, r18
    2a12:	e8 58       	subi	r30, 0x88	; 136
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2a18:	f9 01       	movw	r30, r18
    2a1a:	e4 57       	subi	r30, 0x74	; 116
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2a20:	f9 01       	movw	r30, r18
    2a22:	e0 56       	subi	r30, 0x60	; 96
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2a28:	cc 23       	and	r28, r28
    2a2a:	c1 f0       	breq	.+48     	; 0x2a5c <digitalWrite+0x56>
    2a2c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2a2e:	81 11       	cpse	r24, r1
    2a30:	0e 94 9e 14 	call	0x293c	; 0x293c <turnOffPWM>

	out = portOutputRegister(port);
    2a34:	ec 2f       	mov	r30, r28
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	ee 0f       	add	r30, r30
    2a3a:	ff 1f       	adc	r31, r31
    2a3c:	ec 54       	subi	r30, 0x4C	; 76
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	a5 91       	lpm	r26, Z+
    2a42:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2a44:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2a46:	f8 94       	cli

	if (val == LOW) {
    2a48:	11 11       	cpse	r17, r1
    2a4a:	04 c0       	rjmp	.+8      	; 0x2a54 <digitalWrite+0x4e>
		*out &= ~bit;
    2a4c:	8c 91       	ld	r24, X
    2a4e:	d0 95       	com	r29
    2a50:	d8 23       	and	r29, r24
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2a54:	ec 91       	ld	r30, X
    2a56:	de 2b       	or	r29, r30
    2a58:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2a5a:	9f bf       	out	0x3f, r25	; 63
}
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	08 95       	ret

00002a64 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    2a64:	fc 01       	movw	r30, r24
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <free>

00002a6e <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2a74:	88 81       	ld	r24, Y
    2a76:	99 81       	ldd	r25, Y+1	; 0x01
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	11 f0       	breq	.+4      	; 0x2a80 <_ZN6String10invalidateEv+0x12>
    2a7c:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
	buffer = NULL;
    2a80:	19 82       	std	Y+1, r1	; 0x01
    2a82:	18 82       	st	Y, r1
	capacity = len = 0;
    2a84:	1d 82       	std	Y+5, r1	; 0x05
    2a86:	1c 82       	std	Y+4, r1	; 0x04
    2a88:	1b 82       	std	Y+3, r1	; 0x03
    2a8a:	1a 82       	std	Y+2, r1	; 0x02
}
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	08 95       	ret

00002a92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	ec 01       	movw	r28, r24
    2a9c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2a9e:	6f 5f       	subi	r22, 0xFF	; 255
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	88 81       	ld	r24, Y
    2aa4:	99 81       	ldd	r25, Y+1	; 0x01
    2aa6:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <realloc>
	if (newbuffer) {
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	31 f0       	breq	.+12     	; 0x2aba <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2aae:	99 83       	std	Y+1, r25	; 0x01
    2ab0:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2ab2:	1b 83       	std	Y+3, r17	; 0x03
    2ab4:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2aba:	80 e0       	ldi	r24, 0x00	; 0
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2acc:	88 81       	ld	r24, Y
    2ace:	99 81       	ldd	r25, Y+1	; 0x01
    2ad0:	89 2b       	or	r24, r25
    2ad2:	29 f0       	breq	.+10     	; 0x2ade <_ZN6String7reserveEj+0x18>
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad8:	86 17       	cp	r24, r22
    2ada:	97 07       	cpc	r25, r23
    2adc:	60 f4       	brcc	.+24     	; 0x2af6 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    2ade:	ce 01       	movw	r24, r28
    2ae0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZN6String12changeBufferEj>
    2ae4:	88 23       	and	r24, r24
    2ae6:	41 f0       	breq	.+16     	; 0x2af8 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	9d 81       	ldd	r25, Y+5	; 0x05
    2aec:	89 2b       	or	r24, r25
    2aee:	19 f4       	brne	.+6      	; 0x2af6 <_ZN6String7reserveEj+0x30>
    2af0:	e8 81       	ld	r30, Y
    2af2:	f9 81       	ldd	r31, Y+1	; 0x01
    2af4:	10 82       	st	Z, r1
    2af6:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	ec 01       	movw	r28, r24
    2b0c:	7b 01       	movw	r14, r22
    2b0e:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2b10:	ba 01       	movw	r22, r20
    2b12:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN6String7reserveEj>
    2b16:	81 11       	cpse	r24, r1
    2b18:	04 c0       	rjmp	.+8      	; 0x2b22 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN6String10invalidateEv>
		return *this;
    2b20:	07 c0       	rjmp	.+14     	; 0x2b30 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2b22:	1d 83       	std	Y+5, r17	; 0x05
    2b24:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2b26:	b7 01       	movw	r22, r14
    2b28:	88 81       	ld	r24, Y
    2b2a:	99 81       	ldd	r25, Y+1	; 0x01
    2b2c:	0e 94 b2 1b 	call	0x3764	; 0x3764 <strcpy>
	return *this;
}
    2b30:	ce 01       	movw	r24, r28
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	08 95       	ret

00002b40 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2b40:	fc 01       	movw	r30, r24
    2b42:	11 82       	std	Z+1, r1	; 0x01
    2b44:	10 82       	st	Z, r1
	capacity = 0;
    2b46:	13 82       	std	Z+3, r1	; 0x03
    2b48:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2b4a:	15 82       	std	Z+5, r1	; 0x05
    2b4c:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2b4e:	61 15       	cp	r22, r1
    2b50:	71 05       	cpc	r23, r1
    2b52:	51 f0       	breq	.+20     	; 0x2b68 <_ZN6StringC1EPKc+0x28>
    2b54:	fb 01       	movw	r30, r22
    2b56:	01 90       	ld	r0, Z+
    2b58:	00 20       	and	r0, r0
    2b5a:	e9 f7       	brne	.-6      	; 0x2b56 <_ZN6StringC1EPKc+0x16>
    2b5c:	31 97       	sbiw	r30, 0x01	; 1
    2b5e:	af 01       	movw	r20, r30
    2b60:	46 1b       	sub	r20, r22
    2b62:	57 0b       	sbc	r21, r23
    2b64:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <_ZN6String4copyEPKcj>
    2b68:	08 95       	ret

00002b6a <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/ 
bool PID::Compute()
{
    2b6a:	2f 92       	push	r2
    2b6c:	3f 92       	push	r3
    2b6e:	4f 92       	push	r4
    2b70:	5f 92       	push	r5
    2b72:	6f 92       	push	r6
    2b74:	7f 92       	push	r7
    2b76:	8f 92       	push	r8
    2b78:	9f 92       	push	r9
    2b7a:	af 92       	push	r10
    2b7c:	bf 92       	push	r11
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	2b 97       	sbiw	r28, 0x0b	; 11
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return false;
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	d8 96       	adiw	r26, 0x38	; 56
    2ba2:	bc 91       	ld	r27, X
    2ba4:	b9 83       	std	Y+1, r27	; 0x01
    2ba6:	b1 11       	cpse	r27, r1
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <_ZN3PID7ComputeEv+0x44>
    2baa:	19 82       	std	Y+1, r1	; 0x01
    2bac:	e6 c0       	rjmp	.+460    	; 0x2d7a <_ZN3PID7ComputeEv+0x210>
    2bae:	9b 87       	std	Y+11, r25	; 0x0b
    2bb0:	8a 87       	std	Y+10, r24	; 0x0a
   unsigned long now = millis();
    2bb2:	0e 94 6f 13 	call	0x26de	; 0x26de <millis>
    2bb6:	6a 83       	std	Y+2, r22	; 0x02
    2bb8:	7b 83       	std	Y+3, r23	; 0x03
    2bba:	8c 83       	std	Y+4, r24	; 0x04
    2bbc:	9d 83       	std	Y+5, r25	; 0x05
   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    2bbe:	ea 85       	ldd	r30, Y+10	; 0x0a
    2bc0:	fb 85       	ldd	r31, Y+11	; 0x0b
    2bc2:	80 a1       	ldd	r24, Z+32	; 0x20
    2bc4:	91 a1       	ldd	r25, Z+33	; 0x21
    2bc6:	a2 a1       	ldd	r26, Z+34	; 0x22
    2bc8:	b3 a1       	ldd	r27, Z+35	; 0x23
    2bca:	4a 81       	ldd	r20, Y+2	; 0x02
    2bcc:	5b 81       	ldd	r21, Y+3	; 0x03
    2bce:	6c 81       	ldd	r22, Y+4	; 0x04
    2bd0:	7d 81       	ldd	r23, Y+5	; 0x05
    2bd2:	48 1b       	sub	r20, r24
    2bd4:	59 0b       	sbc	r21, r25
    2bd6:	6a 0b       	sbc	r22, r26
    2bd8:	7b 0b       	sbc	r23, r27
    2bda:	84 a5       	ldd	r24, Z+44	; 0x2c
    2bdc:	95 a5       	ldd	r25, Z+45	; 0x2d
    2bde:	a6 a5       	ldd	r26, Z+46	; 0x2e
    2be0:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2be2:	48 17       	cp	r20, r24
    2be4:	59 07       	cpc	r21, r25
    2be6:	6a 07       	cpc	r22, r26
    2be8:	7b 07       	cpc	r23, r27
    2bea:	f8 f2       	brcs	.-66     	; 0x2baa <_ZN3PID7ComputeEv+0x40>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    2bec:	02 8c       	ldd	r0, Z+26	; 0x1a
    2bee:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2bf0:	e0 2d       	mov	r30, r0
    2bf2:	80 80       	ld	r8, Z
    2bf4:	91 80       	ldd	r9, Z+1	; 0x01
    2bf6:	a2 80       	ldd	r10, Z+2	; 0x02
    2bf8:	b3 80       	ldd	r11, Z+3	; 0x03
      double error = *mySetpoint - input;
    2bfa:	aa 85       	ldd	r26, Y+10	; 0x0a
    2bfc:	bb 85       	ldd	r27, Y+11	; 0x0b
    2bfe:	5e 96       	adiw	r26, 0x1e	; 30
    2c00:	ed 91       	ld	r30, X+
    2c02:	fc 91       	ld	r31, X
    2c04:	5f 97       	sbiw	r26, 0x1f	; 31
    2c06:	a5 01       	movw	r20, r10
    2c08:	94 01       	movw	r18, r8
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    2c16:	2b 01       	movw	r4, r22
    2c18:	3c 01       	movw	r6, r24
      ITerm+= (ki * error);
    2c1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c1e:	20 89       	ldd	r18, Z+16	; 0x10
    2c20:	31 89       	ldd	r19, Z+17	; 0x11
    2c22:	42 89       	ldd	r20, Z+18	; 0x12
    2c24:	53 89       	ldd	r21, Z+19	; 0x13
    2c26:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    2c2a:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c2c:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c2e:	94 96       	adiw	r26, 0x24	; 36
    2c30:	2d 91       	ld	r18, X+
    2c32:	3d 91       	ld	r19, X+
    2c34:	4d 91       	ld	r20, X+
    2c36:	5c 91       	ld	r21, X
    2c38:	97 97       	sbiw	r26, 0x27	; 39
    2c3a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
    2c3e:	6b 01       	movw	r12, r22
    2c40:	7c 01       	movw	r14, r24
    2c42:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c44:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c46:	64 a3       	std	Z+36, r22	; 0x24
    2c48:	75 a3       	std	Z+37, r23	; 0x25
    2c4a:	86 a3       	std	Z+38, r24	; 0x26
    2c4c:	97 a3       	std	Z+39, r25	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    2c4e:	24 a8       	ldd	r2, Z+52	; 0x34
    2c50:	35 a8       	ldd	r3, Z+53	; 0x35
    2c52:	06 a9       	ldd	r16, Z+54	; 0x36
    2c54:	17 a9       	ldd	r17, Z+55	; 0x37
    2c56:	91 01       	movw	r18, r2
    2c58:	a8 01       	movw	r20, r16
    2c5a:	0e 94 90 19 	call	0x3320	; 0x3320 <__gesf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	1c f4       	brge	.+6      	; 0x2c68 <_ZN3PID7ComputeEv+0xfe>
    2c62:	c1 01       	movw	r24, r2
    2c64:	d8 01       	movw	r26, r16
    2c66:	18 c0       	rjmp	.+48     	; 0x2c98 <_ZN3PID7ComputeEv+0x12e>
      else if(ITerm < outMin) ITerm= outMin;
    2c68:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c6a:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c6c:	d0 96       	adiw	r26, 0x30	; 48
    2c6e:	8d 91       	ld	r24, X+
    2c70:	9d 91       	ld	r25, X+
    2c72:	0d 90       	ld	r0, X+
    2c74:	bc 91       	ld	r27, X
    2c76:	a0 2d       	mov	r26, r0
    2c78:	8e 83       	std	Y+6, r24	; 0x06
    2c7a:	9f 83       	std	Y+7, r25	; 0x07
    2c7c:	a8 87       	std	Y+8, r26	; 0x08
    2c7e:	b9 87       	std	Y+9, r27	; 0x09
    2c80:	9c 01       	movw	r18, r24
    2c82:	ad 01       	movw	r20, r26
    2c84:	c7 01       	movw	r24, r14
    2c86:	b6 01       	movw	r22, r12
    2c88:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2c8c:	87 ff       	sbrs	r24, 7
    2c8e:	0a c0       	rjmp	.+20     	; 0x2ca4 <_ZN3PID7ComputeEv+0x13a>
    2c90:	8e 81       	ldd	r24, Y+6	; 0x06
    2c92:	9f 81       	ldd	r25, Y+7	; 0x07
    2c94:	a8 85       	ldd	r26, Y+8	; 0x08
    2c96:	b9 85       	ldd	r27, Y+9	; 0x09
    2c98:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c9a:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c9c:	84 a3       	std	Z+36, r24	; 0x24
    2c9e:	95 a3       	std	Z+37, r25	; 0x25
    2ca0:	a6 a3       	std	Z+38, r26	; 0x26
    2ca2:	b7 a3       	std	Z+39, r27	; 0x27
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    2ca4:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ca6:	bb 85       	ldd	r27, Y+11	; 0x0b
    2ca8:	1c 96       	adiw	r26, 0x0c	; 12
    2caa:	2d 91       	ld	r18, X+
    2cac:	3d 91       	ld	r19, X+
    2cae:	4d 91       	ld	r20, X+
    2cb0:	5c 91       	ld	r21, X
    2cb2:	1f 97       	sbiw	r26, 0x0f	; 15
    2cb4:	c3 01       	movw	r24, r6
    2cb6:	b2 01       	movw	r22, r4
    2cb8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    2cbc:	ea 85       	ldd	r30, Y+10	; 0x0a
    2cbe:	fb 85       	ldd	r31, Y+11	; 0x0b
    2cc0:	24 a1       	ldd	r18, Z+36	; 0x24
    2cc2:	35 a1       	ldd	r19, Z+37	; 0x25
    2cc4:	46 a1       	ldd	r20, Z+38	; 0x26
    2cc6:	57 a1       	ldd	r21, Z+39	; 0x27
    2cc8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__addsf3>
    2ccc:	6b 01       	movw	r12, r22
    2cce:	7c 01       	movw	r14, r24
    2cd0:	aa 85       	ldd	r26, Y+10	; 0x0a
    2cd2:	bb 85       	ldd	r27, Y+11	; 0x0b
    2cd4:	98 96       	adiw	r26, 0x28	; 40
    2cd6:	2d 91       	ld	r18, X+
    2cd8:	3d 91       	ld	r19, X+
    2cda:	4d 91       	ld	r20, X+
    2cdc:	5c 91       	ld	r21, X
    2cde:	9b 97       	sbiw	r26, 0x2b	; 43
    2ce0:	c5 01       	movw	r24, r10
    2ce2:	b4 01       	movw	r22, r8
    2ce4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    2ce8:	ea 85       	ldd	r30, Y+10	; 0x0a
    2cea:	fb 85       	ldd	r31, Y+11	; 0x0b
    2cec:	24 89       	ldd	r18, Z+20	; 0x14
    2cee:	35 89       	ldd	r19, Z+21	; 0x15
    2cf0:	46 89       	ldd	r20, Z+22	; 0x16
    2cf2:	57 89       	ldd	r21, Z+23	; 0x17
    2cf4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    2cf8:	9b 01       	movw	r18, r22
    2cfa:	ac 01       	movw	r20, r24
    2cfc:	c7 01       	movw	r24, r14
    2cfe:	b6 01       	movw	r22, r12
    2d00:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    2d04:	6b 01       	movw	r12, r22
    2d06:	7c 01       	movw	r14, r24
      
	  if(output > outMax) output = outMax;
    2d08:	9b 01       	movw	r18, r22
    2d0a:	ac 01       	movw	r20, r24
    2d0c:	b1 01       	movw	r22, r2
    2d0e:	c8 01       	movw	r24, r16
    2d10:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2d14:	87 fd       	sbrc	r24, 7
    2d16:	17 c0       	rjmp	.+46     	; 0x2d46 <_ZN3PID7ComputeEv+0x1dc>
      else if(output < outMin) output = outMin;
    2d18:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d1c:	d0 96       	adiw	r26, 0x30	; 48
    2d1e:	2c 90       	ld	r2, X
    2d20:	d0 97       	sbiw	r26, 0x30	; 48
    2d22:	d1 96       	adiw	r26, 0x31	; 49
    2d24:	3c 90       	ld	r3, X
    2d26:	d1 97       	sbiw	r26, 0x31	; 49
    2d28:	d2 96       	adiw	r26, 0x32	; 50
    2d2a:	0c 91       	ld	r16, X
    2d2c:	d2 97       	sbiw	r26, 0x32	; 50
    2d2e:	d3 96       	adiw	r26, 0x33	; 51
    2d30:	1c 91       	ld	r17, X
    2d32:	91 01       	movw	r18, r2
    2d34:	a8 01       	movw	r20, r16
    2d36:	b6 01       	movw	r22, r12
    2d38:	c7 01       	movw	r24, r14
    2d3a:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2d3e:	87 fd       	sbrc	r24, 7
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <_ZN3PID7ComputeEv+0x1dc>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    2d42:	16 01       	movw	r2, r12
    2d44:	87 01       	movw	r16, r14
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    2d46:	aa 85       	ldd	r26, Y+10	; 0x0a
    2d48:	bb 85       	ldd	r27, Y+11	; 0x0b
    2d4a:	5c 96       	adiw	r26, 0x1c	; 28
    2d4c:	ed 91       	ld	r30, X+
    2d4e:	fc 91       	ld	r31, X
    2d50:	5d 97       	sbiw	r26, 0x1d	; 29
    2d52:	c1 01       	movw	r24, r2
    2d54:	d8 01       	movw	r26, r16
    2d56:	80 83       	st	Z, r24
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	a2 83       	std	Z+2, r26	; 0x02
    2d5c:	b3 83       	std	Z+3, r27	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    2d5e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d60:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d62:	80 a6       	std	Z+40, r8	; 0x28
    2d64:	91 a6       	std	Z+41, r9	; 0x29
    2d66:	a2 a6       	std	Z+42, r10	; 0x2a
    2d68:	b3 a6       	std	Z+43, r11	; 0x2b
      lastTime = now;
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6e:	ac 81       	ldd	r26, Y+4	; 0x04
    2d70:	bd 81       	ldd	r27, Y+5	; 0x05
    2d72:	80 a3       	std	Z+32, r24	; 0x20
    2d74:	91 a3       	std	Z+33, r25	; 0x21
    2d76:	a2 a3       	std	Z+34, r26	; 0x22
    2d78:	b3 a3       	std	Z+35, r27	; 0x23
	  return true;
   }
   else return false;
}
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	2b 96       	adiw	r28, 0x0b	; 11
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
    2d98:	bf 90       	pop	r11
    2d9a:	af 90       	pop	r10
    2d9c:	9f 90       	pop	r9
    2d9e:	8f 90       	pop	r8
    2da0:	7f 90       	pop	r7
    2da2:	6f 90       	pop	r6
    2da4:	5f 90       	pop	r5
    2da6:	4f 90       	pop	r4
    2da8:	3f 90       	pop	r3
    2daa:	2f 90       	pop	r2
    2dac:	08 95       	ret

00002dae <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    2dae:	4f 92       	push	r4
    2db0:	5f 92       	push	r5
    2db2:	6f 92       	push	r6
    2db4:	7f 92       	push	r7
    2db6:	8f 92       	push	r8
    2db8:	9f 92       	push	r9
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <_ZN3PID10SetTuningsEddd+0x22>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <_ZN3PID10SetTuningsEddd+0x24>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <_ZN3PID10SetTuningsEddd+0x26>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	2a 01       	movw	r4, r20
    2dde:	3b 01       	movw	r6, r22
    2de0:	48 01       	movw	r8, r16
    2de2:	59 01       	movw	r10, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	a9 01       	movw	r20, r18
    2dea:	c3 01       	movw	r24, r6
    2dec:	b2 01       	movw	r22, r4
    2dee:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2df2:	87 fd       	sbrc	r24, 7
    2df4:	7f c0       	rjmp	.+254    	; 0x2ef4 <_ZN3PID10SetTuningsEddd+0x146>
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	a9 01       	movw	r20, r18
    2dfc:	c5 01       	movw	r24, r10
    2dfe:	b4 01       	movw	r22, r8
    2e00:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2e04:	87 fd       	sbrc	r24, 7
    2e06:	76 c0       	rjmp	.+236    	; 0x2ef4 <_ZN3PID10SetTuningsEddd+0x146>
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	a9 01       	movw	r20, r18
    2e0e:	c7 01       	movw	r24, r14
    2e10:	b6 01       	movw	r22, r12
    2e12:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    2e16:	87 fd       	sbrc	r24, 7
    2e18:	6d c0       	rjmp	.+218    	; 0x2ef4 <_ZN3PID10SetTuningsEddd+0x146>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    2e1a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e1c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e1e:	40 82       	st	Z, r4
    2e20:	51 82       	std	Z+1, r5	; 0x01
    2e22:	62 82       	std	Z+2, r6	; 0x02
    2e24:	73 82       	std	Z+3, r7	; 0x03
    2e26:	84 82       	std	Z+4, r8	; 0x04
    2e28:	95 82       	std	Z+5, r9	; 0x05
    2e2a:	a6 82       	std	Z+6, r10	; 0x06
    2e2c:	b7 82       	std	Z+7, r11	; 0x07
    2e2e:	c0 86       	std	Z+8, r12	; 0x08
    2e30:	d1 86       	std	Z+9, r13	; 0x09
    2e32:	e2 86       	std	Z+10, r14	; 0x0a
    2e34:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    2e36:	64 a5       	ldd	r22, Z+44	; 0x2c
    2e38:	75 a5       	ldd	r23, Z+45	; 0x2d
    2e3a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e3c:	97 a5       	ldd	r25, Z+47	; 0x2f
    2e3e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatunsisf>
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a e7       	ldi	r20, 0x7A	; 122
    2e48:	54 e4       	ldi	r21, 0x44	; 68
    2e4a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    2e4e:	69 83       	std	Y+1, r22	; 0x01
    2e50:	7a 83       	std	Y+2, r23	; 0x02
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	9c 83       	std	Y+4, r25	; 0x04
   kp = Kp;
    2e56:	ed 81       	ldd	r30, Y+5	; 0x05
    2e58:	fe 81       	ldd	r31, Y+6	; 0x06
    2e5a:	44 86       	std	Z+12, r4	; 0x0c
    2e5c:	55 86       	std	Z+13, r5	; 0x0d
    2e5e:	66 86       	std	Z+14, r6	; 0x0e
    2e60:	77 86       	std	Z+15, r7	; 0x0f
   ki = Ki * SampleTimeInSec;
    2e62:	9b 01       	movw	r18, r22
    2e64:	ac 01       	movw	r20, r24
    2e66:	c5 01       	movw	r24, r10
    2e68:	b4 01       	movw	r22, r8
    2e6a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    2e6e:	4b 01       	movw	r8, r22
    2e70:	5c 01       	movw	r10, r24
    2e72:	ed 81       	ldd	r30, Y+5	; 0x05
    2e74:	fe 81       	ldd	r31, Y+6	; 0x06
    2e76:	60 8b       	std	Z+16, r22	; 0x10
    2e78:	71 8b       	std	Z+17, r23	; 0x11
    2e7a:	82 8b       	std	Z+18, r24	; 0x12
    2e7c:	93 8b       	std	Z+19, r25	; 0x13
   kd = Kd / SampleTimeInSec;
    2e7e:	29 81       	ldd	r18, Y+1	; 0x01
    2e80:	3a 81       	ldd	r19, Y+2	; 0x02
    2e82:	4b 81       	ldd	r20, Y+3	; 0x03
    2e84:	5c 81       	ldd	r21, Y+4	; 0x04
    2e86:	c7 01       	movw	r24, r14
    2e88:	b6 01       	movw	r22, r12
    2e8a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    2e8e:	6b 01       	movw	r12, r22
    2e90:	7c 01       	movw	r14, r24
    2e92:	ed 81       	ldd	r30, Y+5	; 0x05
    2e94:	fe 81       	ldd	r31, Y+6	; 0x06
    2e96:	64 8b       	std	Z+20, r22	; 0x14
    2e98:	75 8b       	std	Z+21, r23	; 0x15
    2e9a:	86 8b       	std	Z+22, r24	; 0x16
    2e9c:	97 8b       	std	Z+23, r25	; 0x17
 
  if(controllerDirection ==REVERSE)
    2e9e:	80 8d       	ldd	r24, Z+24	; 0x18
    2ea0:	91 8d       	ldd	r25, Z+25	; 0x19
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	39 f5       	brne	.+78     	; 0x2ef4 <_ZN3PID10SetTuningsEddd+0x146>
   {
      kp = (0 - kp);
    2ea6:	a3 01       	movw	r20, r6
    2ea8:	92 01       	movw	r18, r4
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	cb 01       	movw	r24, r22
    2eb0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    2eb4:	ed 81       	ldd	r30, Y+5	; 0x05
    2eb6:	fe 81       	ldd	r31, Y+6	; 0x06
    2eb8:	64 87       	std	Z+12, r22	; 0x0c
    2eba:	75 87       	std	Z+13, r23	; 0x0d
    2ebc:	86 87       	std	Z+14, r24	; 0x0e
    2ebe:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    2ec0:	a5 01       	movw	r20, r10
    2ec2:	94 01       	movw	r18, r8
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	cb 01       	movw	r24, r22
    2eca:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    2ece:	ed 81       	ldd	r30, Y+5	; 0x05
    2ed0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ed2:	60 8b       	std	Z+16, r22	; 0x10
    2ed4:	71 8b       	std	Z+17, r23	; 0x11
    2ed6:	82 8b       	std	Z+18, r24	; 0x12
    2ed8:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    2eda:	a7 01       	movw	r20, r14
    2edc:	96 01       	movw	r18, r12
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    2ee8:	ed 81       	ldd	r30, Y+5	; 0x05
    2eea:	fe 81       	ldd	r31, Y+6	; 0x06
    2eec:	64 8b       	std	Z+20, r22	; 0x14
    2eee:	75 8b       	std	Z+21, r23	; 0x15
    2ef0:	86 8b       	std	Z+22, r24	; 0x16
    2ef2:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    2ef4:	26 96       	adiw	r28, 0x06	; 6
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	df 90       	pop	r13
    2f0e:	cf 90       	pop	r12
    2f10:	bf 90       	pop	r11
    2f12:	af 90       	pop	r10
    2f14:	9f 90       	pop	r9
    2f16:	8f 90       	pop	r8
    2f18:	7f 90       	pop	r7
    2f1a:	6f 90       	pop	r6
    2f1c:	5f 90       	pop	r5
    2f1e:	4f 90       	pop	r4
    2f20:	08 95       	ret

00002f22 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
   if (NewSampleTime > 0)
    2f36:	16 16       	cp	r1, r22
    2f38:	17 06       	cpc	r1, r23
    2f3a:	b4 f5       	brge	.+108    	; 0x2fa8 <_ZN3PID13SetSampleTimeEi+0x86>
    2f3c:	6b 01       	movw	r12, r22
    2f3e:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    2f40:	0d 2c       	mov	r0, r13
    2f42:	00 0c       	add	r0, r0
    2f44:	ee 08       	sbc	r14, r14
    2f46:	ff 08       	sbc	r15, r15
    2f48:	c7 01       	movw	r24, r14
    2f4a:	b6 01       	movw	r22, r12
    2f4c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__floatsisf>
    2f50:	4b 01       	movw	r8, r22
    2f52:	5c 01       	movw	r10, r24
    2f54:	6c a5       	ldd	r22, Y+44	; 0x2c
    2f56:	7d a5       	ldd	r23, Y+45	; 0x2d
    2f58:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f5a:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f5c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__floatunsisf>
    2f60:	9b 01       	movw	r18, r22
    2f62:	ac 01       	movw	r20, r24
    2f64:	c5 01       	movw	r24, r10
    2f66:	b4 01       	movw	r22, r8
    2f68:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    2f6c:	4b 01       	movw	r8, r22
    2f6e:	5c 01       	movw	r10, r24
      ki *= ratio;
    2f70:	9b 01       	movw	r18, r22
    2f72:	ac 01       	movw	r20, r24
    2f74:	68 89       	ldd	r22, Y+16	; 0x10
    2f76:	79 89       	ldd	r23, Y+17	; 0x11
    2f78:	8a 89       	ldd	r24, Y+18	; 0x12
    2f7a:	9b 89       	ldd	r25, Y+19	; 0x13
    2f7c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
    2f80:	68 8b       	std	Y+16, r22	; 0x10
    2f82:	79 8b       	std	Y+17, r23	; 0x11
    2f84:	8a 8b       	std	Y+18, r24	; 0x12
    2f86:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    2f88:	a5 01       	movw	r20, r10
    2f8a:	94 01       	movw	r18, r8
    2f8c:	6c 89       	ldd	r22, Y+20	; 0x14
    2f8e:	7d 89       	ldd	r23, Y+21	; 0x15
    2f90:	8e 89       	ldd	r24, Y+22	; 0x16
    2f92:	9f 89       	ldd	r25, Y+23	; 0x17
    2f94:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__divsf3>
    2f98:	6c 8b       	std	Y+20, r22	; 0x14
    2f9a:	7d 8b       	std	Y+21, r23	; 0x15
    2f9c:	8e 8b       	std	Y+22, r24	; 0x16
    2f9e:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    2fa0:	cc a6       	std	Y+44, r12	; 0x2c
    2fa2:	dd a6       	std	Y+45, r13	; 0x2d
    2fa4:	ee a6       	std	Y+46, r14	; 0x2e
    2fa6:	ff a6       	std	Y+47, r15	; 0x2f
   }
}
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
    2fb4:	bf 90       	pop	r11
    2fb6:	af 90       	pop	r10
    2fb8:	9f 90       	pop	r9
    2fba:	8f 90       	pop	r8
    2fbc:	08 95       	ret

00002fbe <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    2fbe:	2f 92       	push	r2
    2fc0:	3f 92       	push	r3
    2fc2:	4f 92       	push	r4
    2fc4:	5f 92       	push	r5
    2fc6:	6f 92       	push	r6
    2fc8:	7f 92       	push	r7
    2fca:	8f 92       	push	r8
    2fcc:	9f 92       	push	r9
    2fce:	af 92       	push	r10
    2fd0:	bf 92       	push	r11
    2fd2:	cf 92       	push	r12
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	ec 01       	movw	r28, r24
    2fe4:	6a 01       	movw	r12, r20
    2fe6:	7b 01       	movw	r14, r22
    2fe8:	48 01       	movw	r8, r16
    2fea:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    2fec:	a9 01       	movw	r20, r18
    2fee:	98 01       	movw	r18, r16
    2ff0:	c7 01       	movw	r24, r14
    2ff2:	b6 01       	movw	r22, r12
    2ff4:	0e 94 90 19 	call	0x3320	; 0x3320 <__gesf2>
    2ff8:	87 ff       	sbrs	r24, 7
    2ffa:	4e c0       	rjmp	.+156    	; 0x3098 <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    2ffc:	c8 aa       	std	Y+48, r12	; 0x30
    2ffe:	d9 aa       	std	Y+49, r13	; 0x31
    3000:	ea aa       	std	Y+50, r14	; 0x32
    3002:	fb aa       	std	Y+51, r15	; 0x33
   outMax = Max;
    3004:	8c aa       	std	Y+52, r8	; 0x34
    3006:	9d aa       	std	Y+53, r9	; 0x35
    3008:	ae aa       	std	Y+54, r10	; 0x36
    300a:	bf aa       	std	Y+55, r11	; 0x37
 
   if(inAuto)
    300c:	88 ad       	ldd	r24, Y+56	; 0x38
    300e:	88 23       	and	r24, r24
    3010:	09 f4       	brne	.+2      	; 0x3014 <_ZN3PID15SetOutputLimitsEdd+0x56>
    3012:	42 c0       	rjmp	.+132    	; 0x3098 <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    3014:	2c 8c       	ldd	r2, Y+28	; 0x1c
    3016:	3d 8c       	ldd	r3, Y+29	; 0x1d
    3018:	f1 01       	movw	r30, r2
    301a:	40 80       	ld	r4, Z
    301c:	51 80       	ldd	r5, Z+1	; 0x01
    301e:	62 80       	ldd	r6, Z+2	; 0x02
    3020:	73 80       	ldd	r7, Z+3	; 0x03
    3022:	a3 01       	movw	r20, r6
    3024:	92 01       	movw	r18, r4
    3026:	c5 01       	movw	r24, r10
    3028:	b4 01       	movw	r22, r8
    302a:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    302e:	87 ff       	sbrs	r24, 7
    3030:	06 c0       	rjmp	.+12     	; 0x303e <_ZN3PID15SetOutputLimitsEdd+0x80>
    3032:	f1 01       	movw	r30, r2
    3034:	80 82       	st	Z, r8
    3036:	91 82       	std	Z+1, r9	; 0x01
    3038:	a2 82       	std	Z+2, r10	; 0x02
    303a:	b3 82       	std	Z+3, r11	; 0x03
    303c:	0d c0       	rjmp	.+26     	; 0x3058 <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    303e:	a3 01       	movw	r20, r6
    3040:	92 01       	movw	r18, r4
    3042:	c7 01       	movw	r24, r14
    3044:	b6 01       	movw	r22, r12
    3046:	0e 94 90 19 	call	0x3320	; 0x3320 <__gesf2>
    304a:	18 16       	cp	r1, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <_ZN3PID15SetOutputLimitsEdd+0x9a>
    304e:	f1 01       	movw	r30, r2
    3050:	c0 82       	st	Z, r12
    3052:	d1 82       	std	Z+1, r13	; 0x01
    3054:	e2 82       	std	Z+2, r14	; 0x02
    3056:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    3058:	8c a0       	ldd	r8, Y+36	; 0x24
    305a:	9d a0       	ldd	r9, Y+37	; 0x25
    305c:	ae a0       	ldd	r10, Y+38	; 0x26
    305e:	bf a0       	ldd	r11, Y+39	; 0x27
    3060:	cc a8       	ldd	r12, Y+52	; 0x34
    3062:	dd a8       	ldd	r13, Y+53	; 0x35
    3064:	ee a8       	ldd	r14, Y+54	; 0x36
    3066:	ff a8       	ldd	r15, Y+55	; 0x37
    3068:	a7 01       	movw	r20, r14
    306a:	96 01       	movw	r18, r12
    306c:	c5 01       	movw	r24, r10
    306e:	b4 01       	movw	r22, r8
    3070:	0e 94 90 19 	call	0x3320	; 0x3320 <__gesf2>
    3074:	18 16       	cp	r1, r24
    3076:	64 f0       	brlt	.+24     	; 0x3090 <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(ITerm < outMin) ITerm= outMin;
    3078:	c8 a8       	ldd	r12, Y+48	; 0x30
    307a:	d9 a8       	ldd	r13, Y+49	; 0x31
    307c:	ea a8       	ldd	r14, Y+50	; 0x32
    307e:	fb a8       	ldd	r15, Y+51	; 0x33
    3080:	a7 01       	movw	r20, r14
    3082:	96 01       	movw	r18, r12
    3084:	c5 01       	movw	r24, r10
    3086:	b4 01       	movw	r22, r8
    3088:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    308c:	87 ff       	sbrs	r24, 7
    308e:	04 c0       	rjmp	.+8      	; 0x3098 <_ZN3PID15SetOutputLimitsEdd+0xda>
    3090:	cc a2       	std	Y+36, r12	; 0x24
    3092:	dd a2       	std	Y+37, r13	; 0x25
    3094:	ee a2       	std	Y+38, r14	; 0x26
    3096:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	df 90       	pop	r13
    30a6:	cf 90       	pop	r12
    30a8:	bf 90       	pop	r11
    30aa:	af 90       	pop	r10
    30ac:	9f 90       	pop	r9
    30ae:	8f 90       	pop	r8
    30b0:	7f 90       	pop	r7
    30b2:	6f 90       	pop	r6
    30b4:	5f 90       	pop	r5
    30b6:	4f 90       	pop	r4
    30b8:	3f 90       	pop	r3
    30ba:	2f 90       	pop	r2
    30bc:	08 95       	ret

000030be <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    30d4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    30d6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    30d8:	c0 80       	ld	r12, Z
    30da:	d1 80       	ldd	r13, Z+1	; 0x01
    30dc:	e2 80       	ldd	r14, Z+2	; 0x02
    30de:	f3 80       	ldd	r15, Z+3	; 0x03
    30e0:	cc a2       	std	Y+36, r12	; 0x24
    30e2:	dd a2       	std	Y+37, r13	; 0x25
    30e4:	ee a2       	std	Y+38, r14	; 0x26
    30e6:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    30e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    30ea:	fb 8d       	ldd	r31, Y+27	; 0x1b
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	a2 81       	ldd	r26, Z+2	; 0x02
    30f2:	b3 81       	ldd	r27, Z+3	; 0x03
    30f4:	88 a7       	std	Y+40, r24	; 0x28
    30f6:	99 a7       	std	Y+41, r25	; 0x29
    30f8:	aa a7       	std	Y+42, r26	; 0x2a
    30fa:	bb a7       	std	Y+43, r27	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    30fc:	8c a8       	ldd	r8, Y+52	; 0x34
    30fe:	9d a8       	ldd	r9, Y+53	; 0x35
    3100:	ae a8       	ldd	r10, Y+54	; 0x36
    3102:	bf a8       	ldd	r11, Y+55	; 0x37
    3104:	a5 01       	movw	r20, r10
    3106:	94 01       	movw	r18, r8
    3108:	c7 01       	movw	r24, r14
    310a:	b6 01       	movw	r22, r12
    310c:	0e 94 90 19 	call	0x3320	; 0x3320 <__gesf2>
    3110:	18 16       	cp	r1, r24
    3112:	64 f0       	brlt	.+24     	; 0x312c <_ZN3PID10InitializeEv+0x6e>
   else if(ITerm < outMin) ITerm = outMin;
    3114:	88 a8       	ldd	r8, Y+48	; 0x30
    3116:	99 a8       	ldd	r9, Y+49	; 0x31
    3118:	aa a8       	ldd	r10, Y+50	; 0x32
    311a:	bb a8       	ldd	r11, Y+51	; 0x33
    311c:	a5 01       	movw	r20, r10
    311e:	94 01       	movw	r18, r8
    3120:	c7 01       	movw	r24, r14
    3122:	b6 01       	movw	r22, r12
    3124:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    3128:	87 ff       	sbrs	r24, 7
    312a:	04 c0       	rjmp	.+8      	; 0x3134 <_ZN3PID10InitializeEv+0x76>
    312c:	8c a2       	std	Y+36, r8	; 0x24
    312e:	9d a2       	std	Y+37, r9	; 0x25
    3130:	ae a2       	std	Y+38, r10	; 0x26
    3132:	bf a2       	std	Y+39, r11	; 0x27
}
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret

0000314a <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    3152:	11 e0       	ldi	r17, 0x01	; 1
    3154:	61 30       	cpi	r22, 0x01	; 1
    3156:	71 05       	cpc	r23, r1
    3158:	09 f0       	breq	.+2      	; 0x315c <_ZN3PID7SetModeEi+0x12>
    315a:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    315c:	98 ad       	ldd	r25, Y+56	; 0x38
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	89 27       	eor	r24, r25
    3162:	18 13       	cpse	r17, r24
    3164:	03 c0       	rjmp	.+6      	; 0x316c <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    3166:	ce 01       	movw	r24, r28
    3168:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    316c:	18 af       	std	Y+56, r17	; 0x38
}
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	08 95       	ret

00003176 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	ec 01       	movw	r28, r24
    3180:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    3182:	88 ad       	ldd	r24, Y+56	; 0x38
    3184:	88 23       	and	r24, r24
    3186:	61 f1       	breq	.+88     	; 0x31e0 <_ZN3PID22SetControllerDirectionEi+0x6a>
    3188:	88 8d       	ldd	r24, Y+24	; 0x18
    318a:	99 8d       	ldd	r25, Y+25	; 0x19
    318c:	86 17       	cp	r24, r22
    318e:	97 07       	cpc	r25, r23
    3190:	39 f1       	breq	.+78     	; 0x31e0 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    3192:	2c 85       	ldd	r18, Y+12	; 0x0c
    3194:	3d 85       	ldd	r19, Y+13	; 0x0d
    3196:	4e 85       	ldd	r20, Y+14	; 0x0e
    3198:	5f 85       	ldd	r21, Y+15	; 0x0f
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	cb 01       	movw	r24, r22
    31a0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    31a4:	6c 87       	std	Y+12, r22	; 0x0c
    31a6:	7d 87       	std	Y+13, r23	; 0x0d
    31a8:	8e 87       	std	Y+14, r24	; 0x0e
    31aa:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    31ac:	28 89       	ldd	r18, Y+16	; 0x10
    31ae:	39 89       	ldd	r19, Y+17	; 0x11
    31b0:	4a 89       	ldd	r20, Y+18	; 0x12
    31b2:	5b 89       	ldd	r21, Y+19	; 0x13
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	cb 01       	movw	r24, r22
    31ba:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    31be:	68 8b       	std	Y+16, r22	; 0x10
    31c0:	79 8b       	std	Y+17, r23	; 0x11
    31c2:	8a 8b       	std	Y+18, r24	; 0x12
    31c4:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    31c6:	2c 89       	ldd	r18, Y+20	; 0x14
    31c8:	3d 89       	ldd	r19, Y+21	; 0x15
    31ca:	4e 89       	ldd	r20, Y+22	; 0x16
    31cc:	5f 89       	ldd	r21, Y+23	; 0x17
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	cb 01       	movw	r24, r22
    31d4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__subsf3>
    31d8:	6c 8b       	std	Y+20, r22	; 0x14
    31da:	7d 8b       	std	Y+21, r23	; 0x15
    31dc:	8e 8b       	std	Y+22, r24	; 0x16
    31de:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    31e0:	19 8f       	std	Y+25, r17	; 0x19
    31e2:	08 8f       	std	Y+24, r16	; 0x18
}
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	08 95       	ret

000031ee <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    31ee:	4f 92       	push	r4
    31f0:	5f 92       	push	r5
    31f2:	6f 92       	push	r6
    31f4:	7f 92       	push	r7
    31f6:	8f 92       	push	r8
    31f8:	9f 92       	push	r9
    31fa:	af 92       	push	r10
    31fc:	bf 92       	push	r11
    31fe:	cf 92       	push	r12
    3200:	df 92       	push	r13
    3202:	ef 92       	push	r14
    3204:	ff 92       	push	r15
    3206:	0f 93       	push	r16
    3208:	1f 93       	push	r17
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	00 d0       	rcall	.+0      	; 0x3210 <_ZN3PIDC1EPdS0_S0_dddi+0x22>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <_ZN3PIDC1EPdS0_S0_dddi+0x24>
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	4c 01       	movw	r8, r24
    3218:	27 01       	movw	r4, r14
    321a:	38 01       	movw	r6, r16
    321c:	a9 82       	std	Y+1, r10	; 0x01
    321e:	ba 82       	std	Y+2, r11	; 0x02
    3220:	cb 82       	std	Y+3, r12	; 0x03
    3222:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	
    myOutput = Output;
    3224:	fc 01       	movw	r30, r24
    3226:	55 8f       	std	Z+29, r21	; 0x1d
    3228:	44 8f       	std	Z+28, r20	; 0x1c
    myInput = Input;
    322a:	73 8f       	std	Z+27, r23	; 0x1b
    322c:	62 8f       	std	Z+26, r22	; 0x1a
    mySetpoint = Setpoint;
    322e:	37 8f       	std	Z+31, r19	; 0x1f
    3230:	26 8f       	std	Z+30, r18	; 0x1e
	inAuto = false;
    3232:	10 ae       	std	Z+56, r1	; 0x38
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    3234:	10 aa       	std	Z+48, r1	; 0x30
    3236:	11 aa       	std	Z+49, r1	; 0x31
    3238:	12 aa       	std	Z+50, r1	; 0x32
    323a:	13 aa       	std	Z+51, r1	; 0x33
   outMax = Max;
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	af e7       	ldi	r26, 0x7F	; 127
    3242:	b3 e4       	ldi	r27, 0x43	; 67
    3244:	84 ab       	std	Z+52, r24	; 0x34
    3246:	95 ab       	std	Z+53, r25	; 0x35
    3248:	a6 ab       	std	Z+54, r26	; 0x36
    324a:	b7 ab       	std	Z+55, r27	; 0x37
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    324c:	84 e6       	ldi	r24, 0x64	; 100
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a0 e0       	ldi	r26, 0x00	; 0
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	84 a7       	std	Z+44, r24	; 0x2c
    3256:	95 a7       	std	Z+45, r25	; 0x2d
    3258:	a6 a7       	std	Z+46, r26	; 0x2e
    325a:	b7 a7       	std	Z+47, r27	; 0x2f

    PID::SetControllerDirection(ControllerDirection);
    325c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    325e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3260:	c4 01       	movw	r24, r8
    3262:	0e 94 bb 18 	call	0x3176	; 0x3176 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    3266:	cf 88       	ldd	r12, Y+23	; 0x17
    3268:	d8 8c       	ldd	r13, Y+24	; 0x18
    326a:	e9 8c       	ldd	r14, Y+25	; 0x19
    326c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    326e:	09 81       	ldd	r16, Y+1	; 0x01
    3270:	1a 81       	ldd	r17, Y+2	; 0x02
    3272:	2b 81       	ldd	r18, Y+3	; 0x03
    3274:	3c 81       	ldd	r19, Y+4	; 0x04
    3276:	b3 01       	movw	r22, r6
    3278:	a2 01       	movw	r20, r4
    327a:	c4 01       	movw	r24, r8
    327c:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    3280:	0e 94 6f 13 	call	0x26de	; 0x26de <millis>
    3284:	f4 01       	movw	r30, r8
    3286:	04 a5       	ldd	r16, Z+44	; 0x2c
    3288:	15 a5       	ldd	r17, Z+45	; 0x2d
    328a:	26 a5       	ldd	r18, Z+46	; 0x2e
    328c:	37 a5       	ldd	r19, Z+47	; 0x2f
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	80 1b       	sub	r24, r16
    3294:	91 0b       	sbc	r25, r17
    3296:	a2 0b       	sbc	r26, r18
    3298:	b3 0b       	sbc	r27, r19
    329a:	80 a3       	std	Z+32, r24	; 0x20
    329c:	91 a3       	std	Z+33, r25	; 0x21
    329e:	a2 a3       	std	Z+34, r26	; 0x22
    32a0:	b3 a3       	std	Z+35, r27	; 0x23
}
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	1f 91       	pop	r17
    32b0:	0f 91       	pop	r16
    32b2:	ff 90       	pop	r15
    32b4:	ef 90       	pop	r14
    32b6:	df 90       	pop	r13
    32b8:	cf 90       	pop	r12
    32ba:	bf 90       	pop	r11
    32bc:	af 90       	pop	r10
    32be:	9f 90       	pop	r9
    32c0:	8f 90       	pop	r8
    32c2:	7f 90       	pop	r7
    32c4:	6f 90       	pop	r6
    32c6:	5f 90       	pop	r5
    32c8:	4f 90       	pop	r4
    32ca:	08 95       	ret

000032cc <yield>:
    32cc:	08 95       	ret

000032ce <__cmpsf2>:
    32ce:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fp_cmp>
    32d2:	08 f4       	brcc	.+2      	; 0x32d6 <__cmpsf2+0x8>
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	08 95       	ret

000032d8 <__fp_cmp>:
    32d8:	99 0f       	add	r25, r25
    32da:	00 08       	sbc	r0, r0
    32dc:	55 0f       	add	r21, r21
    32de:	aa 0b       	sbc	r26, r26
    32e0:	e0 e8       	ldi	r30, 0x80	; 128
    32e2:	fe ef       	ldi	r31, 0xFE	; 254
    32e4:	16 16       	cp	r1, r22
    32e6:	17 06       	cpc	r1, r23
    32e8:	e8 07       	cpc	r30, r24
    32ea:	f9 07       	cpc	r31, r25
    32ec:	c0 f0       	brcs	.+48     	; 0x331e <__fp_cmp+0x46>
    32ee:	12 16       	cp	r1, r18
    32f0:	13 06       	cpc	r1, r19
    32f2:	e4 07       	cpc	r30, r20
    32f4:	f5 07       	cpc	r31, r21
    32f6:	98 f0       	brcs	.+38     	; 0x331e <__fp_cmp+0x46>
    32f8:	62 1b       	sub	r22, r18
    32fa:	73 0b       	sbc	r23, r19
    32fc:	84 0b       	sbc	r24, r20
    32fe:	95 0b       	sbc	r25, r21
    3300:	39 f4       	brne	.+14     	; 0x3310 <__fp_cmp+0x38>
    3302:	0a 26       	eor	r0, r26
    3304:	61 f0       	breq	.+24     	; 0x331e <__fp_cmp+0x46>
    3306:	23 2b       	or	r18, r19
    3308:	24 2b       	or	r18, r20
    330a:	25 2b       	or	r18, r21
    330c:	21 f4       	brne	.+8      	; 0x3316 <__fp_cmp+0x3e>
    330e:	08 95       	ret
    3310:	0a 26       	eor	r0, r26
    3312:	09 f4       	brne	.+2      	; 0x3316 <__fp_cmp+0x3e>
    3314:	a1 40       	sbci	r26, 0x01	; 1
    3316:	a6 95       	lsr	r26
    3318:	8f ef       	ldi	r24, 0xFF	; 255
    331a:	81 1d       	adc	r24, r1
    331c:	81 1d       	adc	r24, r1
    331e:	08 95       	ret

00003320 <__gesf2>:
    3320:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fp_cmp>
    3324:	08 f4       	brcc	.+2      	; 0x3328 <__gesf2+0x8>
    3326:	8f ef       	ldi	r24, 0xFF	; 255
    3328:	08 95       	ret

0000332a <__unordsf2>:
    332a:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fp_cmp>
    332e:	88 0b       	sbc	r24, r24
    3330:	99 0b       	sbc	r25, r25
    3332:	08 95       	ret

00003334 <__udivmodsi4>:
    3334:	a1 e2       	ldi	r26, 0x21	; 33
    3336:	1a 2e       	mov	r1, r26
    3338:	aa 1b       	sub	r26, r26
    333a:	bb 1b       	sub	r27, r27
    333c:	fd 01       	movw	r30, r26
    333e:	0d c0       	rjmp	.+26     	; 0x335a <__udivmodsi4_ep>

00003340 <__udivmodsi4_loop>:
    3340:	aa 1f       	adc	r26, r26
    3342:	bb 1f       	adc	r27, r27
    3344:	ee 1f       	adc	r30, r30
    3346:	ff 1f       	adc	r31, r31
    3348:	a2 17       	cp	r26, r18
    334a:	b3 07       	cpc	r27, r19
    334c:	e4 07       	cpc	r30, r20
    334e:	f5 07       	cpc	r31, r21
    3350:	20 f0       	brcs	.+8      	; 0x335a <__udivmodsi4_ep>
    3352:	a2 1b       	sub	r26, r18
    3354:	b3 0b       	sbc	r27, r19
    3356:	e4 0b       	sbc	r30, r20
    3358:	f5 0b       	sbc	r31, r21

0000335a <__udivmodsi4_ep>:
    335a:	66 1f       	adc	r22, r22
    335c:	77 1f       	adc	r23, r23
    335e:	88 1f       	adc	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	1a 94       	dec	r1
    3364:	69 f7       	brne	.-38     	; 0x3340 <__udivmodsi4_loop>
    3366:	60 95       	com	r22
    3368:	70 95       	com	r23
    336a:	80 95       	com	r24
    336c:	90 95       	com	r25
    336e:	9b 01       	movw	r18, r22
    3370:	ac 01       	movw	r20, r24
    3372:	bd 01       	movw	r22, r26
    3374:	cf 01       	movw	r24, r30
    3376:	08 95       	ret

00003378 <__tablejump2__>:
    3378:	ee 0f       	add	r30, r30
    337a:	ff 1f       	adc	r31, r31
    337c:	05 90       	lpm	r0, Z+
    337e:	f4 91       	lpm	r31, Z
    3380:	e0 2d       	mov	r30, r0
    3382:	09 94       	ijmp

00003384 <malloc>:
    3384:	0f 93       	push	r16
    3386:	1f 93       	push	r17
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	82 30       	cpi	r24, 0x02	; 2
    338e:	91 05       	cpc	r25, r1
    3390:	10 f4       	brcc	.+4      	; 0x3396 <malloc+0x12>
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <__flp>
    339a:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <__flp+0x1>
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	30 97       	sbiw	r30, 0x00	; 0
    33a8:	19 f1       	breq	.+70     	; 0x33f0 <malloc+0x6c>
    33aa:	40 81       	ld	r20, Z
    33ac:	51 81       	ldd	r21, Z+1	; 0x01
    33ae:	02 81       	ldd	r16, Z+2	; 0x02
    33b0:	13 81       	ldd	r17, Z+3	; 0x03
    33b2:	48 17       	cp	r20, r24
    33b4:	59 07       	cpc	r21, r25
    33b6:	c8 f0       	brcs	.+50     	; 0x33ea <malloc+0x66>
    33b8:	84 17       	cp	r24, r20
    33ba:	95 07       	cpc	r25, r21
    33bc:	69 f4       	brne	.+26     	; 0x33d8 <malloc+0x54>
    33be:	10 97       	sbiw	r26, 0x00	; 0
    33c0:	31 f0       	breq	.+12     	; 0x33ce <malloc+0x4a>
    33c2:	12 96       	adiw	r26, 0x02	; 2
    33c4:	0c 93       	st	X, r16
    33c6:	12 97       	sbiw	r26, 0x02	; 2
    33c8:	13 96       	adiw	r26, 0x03	; 3
    33ca:	1c 93       	st	X, r17
    33cc:	27 c0       	rjmp	.+78     	; 0x341c <malloc+0x98>
    33ce:	00 93 98 03 	sts	0x0398, r16	; 0x800398 <__flp>
    33d2:	10 93 99 03 	sts	0x0399, r17	; 0x800399 <__flp+0x1>
    33d6:	22 c0       	rjmp	.+68     	; 0x341c <malloc+0x98>
    33d8:	21 15       	cp	r18, r1
    33da:	31 05       	cpc	r19, r1
    33dc:	19 f0       	breq	.+6      	; 0x33e4 <malloc+0x60>
    33de:	42 17       	cp	r20, r18
    33e0:	53 07       	cpc	r21, r19
    33e2:	18 f4       	brcc	.+6      	; 0x33ea <malloc+0x66>
    33e4:	9a 01       	movw	r18, r20
    33e6:	bd 01       	movw	r22, r26
    33e8:	ef 01       	movw	r28, r30
    33ea:	df 01       	movw	r26, r30
    33ec:	f8 01       	movw	r30, r16
    33ee:	db cf       	rjmp	.-74     	; 0x33a6 <malloc+0x22>
    33f0:	21 15       	cp	r18, r1
    33f2:	31 05       	cpc	r19, r1
    33f4:	f9 f0       	breq	.+62     	; 0x3434 <malloc+0xb0>
    33f6:	28 1b       	sub	r18, r24
    33f8:	39 0b       	sbc	r19, r25
    33fa:	24 30       	cpi	r18, 0x04	; 4
    33fc:	31 05       	cpc	r19, r1
    33fe:	80 f4       	brcc	.+32     	; 0x3420 <malloc+0x9c>
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	61 15       	cp	r22, r1
    3406:	71 05       	cpc	r23, r1
    3408:	21 f0       	breq	.+8      	; 0x3412 <malloc+0x8e>
    340a:	fb 01       	movw	r30, r22
    340c:	93 83       	std	Z+3, r25	; 0x03
    340e:	82 83       	std	Z+2, r24	; 0x02
    3410:	04 c0       	rjmp	.+8      	; 0x341a <malloc+0x96>
    3412:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <__flp+0x1>
    3416:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <__flp>
    341a:	fe 01       	movw	r30, r28
    341c:	32 96       	adiw	r30, 0x02	; 2
    341e:	44 c0       	rjmp	.+136    	; 0x34a8 <malloc+0x124>
    3420:	fe 01       	movw	r30, r28
    3422:	e2 0f       	add	r30, r18
    3424:	f3 1f       	adc	r31, r19
    3426:	81 93       	st	Z+, r24
    3428:	91 93       	st	Z+, r25
    342a:	22 50       	subi	r18, 0x02	; 2
    342c:	31 09       	sbc	r19, r1
    342e:	39 83       	std	Y+1, r19	; 0x01
    3430:	28 83       	st	Y, r18
    3432:	3a c0       	rjmp	.+116    	; 0x34a8 <malloc+0x124>
    3434:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <__brkval>
    3438:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <__brkval+0x1>
    343c:	23 2b       	or	r18, r19
    343e:	41 f4       	brne	.+16     	; 0x3450 <malloc+0xcc>
    3440:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3444:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3448:	30 93 97 03 	sts	0x0397, r19	; 0x800397 <__brkval+0x1>
    344c:	20 93 96 03 	sts	0x0396, r18	; 0x800396 <__brkval>
    3450:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3454:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3458:	21 15       	cp	r18, r1
    345a:	31 05       	cpc	r19, r1
    345c:	41 f4       	brne	.+16     	; 0x346e <malloc+0xea>
    345e:	2d b7       	in	r18, 0x3d	; 61
    3460:	3e b7       	in	r19, 0x3e	; 62
    3462:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3466:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    346a:	24 1b       	sub	r18, r20
    346c:	35 0b       	sbc	r19, r21
    346e:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <__brkval>
    3472:	f0 91 97 03 	lds	r31, 0x0397	; 0x800397 <__brkval+0x1>
    3476:	e2 17       	cp	r30, r18
    3478:	f3 07       	cpc	r31, r19
    347a:	a0 f4       	brcc	.+40     	; 0x34a4 <malloc+0x120>
    347c:	2e 1b       	sub	r18, r30
    347e:	3f 0b       	sbc	r19, r31
    3480:	28 17       	cp	r18, r24
    3482:	39 07       	cpc	r19, r25
    3484:	78 f0       	brcs	.+30     	; 0x34a4 <malloc+0x120>
    3486:	ac 01       	movw	r20, r24
    3488:	4e 5f       	subi	r20, 0xFE	; 254
    348a:	5f 4f       	sbci	r21, 0xFF	; 255
    348c:	24 17       	cp	r18, r20
    348e:	35 07       	cpc	r19, r21
    3490:	48 f0       	brcs	.+18     	; 0x34a4 <malloc+0x120>
    3492:	4e 0f       	add	r20, r30
    3494:	5f 1f       	adc	r21, r31
    3496:	50 93 97 03 	sts	0x0397, r21	; 0x800397 <__brkval+0x1>
    349a:	40 93 96 03 	sts	0x0396, r20	; 0x800396 <__brkval>
    349e:	81 93       	st	Z+, r24
    34a0:	91 93       	st	Z+, r25
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <malloc+0x124>
    34a4:	e0 e0       	ldi	r30, 0x00	; 0
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	cf 01       	movw	r24, r30
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	08 95       	ret

000034b4 <free>:
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	09 f4       	brne	.+2      	; 0x34be <free+0xa>
    34bc:	81 c0       	rjmp	.+258    	; 0x35c0 <free+0x10c>
    34be:	fc 01       	movw	r30, r24
    34c0:	32 97       	sbiw	r30, 0x02	; 2
    34c2:	13 82       	std	Z+3, r1	; 0x03
    34c4:	12 82       	std	Z+2, r1	; 0x02
    34c6:	a0 91 98 03 	lds	r26, 0x0398	; 0x800398 <__flp>
    34ca:	b0 91 99 03 	lds	r27, 0x0399	; 0x800399 <__flp+0x1>
    34ce:	10 97       	sbiw	r26, 0x00	; 0
    34d0:	81 f4       	brne	.+32     	; 0x34f2 <free+0x3e>
    34d2:	20 81       	ld	r18, Z
    34d4:	31 81       	ldd	r19, Z+1	; 0x01
    34d6:	82 0f       	add	r24, r18
    34d8:	93 1f       	adc	r25, r19
    34da:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <__brkval>
    34de:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <__brkval+0x1>
    34e2:	28 17       	cp	r18, r24
    34e4:	39 07       	cpc	r19, r25
    34e6:	51 f5       	brne	.+84     	; 0x353c <free+0x88>
    34e8:	f0 93 97 03 	sts	0x0397, r31	; 0x800397 <__brkval+0x1>
    34ec:	e0 93 96 03 	sts	0x0396, r30	; 0x800396 <__brkval>
    34f0:	67 c0       	rjmp	.+206    	; 0x35c0 <free+0x10c>
    34f2:	ed 01       	movw	r28, r26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	ce 17       	cp	r28, r30
    34fa:	df 07       	cpc	r29, r31
    34fc:	40 f4       	brcc	.+16     	; 0x350e <free+0x5a>
    34fe:	4a 81       	ldd	r20, Y+2	; 0x02
    3500:	5b 81       	ldd	r21, Y+3	; 0x03
    3502:	9e 01       	movw	r18, r28
    3504:	41 15       	cp	r20, r1
    3506:	51 05       	cpc	r21, r1
    3508:	f1 f0       	breq	.+60     	; 0x3546 <free+0x92>
    350a:	ea 01       	movw	r28, r20
    350c:	f5 cf       	rjmp	.-22     	; 0x34f8 <free+0x44>
    350e:	d3 83       	std	Z+3, r29	; 0x03
    3510:	c2 83       	std	Z+2, r28	; 0x02
    3512:	40 81       	ld	r20, Z
    3514:	51 81       	ldd	r21, Z+1	; 0x01
    3516:	84 0f       	add	r24, r20
    3518:	95 1f       	adc	r25, r21
    351a:	c8 17       	cp	r28, r24
    351c:	d9 07       	cpc	r29, r25
    351e:	59 f4       	brne	.+22     	; 0x3536 <free+0x82>
    3520:	88 81       	ld	r24, Y
    3522:	99 81       	ldd	r25, Y+1	; 0x01
    3524:	84 0f       	add	r24, r20
    3526:	95 1f       	adc	r25, r21
    3528:	02 96       	adiw	r24, 0x02	; 2
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	93 83       	std	Z+3, r25	; 0x03
    3534:	82 83       	std	Z+2, r24	; 0x02
    3536:	21 15       	cp	r18, r1
    3538:	31 05       	cpc	r19, r1
    353a:	29 f4       	brne	.+10     	; 0x3546 <free+0x92>
    353c:	f0 93 99 03 	sts	0x0399, r31	; 0x800399 <__flp+0x1>
    3540:	e0 93 98 03 	sts	0x0398, r30	; 0x800398 <__flp>
    3544:	3d c0       	rjmp	.+122    	; 0x35c0 <free+0x10c>
    3546:	e9 01       	movw	r28, r18
    3548:	fb 83       	std	Y+3, r31	; 0x03
    354a:	ea 83       	std	Y+2, r30	; 0x02
    354c:	49 91       	ld	r20, Y+
    354e:	59 91       	ld	r21, Y+
    3550:	c4 0f       	add	r28, r20
    3552:	d5 1f       	adc	r29, r21
    3554:	ec 17       	cp	r30, r28
    3556:	fd 07       	cpc	r31, r29
    3558:	61 f4       	brne	.+24     	; 0x3572 <free+0xbe>
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	84 0f       	add	r24, r20
    3560:	95 1f       	adc	r25, r21
    3562:	02 96       	adiw	r24, 0x02	; 2
    3564:	e9 01       	movw	r28, r18
    3566:	99 83       	std	Y+1, r25	; 0x01
    3568:	88 83       	st	Y, r24
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	9b 83       	std	Y+3, r25	; 0x03
    3570:	8a 83       	std	Y+2, r24	; 0x02
    3572:	e0 e0       	ldi	r30, 0x00	; 0
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	12 96       	adiw	r26, 0x02	; 2
    3578:	8d 91       	ld	r24, X+
    357a:	9c 91       	ld	r25, X
    357c:	13 97       	sbiw	r26, 0x03	; 3
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	19 f0       	breq	.+6      	; 0x3588 <free+0xd4>
    3582:	fd 01       	movw	r30, r26
    3584:	dc 01       	movw	r26, r24
    3586:	f7 cf       	rjmp	.-18     	; 0x3576 <free+0xc2>
    3588:	8d 91       	ld	r24, X+
    358a:	9c 91       	ld	r25, X
    358c:	11 97       	sbiw	r26, 0x01	; 1
    358e:	9d 01       	movw	r18, r26
    3590:	2e 5f       	subi	r18, 0xFE	; 254
    3592:	3f 4f       	sbci	r19, 0xFF	; 255
    3594:	82 0f       	add	r24, r18
    3596:	93 1f       	adc	r25, r19
    3598:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <__brkval>
    359c:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <__brkval+0x1>
    35a0:	28 17       	cp	r18, r24
    35a2:	39 07       	cpc	r19, r25
    35a4:	69 f4       	brne	.+26     	; 0x35c0 <free+0x10c>
    35a6:	30 97       	sbiw	r30, 0x00	; 0
    35a8:	29 f4       	brne	.+10     	; 0x35b4 <free+0x100>
    35aa:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <__flp+0x1>
    35ae:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <__flp>
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <free+0x104>
    35b4:	13 82       	std	Z+3, r1	; 0x03
    35b6:	12 82       	std	Z+2, r1	; 0x02
    35b8:	b0 93 97 03 	sts	0x0397, r27	; 0x800397 <__brkval+0x1>
    35bc:	a0 93 96 03 	sts	0x0396, r26	; 0x800396 <__brkval>
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	08 95       	ret

000035c6 <realloc>:
    35c6:	a0 e0       	ldi	r26, 0x00	; 0
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	e9 ee       	ldi	r30, 0xE9	; 233
    35cc:	fa e1       	ldi	r31, 0x1A	; 26
    35ce:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__prologue_saves__+0x8>
    35d2:	ec 01       	movw	r28, r24
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	21 f4       	brne	.+8      	; 0x35e0 <realloc+0x1a>
    35d8:	cb 01       	movw	r24, r22
    35da:	0e 94 c2 19 	call	0x3384	; 0x3384 <malloc>
    35de:	b4 c0       	rjmp	.+360    	; 0x3748 <realloc+0x182>
    35e0:	fc 01       	movw	r30, r24
    35e2:	e6 0f       	add	r30, r22
    35e4:	f7 1f       	adc	r31, r23
    35e6:	9c 01       	movw	r18, r24
    35e8:	22 50       	subi	r18, 0x02	; 2
    35ea:	31 09       	sbc	r19, r1
    35ec:	e2 17       	cp	r30, r18
    35ee:	f3 07       	cpc	r31, r19
    35f0:	08 f4       	brcc	.+2      	; 0x35f4 <realloc+0x2e>
    35f2:	a8 c0       	rjmp	.+336    	; 0x3744 <realloc+0x17e>
    35f4:	d9 01       	movw	r26, r18
    35f6:	0d 91       	ld	r16, X+
    35f8:	1c 91       	ld	r17, X
    35fa:	11 97       	sbiw	r26, 0x01	; 1
    35fc:	06 17       	cp	r16, r22
    35fe:	17 07       	cpc	r17, r23
    3600:	b0 f0       	brcs	.+44     	; 0x362e <realloc+0x68>
    3602:	05 30       	cpi	r16, 0x05	; 5
    3604:	11 05       	cpc	r17, r1
    3606:	08 f4       	brcc	.+2      	; 0x360a <realloc+0x44>
    3608:	9b c0       	rjmp	.+310    	; 0x3740 <realloc+0x17a>
    360a:	c8 01       	movw	r24, r16
    360c:	04 97       	sbiw	r24, 0x04	; 4
    360e:	86 17       	cp	r24, r22
    3610:	97 07       	cpc	r25, r23
    3612:	08 f4       	brcc	.+2      	; 0x3616 <realloc+0x50>
    3614:	95 c0       	rjmp	.+298    	; 0x3740 <realloc+0x17a>
    3616:	02 50       	subi	r16, 0x02	; 2
    3618:	11 09       	sbc	r17, r1
    361a:	06 1b       	sub	r16, r22
    361c:	17 0b       	sbc	r17, r23
    361e:	01 93       	st	Z+, r16
    3620:	11 93       	st	Z+, r17
    3622:	6d 93       	st	X+, r22
    3624:	7c 93       	st	X, r23
    3626:	cf 01       	movw	r24, r30
    3628:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
    362c:	89 c0       	rjmp	.+274    	; 0x3740 <realloc+0x17a>
    362e:	5b 01       	movw	r10, r22
    3630:	a0 1a       	sub	r10, r16
    3632:	b1 0a       	sbc	r11, r17
    3634:	4c 01       	movw	r8, r24
    3636:	80 0e       	add	r8, r16
    3638:	91 1e       	adc	r9, r17
    363a:	a0 91 98 03 	lds	r26, 0x0398	; 0x800398 <__flp>
    363e:	b0 91 99 03 	lds	r27, 0x0399	; 0x800399 <__flp+0x1>
    3642:	61 2c       	mov	r6, r1
    3644:	71 2c       	mov	r7, r1
    3646:	e1 2c       	mov	r14, r1
    3648:	f1 2c       	mov	r15, r1
    364a:	10 97       	sbiw	r26, 0x00	; 0
    364c:	09 f4       	brne	.+2      	; 0x3650 <realloc+0x8a>
    364e:	46 c0       	rjmp	.+140    	; 0x36dc <realloc+0x116>
    3650:	8d 91       	ld	r24, X+
    3652:	9c 91       	ld	r25, X
    3654:	11 97       	sbiw	r26, 0x01	; 1
    3656:	a8 15       	cp	r26, r8
    3658:	b9 05       	cpc	r27, r9
    365a:	b1 f5       	brne	.+108    	; 0x36c8 <realloc+0x102>
    365c:	6c 01       	movw	r12, r24
    365e:	42 e0       	ldi	r20, 0x02	; 2
    3660:	c4 0e       	add	r12, r20
    3662:	d1 1c       	adc	r13, r1
    3664:	ca 14       	cp	r12, r10
    3666:	db 04       	cpc	r13, r11
    3668:	78 f1       	brcs	.+94     	; 0x36c8 <realloc+0x102>
    366a:	4c 01       	movw	r8, r24
    366c:	8a 18       	sub	r8, r10
    366e:	9b 08       	sbc	r9, r11
    3670:	64 01       	movw	r12, r8
    3672:	42 e0       	ldi	r20, 0x02	; 2
    3674:	c4 0e       	add	r12, r20
    3676:	d1 1c       	adc	r13, r1
    3678:	12 96       	adiw	r26, 0x02	; 2
    367a:	bc 90       	ld	r11, X
    367c:	12 97       	sbiw	r26, 0x02	; 2
    367e:	13 96       	adiw	r26, 0x03	; 3
    3680:	ac 91       	ld	r26, X
    3682:	b5 e0       	ldi	r27, 0x05	; 5
    3684:	cb 16       	cp	r12, r27
    3686:	d1 04       	cpc	r13, r1
    3688:	40 f0       	brcs	.+16     	; 0x369a <realloc+0xd4>
    368a:	b2 82       	std	Z+2, r11	; 0x02
    368c:	a3 83       	std	Z+3, r26	; 0x03
    368e:	91 82       	std	Z+1, r9	; 0x01
    3690:	80 82       	st	Z, r8
    3692:	d9 01       	movw	r26, r18
    3694:	6d 93       	st	X+, r22
    3696:	7c 93       	st	X, r23
    3698:	09 c0       	rjmp	.+18     	; 0x36ac <realloc+0xe6>
    369a:	0e 5f       	subi	r16, 0xFE	; 254
    369c:	1f 4f       	sbci	r17, 0xFF	; 255
    369e:	80 0f       	add	r24, r16
    36a0:	91 1f       	adc	r25, r17
    36a2:	f9 01       	movw	r30, r18
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	eb 2d       	mov	r30, r11
    36aa:	fa 2f       	mov	r31, r26
    36ac:	e1 14       	cp	r14, r1
    36ae:	f1 04       	cpc	r15, r1
    36b0:	31 f0       	breq	.+12     	; 0x36be <realloc+0xf8>
    36b2:	d7 01       	movw	r26, r14
    36b4:	13 96       	adiw	r26, 0x03	; 3
    36b6:	fc 93       	st	X, r31
    36b8:	ee 93       	st	-X, r30
    36ba:	12 97       	sbiw	r26, 0x02	; 2
    36bc:	41 c0       	rjmp	.+130    	; 0x3740 <realloc+0x17a>
    36be:	f0 93 99 03 	sts	0x0399, r31	; 0x800399 <__flp+0x1>
    36c2:	e0 93 98 03 	sts	0x0398, r30	; 0x800398 <__flp>
    36c6:	3c c0       	rjmp	.+120    	; 0x3740 <realloc+0x17a>
    36c8:	68 16       	cp	r6, r24
    36ca:	79 06       	cpc	r7, r25
    36cc:	08 f4       	brcc	.+2      	; 0x36d0 <realloc+0x10a>
    36ce:	3c 01       	movw	r6, r24
    36d0:	7d 01       	movw	r14, r26
    36d2:	12 96       	adiw	r26, 0x02	; 2
    36d4:	0d 90       	ld	r0, X+
    36d6:	bc 91       	ld	r27, X
    36d8:	a0 2d       	mov	r26, r0
    36da:	b7 cf       	rjmp	.-146    	; 0x364a <realloc+0x84>
    36dc:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <__brkval>
    36e0:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <__brkval+0x1>
    36e4:	88 16       	cp	r8, r24
    36e6:	99 06       	cpc	r9, r25
    36e8:	e1 f4       	brne	.+56     	; 0x3722 <realloc+0x15c>
    36ea:	66 16       	cp	r6, r22
    36ec:	77 06       	cpc	r7, r23
    36ee:	c8 f4       	brcc	.+50     	; 0x3722 <realloc+0x15c>
    36f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    36f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	41 f4       	brne	.+16     	; 0x370c <realloc+0x146>
    36fc:	8d b7       	in	r24, 0x3d	; 61
    36fe:	9e b7       	in	r25, 0x3e	; 62
    3700:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3704:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3708:	84 1b       	sub	r24, r20
    370a:	95 0b       	sbc	r25, r21
    370c:	e8 17       	cp	r30, r24
    370e:	f9 07       	cpc	r31, r25
    3710:	c8 f4       	brcc	.+50     	; 0x3744 <realloc+0x17e>
    3712:	f0 93 97 03 	sts	0x0397, r31	; 0x800397 <__brkval+0x1>
    3716:	e0 93 96 03 	sts	0x0396, r30	; 0x800396 <__brkval>
    371a:	f9 01       	movw	r30, r18
    371c:	71 83       	std	Z+1, r23	; 0x01
    371e:	60 83       	st	Z, r22
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <realloc+0x17a>
    3722:	cb 01       	movw	r24, r22
    3724:	0e 94 c2 19 	call	0x3384	; 0x3384 <malloc>
    3728:	7c 01       	movw	r14, r24
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	59 f0       	breq	.+22     	; 0x3744 <realloc+0x17e>
    372e:	a8 01       	movw	r20, r16
    3730:	be 01       	movw	r22, r28
    3732:	0e 94 a9 1b 	call	0x3752	; 0x3752 <memcpy>
    3736:	ce 01       	movw	r24, r28
    3738:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
    373c:	c7 01       	movw	r24, r14
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <realloc+0x182>
    3740:	ce 01       	movw	r24, r28
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <realloc+0x182>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	ee e0       	ldi	r30, 0x0E	; 14
    374e:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <__epilogue_restores__+0x8>

00003752 <memcpy>:
    3752:	fb 01       	movw	r30, r22
    3754:	dc 01       	movw	r26, r24
    3756:	02 c0       	rjmp	.+4      	; 0x375c <memcpy+0xa>
    3758:	01 90       	ld	r0, Z+
    375a:	0d 92       	st	X+, r0
    375c:	41 50       	subi	r20, 0x01	; 1
    375e:	50 40       	sbci	r21, 0x00	; 0
    3760:	d8 f7       	brcc	.-10     	; 0x3758 <memcpy+0x6>
    3762:	08 95       	ret

00003764 <strcpy>:
    3764:	fb 01       	movw	r30, r22
    3766:	dc 01       	movw	r26, r24
    3768:	01 90       	ld	r0, Z+
    376a:	0d 92       	st	X+, r0
    376c:	00 20       	and	r0, r0
    376e:	e1 f7       	brne	.-8      	; 0x3768 <strcpy+0x4>
    3770:	08 95       	ret

00003772 <eeprom_read_byte>:
    3772:	f9 99       	sbic	0x1f, 1	; 31
    3774:	fe cf       	rjmp	.-4      	; 0x3772 <eeprom_read_byte>
    3776:	92 bd       	out	0x22, r25	; 34
    3778:	81 bd       	out	0x21, r24	; 33
    377a:	f8 9a       	sbi	0x1f, 0	; 31
    377c:	99 27       	eor	r25, r25
    377e:	80 b5       	in	r24, 0x20	; 32
    3780:	08 95       	ret

00003782 <eeprom_write_byte>:
    3782:	26 2f       	mov	r18, r22

00003784 <eeprom_write_r18>:
    3784:	f9 99       	sbic	0x1f, 1	; 31
    3786:	fe cf       	rjmp	.-4      	; 0x3784 <eeprom_write_r18>
    3788:	1f ba       	out	0x1f, r1	; 31
    378a:	92 bd       	out	0x22, r25	; 34
    378c:	81 bd       	out	0x21, r24	; 33
    378e:	20 bd       	out	0x20, r18	; 32
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	fa 9a       	sbi	0x1f, 2	; 31
    3796:	f9 9a       	sbi	0x1f, 1	; 31
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	01 96       	adiw	r24, 0x01	; 1
    379c:	08 95       	ret

0000379e <__prologue_saves__>:
    379e:	2f 92       	push	r2
    37a0:	3f 92       	push	r3
    37a2:	4f 92       	push	r4
    37a4:	5f 92       	push	r5
    37a6:	6f 92       	push	r6
    37a8:	7f 92       	push	r7
    37aa:	8f 92       	push	r8
    37ac:	9f 92       	push	r9
    37ae:	af 92       	push	r10
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	ca 1b       	sub	r28, r26
    37c8:	db 0b       	sbc	r29, r27
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	cd bf       	out	0x3d, r28	; 61
    37d4:	09 94       	ijmp

000037d6 <__epilogue_restores__>:
    37d6:	2a 88       	ldd	r2, Y+18	; 0x12
    37d8:	39 88       	ldd	r3, Y+17	; 0x11
    37da:	48 88       	ldd	r4, Y+16	; 0x10
    37dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    37de:	6e 84       	ldd	r6, Y+14	; 0x0e
    37e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    37e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    37e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    37e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    37e8:	b9 84       	ldd	r11, Y+9	; 0x09
    37ea:	c8 84       	ldd	r12, Y+8	; 0x08
    37ec:	df 80       	ldd	r13, Y+7	; 0x07
    37ee:	ee 80       	ldd	r14, Y+6	; 0x06
    37f0:	fd 80       	ldd	r15, Y+5	; 0x05
    37f2:	0c 81       	ldd	r16, Y+4	; 0x04
    37f4:	1b 81       	ldd	r17, Y+3	; 0x03
    37f6:	aa 81       	ldd	r26, Y+2	; 0x02
    37f8:	b9 81       	ldd	r27, Y+1	; 0x01
    37fa:	ce 0f       	add	r28, r30
    37fc:	d1 1d       	adc	r29, r1
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	ed 01       	movw	r28, r26
    380a:	08 95       	ret

0000380c <__do_global_dtors>:
    380c:	10 e0       	ldi	r17, 0x00	; 0
    380e:	c7 e6       	ldi	r28, 0x67	; 103
    3810:	d0 e0       	ldi	r29, 0x00	; 0
    3812:	04 c0       	rjmp	.+8      	; 0x381c <__do_global_dtors+0x10>
    3814:	fe 01       	movw	r30, r28
    3816:	0e 94 bc 19 	call	0x3378	; 0x3378 <__tablejump2__>
    381a:	21 96       	adiw	r28, 0x01	; 1
    381c:	c8 36       	cpi	r28, 0x68	; 104
    381e:	d1 07       	cpc	r29, r17
    3820:	c9 f7       	brne	.-14     	; 0x3814 <__do_global_dtors+0x8>
    3822:	f8 94       	cli

00003824 <__stop_program>:
    3824:	ff cf       	rjmp	.-2      	; 0x3824 <__stop_program>
